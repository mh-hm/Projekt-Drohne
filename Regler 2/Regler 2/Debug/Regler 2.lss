
Regler 2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000d18  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002e00  80002e00  00003200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000f8  80003000  80003000  00003400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000004  00000004  800030f8  00003804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a8  00000008  800030fc  00003808  2**2
                  ALLOC
  7 .comment      00000030  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000638  00000000  00000000  00003838  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00001180  00000000  00000000  00003e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000f018  00000000  00000000  00004ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c47  00000000  00000000  00014008  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 13 .debug_line   00006f62  00000000  00000000  000167a5  2**0
=======
 12 .debug_line   00006f44  00000000  00000000  00015c4f  2**0
>>>>>>> origin/master
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000e9c  00000000  00000000  0001cb94  2**2
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 15 .debug_str    00003e54  00000000  00000000  0001e5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000240c  00000000  00000000  00022408  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00b18f3b  00000000  00000000  00024814  2**0
=======
 14 .debug_str    00003eb8  00000000  00000000  0001da30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000240c  00000000  00000000  000218e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 00b18f36  00000000  00000000  00023cf4  2**0
>>>>>>> origin/master
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
<<<<<<< HEAD
 19 .debug_ranges 000007c8  00000000  00000000  00b3d750  2**3
=======
 18 .debug_ranges 000007c0  00000000  00000000  00b3cc30  2**3
>>>>>>> origin/master
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f5 74 	sub	pc,pc,-2700

Disassembly of section .text:

80002004 <flashcdw_set_wait_state>:
80002004:	fe 68 14 00 	mov	r8,-125952
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002008:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
8000200a:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
8000200e:	91 09       	st.w	r8[0x0],r9
}
80002010:	5e fc       	retal	r12

80002012 <flashcdw_is_ready>:
//! @{


bool flashcdw_is_ready(void)
{
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
80002012:	fe 68 14 00 	mov	r8,-125952
80002016:	70 2c       	ld.w	r12,r8[0x8]
}
80002018:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000201c:	5e fc       	retal	r12
8000201e:	d7 03       	nop

80002020 <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
80002020:	d4 01       	pushm	lr
	while (!flashcdw_is_ready());
80002022:	f0 1f 00 03 	mcall	8000202c <flashcdw_default_wait_until_ready+0xc>
80002026:	cf e0       	breq	80002022 <flashcdw_default_wait_until_ready+0x2>
}
80002028:	d8 02       	popm	pc
8000202a:	00 00       	add	r0,r0
8000202c:	80 00       	ld.sh	r0,r0[0x0]
8000202e:	20 12       	sub	r2,1

80002030 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80002030:	eb cd 40 c0 	pushm	r6-r7,lr
80002034:	18 96       	mov	r6,r12
80002036:	16 97       	mov	r7,r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80002038:	48 e8       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
8000203a:	70 08       	ld.w	r8,r8[0x0]
8000203c:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
8000203e:	fe 68 14 00 	mov	r8,-125952
80002042:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80002044:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
80002048:	58 07       	cp.w	r7,0
8000204a:	c0 35       	brlt	80002050 <flashcdw_issue_command+0x20>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
8000204c:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
80002050:	3a 59       	mov	r9,-91
80002052:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80002056:	fe 69 14 00 	mov	r9,-125952
8000205a:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
8000205c:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
	flashcdw_error_status = flashcdw_get_error_status();
8000205e:	e2 19 00 0c 	andl	r9,0xc,COH
80002062:	48 58       	lddpc	r8,80002074 <flashcdw_issue_command+0x44>
80002064:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80002066:	48 38       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
80002068:	70 08       	ld.w	r8,r8[0x0]
8000206a:	5d 18       	icall	r8
}
8000206c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002070:	00 00       	add	r0,r0
80002072:	00 04       	add	r4,r0
80002074:	00 00       	add	r0,r0
80002076:	00 08       	add	r8,r0

80002078 <flashcdw_set_flash_waitstate_and_readmode>:
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
}


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80002078:	d4 01       	pushm	lr
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
8000207a:	e0 68 e1 c0 	mov	r8,57792
8000207e:	ea 18 00 e4 	orh	r8,0xe4
80002082:	10 3c       	cp.w	r12,r8
80002084:	e0 88 00 19 	brls	800020b6 <flashcdw_set_flash_waitstate_and_readmode+0x3e>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
80002088:	e0 68 c3 80 	mov	r8,50048
8000208c:	ea 18 01 c9 	orh	r8,0x1c9
80002090:	10 3c       	cp.w	r12,r8
80002092:	e0 8b 00 0a 	brhi	800020a6 <flashcdw_set_flash_waitstate_and_readmode+0x2e>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
80002096:	30 1c       	mov	r12,1
80002098:	f0 1f 00 0c 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000209c:	3f fb       	mov	r11,-1
8000209e:	31 1c       	mov	r12,17
800020a0:	f0 1f 00 0b 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020a4:	d8 02       	popm	pc
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
800020a6:	30 1c       	mov	r12,1
800020a8:	f0 1f 00 08 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
800020ac:	3f fb       	mov	r11,-1
800020ae:	31 0c       	mov	r12,16
800020b0:	f0 1f 00 07 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020b4:	d8 02       	popm	pc
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
800020b6:	30 0c       	mov	r12,0
800020b8:	f0 1f 00 04 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
800020bc:	3f fb       	mov	r11,-1
800020be:	31 1c       	mov	r12,17
800020c0:	f0 1f 00 03 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020c4:	d8 02       	popm	pc
800020c6:	00 00       	add	r0,r0
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	20 04       	sub	r4,0
800020cc:	80 00       	ld.sh	r0,r0[0x0]
800020ce:	20 30       	sub	r0,3

800020d0 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800020d0:	f8 08 16 05 	lsr	r8,r12,0x5
800020d4:	a9 78       	lsl	r8,0x9
800020d6:	e0 28 d8 00 	sub	r8,55296

	/* Enable the correct function. */
	switch (function) {
800020da:	58 7b       	cp.w	r11,7
800020dc:	e0 8b 00 05 	brhi	800020e6 <gpio_enable_module_pin+0x16>
800020e0:	4a 09       	lddpc	r9,80002160 <gpio_enable_module_pin+0x90>
800020e2:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
800020e6:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800020e8:	30 19       	mov	r9,1
800020ea:	f2 0c 09 49 	lsl	r9,r9,r12
800020ee:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020f0:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800020f2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800020f4:	c3 18       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800020f6:	30 19       	mov	r9,1
800020f8:	f2 0c 09 49 	lsl	r9,r9,r12
800020fc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020fe:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002100:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002102:	c2 a8       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002104:	30 19       	mov	r9,1
80002106:	f2 0c 09 49 	lsl	r9,r9,r12
8000210a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000210c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000210e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002110:	c2 38       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002112:	30 19       	mov	r9,1
80002114:	f2 0c 09 49 	lsl	r9,r9,r12
80002118:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000211a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000211c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000211e:	c1 c8       	rjmp	80002156 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002120:	30 19       	mov	r9,1
80002122:	f2 0c 09 49 	lsl	r9,r9,r12
80002126:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002128:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000212a:	91 d9       	st.w	r8[0x34],r9
		break;
8000212c:	c1 58       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000212e:	30 19       	mov	r9,1
80002130:	f2 0c 09 49 	lsl	r9,r9,r12
80002134:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002136:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002138:	91 d9       	st.w	r8[0x34],r9
		break;
8000213a:	c0 e8       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000213c:	30 19       	mov	r9,1
8000213e:	f2 0c 09 49 	lsl	r9,r9,r12
80002142:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002144:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002146:	91 d9       	st.w	r8[0x34],r9
		break;
80002148:	c0 78       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000214a:	30 19       	mov	r9,1
8000214c:	f2 0c 09 49 	lsl	r9,r9,r12
80002150:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002152:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002154:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002156:	30 19       	mov	r9,1
80002158:	f2 0c 09 4c 	lsl	r12,r9,r12
8000215c:	91 2c       	st.w	r8[0x8],r12
8000215e:	5e fd       	retal	0
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	30 00       	mov	r0,0

80002164 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002164:	d4 21       	pushm	r4-r7,lr
80002166:	18 97       	mov	r7,r12
80002168:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000216a:	58 0b       	cp.w	r11,0
8000216c:	c0 31       	brne	80002172 <gpio_enable_module+0xe>
8000216e:	30 05       	mov	r5,0
80002170:	c0 d8       	rjmp	8000218a <gpio_enable_module+0x26>
80002172:	30 06       	mov	r6,0
80002174:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002176:	6e 1b       	ld.w	r11,r7[0x4]
80002178:	6e 0c       	ld.w	r12,r7[0x0]
8000217a:	f0 1f 00 06 	mcall	80002190 <gpio_enable_module+0x2c>
8000217e:	18 45       	or	r5,r12
		gpiomap++;
80002180:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002182:	2f f6       	sub	r6,-1
80002184:	0c 34       	cp.w	r4,r6
80002186:	fe 9b ff f8 	brhi	80002176 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000218a:	0a 9c       	mov	r12,r5
8000218c:	d8 22       	popm	r4-r7,pc
8000218e:	00 00       	add	r0,r0
80002190:	80 00       	ld.sh	r0,r0[0x0]
80002192:	20 d0       	sub	r0,13

<<<<<<< HEAD
80002194 <com_spi_interrupt_handler>:

ISR(com_spi_interrupt_handler, AVR32_SPI_IRQ_GROUP, SPI_ARDU_IRQ_LEVEL)
{
	//TODO: TXDE wird nie verlassen
	static uint8_t count = UINT8_MAX;
=======
80002194 <com_spi_init>:
>>>>>>> origin/master
	spi_put(TWI_SENS,count);
	if(count--) count = UINT8_MAX;
};

spi_status_t com_spi_init(void)
{
80002194:	eb cd 40 80 	pushm	r7,lr

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
80002198:	fe 78 28 00 	mov	r8,-55296
8000219c:	30 19       	mov	r9,1
8000219e:	f1 49 00 44 	st.w	r8[68],r9
				pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->oderc = arch_ioport_pin_to_mask(
800021a2:	30 27       	mov	r7,2
800021a4:	f1 47 00 48 	st.w	r8[72],r7
800021a8:	30 4a       	mov	r10,4
800021aa:	f1 4a 00 48 	st.w	r8[72],r10
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
800021ae:	f1 49 00 58 	st.w	r8[88],r9
	ioport_set_pin_dir(MOSI_REG,IOPORT_DIR_INPUT);
	ioport_set_pin_dir(SCK_REG, IOPORT_DIR_INPUT);
	ioport_set_pin_level(MISO_REG,IOPORT_PIN_LEVEL_LOW);
	
	static const gpio_map_t SPI_GPIO_MAP =	{{MISO_REG, 0},{MOSI_REG, 0},{SCK_REG,0}};	 //TODO: DEFINE FUNCTION_A 0
	gpio_enable_module(SPI_GPIO_MAP,3);
800021b2:	30 3b       	mov	r11,3
800021b4:	48 dc       	lddpc	r12,800021e8 <com_spi_init+0x54>
800021b6:	f0 1f 00 0e 	mcall	800021ec <com_spi_init+0x58>
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800021ba:	30 ab       	mov	r11,10
800021bc:	0e 9c       	mov	r12,r7
800021be:	f0 1f 00 0d 	mcall	800021f0 <com_spi_init+0x5c>
	
	sysclk_enable_peripheral_clock(SPI_ARDU);
	
	spi_initSlave(SPI_ARDU,8,SPI_MODE_0);
800021c2:	30 0a       	mov	r10,0
800021c4:	30 8b       	mov	r11,8
800021c6:	fe 7c 3c 00 	mov	r12,-50176
800021ca:	f0 1f 00 0b 	mcall	800021f4 <com_spi_init+0x60>
	spi_enable(SPI_ARDU);
800021ce:	fe 7c 3c 00 	mov	r12,-50176
800021d2:	f0 1f 00 0a 	mcall	800021f8 <com_spi_init+0x64>
	
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
<<<<<<< HEAD
800021fa:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) cpu_irq_disable();
800021fe:	e6 18 00 01 	andh	r8,0x1,COH
80002202:	c0 21       	brne	80002206 <com_spi_init+0x4e>
80002204:	d3 03       	ssrf	0x10
	
	irq_register_handler(com_spi_interrupt_handler, AVR32_SPI_IRQ, SPI_ARDU_IRQ_LEVEL);
80002206:	30 1a       	mov	r10,1
80002208:	e0 6b 01 20 	mov	r11,288
8000220c:	48 ac       	lddpc	r12,80002234 <com_spi_init+0x7c>
8000220e:	f0 1f 00 0b 	mcall	80002238 <com_spi_init+0x80>
	(*SPI_ARDU).ier = AVR32_SPI_IER_TDRE_MASK; //enable Interrupt
80002212:	30 29       	mov	r9,2
80002214:	fe 78 3c 00 	mov	r8,-50176
80002218:	91 59       	st.w	r8[0x14],r9
=======
800021d6:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) cpu_irq_disable();
800021da:	e6 18 00 01 	andh	r8,0x1,COH
800021de:	c0 21       	brne	800021e2 <com_spi_init+0x4e>
800021e0:	d3 03       	ssrf	0x10
	
	//irq_register_handler(com_spi_interrupt_handler, AVR32_SPI_IRQ, SPI_ARDU_IRQ_LEVEL);
	//(*SPI_ARDU).ier = AVR32_SPI_IER_TDRE_MASK; //enable Interrupt
>>>>>>> origin/master
	cpu_irq_enable();
800021e2:	d5 03       	csrf	0x10
	
	return SPI_OK;
}
800021e4:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	30 20       	mov	r0,2
800021ec:	80 00       	ld.sh	r0,r0[0x0]
800021ee:	21 64       	sub	r4,22
800021f0:	80 00       	ld.sh	r0,r0[0x0]
800021f2:	24 e8       	sub	r8,78
800021f4:	80 00       	ld.sh	r0,r0[0x0]
800021f6:	25 2a       	sub	r10,82
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	25 70       	sub	r0,87

800021fc <sensor_led_init>:
800021fc:	fe 78 28 00 	mov	r8,-55296
80002200:	e0 69 40 00 	mov	r9,16384
80002204:	f1 49 00 54 	st.w	r8[84],r9
80002208:	e2 6a 00 00 	mov	r10,131072
8000220c:	f1 4a 00 54 	st.w	r8[84],r10
80002210:	e0 6b 80 00 	mov	r11,32768
80002214:	f1 4b 00 54 	st.w	r8[84],r11
80002218:	f1 4b 00 44 	st.w	r8[68],r11
8000221c:	f1 4a 00 44 	st.w	r8[68],r10
80002220:	f1 49 00 44 	st.w	r8[68],r9
80002224:	5e fc       	retal	r12
80002226:	d7 03       	nop

80002228 <write_sensor_data>:
80002228:	eb cd 40 c0 	pushm	r6-r7,lr
8000222c:	1a 97       	mov	r7,sp
8000222e:	14 98       	mov	r8,r10
80002230:	1a 96       	mov	r6,sp
80002232:	2f fa       	sub	r10,-1
80002234:	f0 c9 ff f9 	sub	r9,r8,-7
80002238:	e0 19 ff fc 	andl	r9,0xfffc
8000223c:	12 1d       	sub	sp,r9
8000223e:	1a 9e       	mov	lr,sp
80002240:	ba 8c       	st.b	sp[0x0],r12
80002242:	58 08       	cp.w	r8,0
80002244:	c0 90       	breq	80002256 <write_sensor_data+0x2e>
80002246:	30 09       	mov	r9,0
80002248:	2f f9       	sub	r9,-1
8000224a:	17 3c       	ld.ub	r12,r11++
8000224c:	fc 09 0b 0c 	st.b	lr[r9],r12
80002250:	12 38       	cp.w	r8,r9
80002252:	fe 9b ff fb 	brhi	80002248 <write_sensor_data+0x20>
80002256:	30 08       	mov	r8,0
80002258:	32 89       	mov	r9,40
8000225a:	1c 9b       	mov	r11,lr
8000225c:	fe 7c 40 00 	mov	r12,-49152
80002260:	f0 1f 00 03 	mcall	8000226c <write_sensor_data+0x44>
80002264:	0c 9d       	mov	sp,r6
80002266:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000226a:	00 00       	add	r0,r0
8000226c:	80 00       	ld.sh	r0,r0[0x0]
8000226e:	26 dc       	sub	r12,109

80002270 <read_sensor_data>:
80002270:	d4 01       	pushm	lr
80002272:	20 5d       	sub	sp,20
80002274:	ba cc       	st.b	sp[0x4],r12
80002276:	30 18       	mov	r8,1
80002278:	ba f8       	st.b	sp[0x7],r8
8000227a:	50 2b       	stdsp	sp[0x8],r11
8000227c:	32 88       	mov	r8,40
8000227e:	50 08       	stdsp	sp[0x0],r8
80002280:	50 3a       	stdsp	sp[0xc],r10
80002282:	30 08       	mov	r8,0
80002284:	fb 68 00 10 	st.b	sp[16],r8
80002288:	1a 9b       	mov	r11,sp
8000228a:	fe 7c 40 00 	mov	r12,-49152
8000228e:	f0 1f 00 03 	mcall	80002298 <read_sensor_data+0x28>
80002292:	2f bd       	sub	sp,-20
80002294:	d8 02       	popm	pc
80002296:	00 00       	add	r0,r0
80002298:	80 00       	ld.sh	r0,r0[0x0]
8000229a:	27 ac       	sub	r12,122

8000229c <sensor_init>:
8000229c:	eb cd 40 e0 	pushm	r5-r7,lr
800022a0:	20 5d       	sub	sp,20
800022a2:	fe 77 28 00 	mov	r7,-55296
800022a6:	e0 76 00 00 	mov	r6,65536
800022aa:	ef 46 00 44 	st.w	r7[68],r6
800022ae:	e0 65 01 00 	mov	r5,256
800022b2:	ef 45 00 44 	st.w	r7[68],r5
800022b6:	e0 68 20 00 	mov	r8,8192
800022ba:	ef 48 00 48 	st.w	r7[72],r8
800022be:	f0 1f 00 49 	mcall	800023e0 <sensor_init+0x144>
800022c2:	ef 46 00 58 	st.w	r7[88],r6
800022c6:	ef 45 00 58 	st.w	r7[88],r5
800022ca:	30 bb       	mov	r11,11
800022cc:	30 2c       	mov	r12,2
800022ce:	f0 1f 00 46 	mcall	800023e4 <sensor_init+0x148>
800022d2:	30 2b       	mov	r11,2
800022d4:	4c 5c       	lddpc	r12,800023e8 <sensor_init+0x14c>
800022d6:	f0 1f 00 46 	mcall	800023ec <sensor_init+0x150>
800022da:	32 88       	mov	r8,40
800022dc:	50 38       	stdsp	sp[0xc],r8
800022de:	e0 68 c3 80 	mov	r8,50048
800022e2:	ea 18 01 c9 	orh	r8,0x1c9
800022e6:	50 18       	stdsp	sp[0x4],r8
800022e8:	30 08       	mov	r8,0
800022ea:	fb 68 00 10 	st.b	sp[16],r8
800022ee:	e6 68 1a 80 	mov	r8,400000
800022f2:	50 28       	stdsp	sp[0x8],r8
800022f4:	e1 b8 00 42 	mfsr	r8,0x108
800022f8:	e2 69 49 f0 	mov	r9,150000
800022fc:	f0 09 00 0a 	add	r10,r8,r9
80002300:	e1 b9 00 42 	mfsr	r9,0x108
80002304:	14 38       	cp.w	r8,r10
80002306:	e0 88 00 08 	brls	80002316 <sensor_init+0x7a>
8000230a:	12 38       	cp.w	r8,r9
8000230c:	fe 98 ff fa 	brls	80002300 <sensor_init+0x64>
80002310:	12 3a       	cp.w	r10,r9
80002312:	c2 a3       	brcs	80002366 <sensor_init+0xca>
80002314:	cf 6b       	rjmp	80002300 <sensor_init+0x64>
80002316:	12 38       	cp.w	r8,r9
80002318:	e0 8b 00 27 	brhi	80002366 <sensor_init+0xca>
8000231c:	12 3a       	cp.w	r10,r9
8000231e:	c2 43       	brcs	80002366 <sensor_init+0xca>
80002320:	cf 0b       	rjmp	80002300 <sensor_init+0x64>
80002322:	e1 b9 00 42 	mfsr	r9,0x108
80002326:	14 38       	cp.w	r8,r10
80002328:	e0 88 00 08 	brls	80002338 <sensor_init+0x9c>
8000232c:	12 38       	cp.w	r8,r9
8000232e:	fe 98 ff fa 	brls	80002322 <sensor_init+0x86>
80002332:	12 3a       	cp.w	r10,r9
80002334:	c2 83       	brcs	80002384 <sensor_init+0xe8>
80002336:	cf 6b       	rjmp	80002322 <sensor_init+0x86>
80002338:	12 38       	cp.w	r8,r9
8000233a:	e0 8b 00 25 	brhi	80002384 <sensor_init+0xe8>
8000233e:	12 3a       	cp.w	r10,r9
80002340:	c2 23       	brcs	80002384 <sensor_init+0xe8>
80002342:	cf 0b       	rjmp	80002322 <sensor_init+0x86>
80002344:	e1 b9 00 42 	mfsr	r9,0x108
80002348:	14 38       	cp.w	r8,r10
8000234a:	e0 88 00 08 	brls	8000235a <sensor_init+0xbe>
8000234e:	12 38       	cp.w	r8,r9
80002350:	fe 98 ff fa 	brls	80002344 <sensor_init+0xa8>
80002354:	12 3a       	cp.w	r10,r9
80002356:	c4 13       	brcs	800023d8 <sensor_init+0x13c>
80002358:	cf 6b       	rjmp	80002344 <sensor_init+0xa8>
8000235a:	12 38       	cp.w	r8,r9
8000235c:	e0 8b 00 3e 	brhi	800023d8 <sensor_init+0x13c>
80002360:	12 3a       	cp.w	r10,r9
80002362:	c3 b3       	brcs	800023d8 <sensor_init+0x13c>
80002364:	cf 0b       	rjmp	80002344 <sensor_init+0xa8>
80002366:	e0 69 01 00 	mov	r9,256
8000236a:	fe 78 28 00 	mov	r8,-55296
8000236e:	f1 49 00 54 	st.w	r8[84],r9
80002372:	e1 b8 00 42 	mfsr	r8,0x108
80002376:	e0 6a 6f 40 	mov	r10,28480
8000237a:	ea 1a 01 40 	orh	r10,0x140
8000237e:	f0 0a 00 0a 	add	r10,r8,r10
80002382:	cd 0b       	rjmp	80002322 <sensor_init+0x86>
80002384:	fa cb ff fc 	sub	r11,sp,-4
80002388:	fe 7c 40 00 	mov	r12,-49152
8000238c:	f0 1f 00 19 	mcall	800023f0 <sensor_init+0x154>
80002390:	32 18       	mov	r8,33
80002392:	ba b8       	st.b	sp[0x3],r8
80002394:	fa c7 ff fd 	sub	r7,sp,-3
80002398:	30 1a       	mov	r10,1
8000239a:	0e 9b       	mov	r11,r7
8000239c:	34 1c       	mov	r12,65
8000239e:	f0 1f 00 16 	mcall	800023f4 <sensor_init+0x158>
800023a2:	30 06       	mov	r6,0
800023a4:	ba b6       	st.b	sp[0x3],r6
800023a6:	30 1a       	mov	r10,1
800023a8:	0e 9b       	mov	r11,r7
800023aa:	34 2c       	mov	r12,66
800023ac:	f0 1f 00 12 	mcall	800023f4 <sensor_init+0x158>
800023b0:	ba b6       	st.b	sp[0x3],r6
800023b2:	30 1a       	mov	r10,1
800023b4:	0e 9b       	mov	r11,r7
800023b6:	33 bc       	mov	r12,59
800023b8:	f0 1f 00 0f 	mcall	800023f4 <sensor_init+0x158>
800023bc:	30 c8       	mov	r8,12
800023be:	ba b8       	st.b	sp[0x3],r8
800023c0:	30 1a       	mov	r10,1
800023c2:	0e 9b       	mov	r11,r7
800023c4:	33 dc       	mov	r12,61
800023c6:	f0 1f 00 0c 	mcall	800023f4 <sensor_init+0x158>
800023ca:	e1 b8 00 42 	mfsr	r8,0x108
800023ce:	e8 79 27 c0 	mov	r9,600000
800023d2:	f0 09 00 0a 	add	r10,r8,r9
800023d6:	cb 7b       	rjmp	80002344 <sensor_init+0xa8>
800023d8:	2f bd       	sub	sp,-20
800023da:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023de:	00 00       	add	r0,r0
800023e0:	80 00       	ld.sh	r0,r0[0x0]
800023e2:	21 fc       	sub	r12,31
800023e4:	80 00       	ld.sh	r0,r0[0x0]
800023e6:	24 e8       	sub	r8,78
800023e8:	80 00       	ld.sh	r0,r0[0x0]
800023ea:	30 38       	mov	r8,3
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	21 64       	sub	r4,22
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	28 bc       	sub	r12,-117
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	22 28       	sub	r8,34

800023f8 <osc_priv_enable_rc120m>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC32_HZ */

void osc_priv_enable_rc120m(void)
{
800023f8:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800023fa:	e1 b8 00 00 	mfsr	r8,0x0
800023fe:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002400:	d3 03       	ssrf	0x10

	return flags;
80002402:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80002404:	fe 78 58 00 	mov	r8,-43008
80002408:	34 4a       	mov	r10,68
8000240a:	ea 1a aa 00 	orh	r10,0xaa00
8000240e:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80002410:	30 1a       	mov	r10,1
80002412:	f1 4a 00 44 	st.w	r8[68],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002416:	12 98       	mov	r8,r9
80002418:	e6 18 00 01 	andh	r8,0x1,COH
8000241c:	c0 21       	brne	80002420 <osc_priv_enable_rc120m+0x28>
      cpu_irq_enable();
8000241e:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002420:	2f fd       	sub	sp,-4
80002422:	5e fc       	retal	r12

80002424 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80002424:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002426:	e1 b8 00 00 	mfsr	r8,0x0
8000242a:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
8000242c:	d3 03       	ssrf	0x10

	return flags;
8000242e:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL1);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80002430:	fe 78 14 00 	mov	r8,-60416
80002434:	fc 1a aa 00 	movh	r10,0xaa00
80002438:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
8000243c:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000243e:	12 98       	mov	r8,r9
80002440:	e6 18 00 01 	andh	r8,0x1,COH
80002444:	c0 21       	brne	80002448 <sysclk_set_source+0x24>
      cpu_irq_enable();
80002446:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002448:	2f fd       	sub	sp,-4
8000244a:	5e fc       	retal	r12

8000244c <sysclk_set_prescalers>:
 * \param pba_shift The PBA clock will be divided by \f$2^{pba\_shift}\f$
 * \param pbb_shift The PBB clock will be divided by \f$2^{pbb\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift)
{
8000244c:	d4 01       	pushm	lr
8000244e:	20 1d       	sub	sp,4
	uint32_t   pbb_cksel = 0;

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
80002450:	58 0c       	cp.w	r12,0
80002452:	c0 30       	breq	80002458 <sysclk_set_prescalers+0xc>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_OFFSET)
80002454:	20 1c       	sub	r12,1
80002456:	a7 bc       	sbr	r12,0x7
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
80002458:	58 0b       	cp.w	r11,0
8000245a:	c0 30       	breq	80002460 <sysclk_set_prescalers+0x14>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_OFFSET)
8000245c:	20 1b       	sub	r11,1
8000245e:	a7 bb       	sbr	r11,0x7
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
80002460:	58 0a       	cp.w	r10,0
80002462:	c0 30       	breq	80002468 <sysclk_set_prescalers+0x1c>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_OFFSET)
80002464:	20 1a       	sub	r10,1
80002466:	a7 ba       	sbr	r10,0x7

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002468:	e1 b8 00 00 	mfsr	r8,0x0
8000246c:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
8000246e:	d3 03       	ssrf	0x10

	return flags;
80002470:	40 09       	lddsp	r9,sp[0x0]
				| (1U << AVR32_PM_PBBDIV);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
80002472:	fe 78 14 00 	mov	r8,-60416
80002476:	30 4e       	mov	lr,4
80002478:	ea 1e aa 00 	orh	lr,0xaa00
8000247c:	f1 4e 00 58 	st.w	r8[88],lr
	AVR32_PM.cpusel = cpu_cksel;
80002480:	91 1c       	st.w	r8[0x4],r12
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
80002482:	30 cc       	mov	r12,12
80002484:	ea 1c aa 00 	orh	r12,0xaa00
80002488:	f1 4c 00 58 	st.w	r8[88],r12
	AVR32_PM.pbasel = pba_cksel;
8000248c:	91 3b       	st.w	r8[0xc],r11
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
8000248e:	31 0b       	mov	r11,16
80002490:	ea 1b aa 00 	orh	r11,0xaa00
80002494:	f1 4b 00 58 	st.w	r8[88],r11
	AVR32_PM.pbbsel = pbb_cksel;
80002498:	91 4a       	st.w	r8[0x10],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000249a:	12 98       	mov	r8,r9
8000249c:	e6 18 00 01 	andh	r8,0x1,COH
800024a0:	c0 21       	brne	800024a4 <sysclk_set_prescalers+0x58>
      cpu_irq_enable();
800024a2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800024a4:	2f fd       	sub	sp,-4
800024a6:	d8 02       	popm	pc

800024a8 <sysclk_init>:
#endif // CONFIG_USBCLK_SOURCE



void sysclk_init(void)
{
800024a8:	d4 01       	pushm	lr
	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
800024aa:	30 2a       	mov	r10,2
800024ac:	14 9b       	mov	r11,r10
800024ae:	14 9c       	mov	r12,r10
800024b0:	f0 1f 00 0a 	mcall	800024d8 <sysclk_init+0x30>
		osc_priv_enable_osc32();
		break;
#endif

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
800024b4:	f0 1f 00 0a 	mcall	800024dc <sysclk_init+0x34>
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
800024b8:	fe 78 58 00 	mov	r8,-43008
800024bc:	71 19       	ld.w	r9,r8[0x44]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800024be:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800024c2:	cf d0       	breq	800024bc <sysclk_init+0x14>
#endif
	case SYSCLK_SRC_RC120M:
		osc_enable(OSC_ID_RC120M);
		osc_wait_ready(OSC_ID_RC120M);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
800024c4:	e0 6c c3 80 	mov	r12,50048
800024c8:	ea 1c 01 c9 	orh	r12,0x1c9
800024cc:	f0 1f 00 05 	mcall	800024e0 <sysclk_init+0x38>
		sysclk_set_source(SYSCLK_SRC_RC120M);
800024d0:	30 4c       	mov	r12,4
800024d2:	f0 1f 00 05 	mcall	800024e4 <sysclk_init+0x3c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800024d6:	d8 02       	popm	pc
800024d8:	80 00       	ld.sh	r0,r0[0x0]
800024da:	24 4c       	sub	r12,68
800024dc:	80 00       	ld.sh	r0,r0[0x0]
800024de:	23 f8       	sub	r8,63
800024e0:	80 00       	ld.sh	r0,r0[0x0]
800024e2:	20 78       	sub	r8,7
800024e4:	80 00       	ld.sh	r0,r0[0x0]
800024e6:	24 24       	sub	r4,66

800024e8 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
800024e8:	d4 01       	pushm	lr
800024ea:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024ec:	e1 b8 00 00 	mfsr	r8,0x0
800024f0:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800024f2:	d3 03       	ssrf	0x10

	return flags;
800024f4:	40 09       	lddsp	r9,sp[0x0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800024f6:	a3 6c       	lsl	r12,0x2
800024f8:	fe 7a 14 20 	mov	r10,-60384
800024fc:	f8 0a 00 08 	add	r8,r12,r10
80002500:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002502:	30 1e       	mov	lr,1
80002504:	fc 0b 09 4b 	lsl	r11,lr,r11
80002508:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8000250a:	32 0a       	mov	r10,32
8000250c:	ea 1a aa 00 	orh	r10,0xaa00
80002510:	14 0c       	add	r12,r10
80002512:	fe 7a 14 00 	mov	r10,-60416
80002516:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000251a:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000251c:	12 98       	mov	r8,r9
8000251e:	e6 18 00 01 	andh	r8,0x1,COH
80002522:	c0 21       	brne	80002526 <sysclk_priv_enable_module+0x3e>
      cpu_irq_enable();
80002524:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
<<<<<<< HEAD
80002566:	2f fd       	sub	sp,-4
80002568:	d8 02       	popm	pc

8000256a <spi_initSlave>:

spi_status_t spi_initSlave(volatile avr32_spi_t *spi,
		uint8_t bits,
		uint8_t spi_mode)
{
	if (spi_mode > 3 ||
8000256a:	30 38       	mov	r8,3
8000256c:	f0 0a 18 00 	cp.b	r10,r8
80002570:	5f b9       	srhi	r9
80002572:	30 78       	mov	r8,7
80002574:	f0 0b 18 00 	cp.b	r11,r8
80002578:	5f 88       	srls	r8
8000257a:	f3 e8 10 08 	or	r8,r9,r8
8000257e:	c1 71       	brne	800025ac <spi_initSlave+0x42>
80002580:	31 08       	mov	r8,16
80002582:	f0 0b 18 00 	cp.b	r11,r8
80002586:	e0 8b 00 13 	brhi	800025ac <spi_initSlave+0x42>
			bits < 8 || bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000258a:	e0 68 00 80 	mov	r8,128
8000258e:	99 08       	st.w	r12[0x0],r8

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
			(((spi_mode &
80002590:	f1 da c0 01 	bfextu	r8,r10,0x0,0x1
80002594:	f9 b8 00 02 	moveq	r8,2
80002598:	f9 b8 01 00 	movne	r8,0

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
8000259c:	20 8b       	sub	r11,8
8000259e:	a1 9a       	lsr	r10,0x1
800025a0:	f5 eb 10 4a 	or	r10,r10,r11<<0x4
800025a4:	f5 e8 10 08 	or	r8,r10,r8
800025a8:	99 c8       	st.w	r12[0x30],r8
800025aa:	5e fd       	retal	0
			(((spi_mode &
			0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
			((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);

	return SPI_OK;
800025ac:	30 2c       	mov	r12,2
}
800025ae:	5e fc       	retal	r12

800025b0 <spi_enable>:
	return SPI_OK;
}

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800025b0:	30 18       	mov	r8,1
800025b2:	99 08       	st.w	r12[0x0],r8
}
800025b4:	5e fc       	retal	r12
800025b6:	d7 03       	nop

800025b8 <twim_master_interrupt_handler>:
=======
80002526:	2f fd       	sub	sp,-4
80002528:	d8 02       	popm	pc

8000252a <spi_initSlave>:
8000252a:	30 38       	mov	r8,3
8000252c:	f0 0a 18 00 	cp.b	r10,r8
80002530:	5f b9       	srhi	r9
80002532:	30 78       	mov	r8,7
80002534:	f0 0b 18 00 	cp.b	r11,r8
80002538:	5f 88       	srls	r8
8000253a:	f3 e8 10 08 	or	r8,r9,r8
8000253e:	c1 71       	brne	8000256c <spi_initSlave+0x42>
80002540:	31 08       	mov	r8,16
80002542:	f0 0b 18 00 	cp.b	r11,r8
80002546:	e0 8b 00 13 	brhi	8000256c <spi_initSlave+0x42>
8000254a:	e0 68 00 80 	mov	r8,128
8000254e:	99 08       	st.w	r12[0x0],r8
80002550:	f1 da c0 01 	bfextu	r8,r10,0x0,0x1
80002554:	f9 b8 00 02 	moveq	r8,2
80002558:	f9 b8 01 00 	movne	r8,0
8000255c:	20 8b       	sub	r11,8
8000255e:	a1 9a       	lsr	r10,0x1
80002560:	f5 eb 10 4a 	or	r10,r10,r11<<0x4
80002564:	f5 e8 10 08 	or	r8,r10,r8
80002568:	99 c8       	st.w	r12[0x30],r8
8000256a:	5e fd       	retal	0
8000256c:	30 2c       	mov	r12,2
8000256e:	5e fc       	retal	r12

80002570 <spi_enable>:
80002570:	30 18       	mov	r8,1
80002572:	99 08       	st.w	r12[0x0],r8
80002574:	5e fc       	retal	r12
80002576:	d7 03       	nop

80002578 <twim_master_interrupt_handler>:
>>>>>>> origin/master
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002578:	4a e8       	lddpc	r8,80002630 <twim_master_interrupt_handler+0xb8>
8000257a:	70 08       	ld.w	r8,r8[0x0]
8000257c:	70 79       	ld.w	r9,r8[0x1c]
8000257e:	4a ea       	lddpc	r10,80002634 <twim_master_interrupt_handler+0xbc>
80002580:	74 0a       	ld.w	r10,r10[0x0]
80002582:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002586:	12 9a       	mov	r10,r9
80002588:	e2 1a 07 00 	andl	r10,0x700,COH
8000258c:	c1 40       	breq	800025b4 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000258e:	e2 19 03 00 	andl	r9,0x300,COH
80002592:	f9 b9 01 fc 	movne	r9,-4
80002596:	f9 b9 00 fe 	moveq	r9,-2
8000259a:	4a 8a       	lddpc	r10,80002638 <twim_master_interrupt_handler+0xc0>
8000259c:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000259e:	70 3a       	ld.w	r10,r8[0xc]
800025a0:	30 09       	mov	r9,0
800025a2:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
800025a6:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
800025a8:	3f fa       	mov	r10,-1
800025aa:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
800025ac:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
800025ae:	4a 48       	lddpc	r8,8000263c <twim_master_interrupt_handler+0xc4>
800025b0:	b0 89       	st.b	r8[0x0],r9
800025b2:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
800025b4:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
800025b8:	c1 30       	breq	800025de <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
800025ba:	4a 2a       	lddpc	r10,80002640 <twim_master_interrupt_handler+0xc8>
800025bc:	70 5b       	ld.w	r11,r8[0x14]
800025be:	74 09       	ld.w	r9,r10[0x0]
800025c0:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
800025c2:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
800025c4:	4a 09       	lddpc	r9,80002644 <twim_master_interrupt_handler+0xcc>
800025c6:	72 0a       	ld.w	r10,r9[0x0]
800025c8:	20 1a       	sub	r10,1
800025ca:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
800025cc:	72 09       	ld.w	r9,r9[0x0]
800025ce:	58 09       	cp.w	r9,0
800025d0:	c2 f1       	brne	8000262e <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
800025d2:	30 19       	mov	r9,1
800025d4:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
800025d6:	30 09       	mov	r9,0
800025d8:	49 98       	lddpc	r8,8000263c <twim_master_interrupt_handler+0xc4>
800025da:	b0 89       	st.b	r8[0x0],r9
800025dc:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
800025de:	e2 19 00 02 	andl	r9,0x2,COH
800025e2:	c2 60       	breq	8000262e <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
800025e4:	49 99       	lddpc	r9,80002648 <twim_master_interrupt_handler+0xd0>
800025e6:	72 09       	ld.w	r9,r9[0x0]
800025e8:	58 09       	cp.w	r9,0
800025ea:	c0 71       	brne	800025f8 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
800025ec:	30 29       	mov	r9,2
800025ee:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
800025f0:	30 09       	mov	r9,0
800025f2:	49 38       	lddpc	r8,8000263c <twim_master_interrupt_handler+0xc4>
800025f4:	b0 89       	st.b	r8[0x0],r9
800025f6:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
800025f8:	49 5a       	lddpc	r10,8000264c <twim_master_interrupt_handler+0xd4>
800025fa:	74 09       	ld.w	r9,r10[0x0]
800025fc:	13 3b       	ld.ub	r11,r9++
800025fe:	91 6b       	st.w	r8[0x18],r11
80002600:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80002602:	49 28       	lddpc	r8,80002648 <twim_master_interrupt_handler+0xd0>
80002604:	70 09       	ld.w	r9,r8[0x0]
80002606:	20 19       	sub	r9,1
80002608:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8000260a:	70 08       	ld.w	r8,r8[0x0]
8000260c:	58 08       	cp.w	r8,0
8000260e:	c1 01       	brne	8000262e <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
80002610:	48 b8       	lddpc	r8,8000263c <twim_master_interrupt_handler+0xc4>
80002612:	11 88       	ld.ub	r8,r8[0x0]
80002614:	58 08       	cp.w	r8,0
80002616:	c0 c0       	breq	8000262e <twim_master_interrupt_handler+0xb6>
					twim_next = false;
80002618:	30 09       	mov	r9,0
8000261a:	48 98       	lddpc	r8,8000263c <twim_master_interrupt_handler+0xc4>
8000261c:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
8000261e:	48 d8       	lddpc	r8,80002650 <twim_master_interrupt_handler+0xd8>
80002620:	70 08       	ld.w	r8,r8[0x0]
80002622:	70 3a       	ld.w	r10,r8[0xc]
80002624:	48 99       	lddpc	r9,80002648 <twim_master_interrupt_handler+0xd0>
80002626:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
80002628:	70 29       	ld.w	r9,r8[0x8]
8000262a:	48 98       	lddpc	r8,8000264c <twim_master_interrupt_handler+0xd4>
8000262c:	91 09       	st.w	r8[0x0],r9
8000262e:	d6 03       	rete
80002630:	00 00       	add	r0,r0
80002632:	00 0c       	add	r12,r0
80002634:	00 00       	add	r0,r0
80002636:	00 20       	rsub	r0,r0
80002638:	00 00       	add	r0,r0
8000263a:	00 18       	sub	r8,r0
8000263c:	00 00       	add	r0,r0
8000263e:	00 24       	rsub	r4,r0
80002640:	00 00       	add	r0,r0
80002642:	00 10       	sub	r0,r0
80002644:	00 00       	add	r0,r0
80002646:	00 14       	sub	r4,r0
80002648:	00 00       	add	r0,r0
8000264a:	00 2c       	rsub	r12,r0
8000264c:	00 00       	add	r0,r0
8000264e:	00 1c       	sub	r12,r0
80002650:	00 00       	add	r0,r0
80002652:	00 28       	rsub	r8,r0

80002654 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80002654:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80002658:	f4 0b 0d 0a 	divu	r10,r10,r11
8000265c:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002660:	e0 48 00 ff 	cp.w	r8,255
80002664:	e0 8b 00 04 	brhi	8000266c <twim_set_speed+0x18>
80002668:	30 09       	mov	r9,0
8000266a:	c1 a8       	rjmp	8000269e <twim_set_speed+0x4a>
8000266c:	30 09       	mov	r9,0
8000266e:	30 77       	mov	r7,7
80002670:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
80002672:	2f f9       	sub	r9,-1
80002674:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002676:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002678:	e0 48 00 ff 	cp.w	r8,255
8000267c:	5f bb       	srhi	r11
8000267e:	ee 09 18 00 	cp.b	r9,r7
80002682:	5f 8a       	srls	r10
80002684:	f7 ea 00 0a 	and	r10,r11,r10
80002688:	fc 0a 18 00 	cp.b	r10,lr
8000268c:	cf 31       	brne	80002672 <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000268e:	30 7a       	mov	r10,7
80002690:	f4 09 18 00 	cp.b	r9,r10
80002694:	e0 88 00 05 	brls	8000269e <twim_set_speed+0x4a>
80002698:	3f 8c       	mov	r12,-8
8000269a:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000269e:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
800026a2:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
800026a6:	14 18       	sub	r8,r10
800026a8:	f7 e8 10 88 	or	r8,r11,r8<<0x8
800026ac:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
800026b0:	99 19       	st.w	r12[0x4],r9
800026b2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800026b6:	d7 03       	nop

800026b8 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
800026b8:	48 38       	lddpc	r8,800026c4 <twim_status+0xc>
800026ba:	70 08       	ld.w	r8,r8[0x0]
800026bc:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
800026be:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
800026c2:	5e fc       	retal	r12
800026c4:	00 00       	add	r0,r0
800026c6:	00 0c       	add	r12,r0

800026c8 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
800026c8:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
800026cc:	e6 18 00 01 	andh	r8,0x1,COH
800026d0:	c0 21       	brne	800026d4 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
800026d2:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
800026d4:	3f f8       	mov	r8,-1
800026d6:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
800026d8:	99 b8       	st.w	r12[0x2c],r8
}
800026da:	5e fc       	retal	r12

800026dc <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
800026dc:	eb cd 40 fe 	pushm	r1-r7,lr
800026e0:	18 97       	mov	r7,r12
800026e2:	16 93       	mov	r3,r11
800026e4:	14 95       	mov	r5,r10
800026e6:	12 92       	mov	r2,r9
800026e8:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800026ea:	30 14       	mov	r4,1
800026ec:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800026ee:	e0 68 00 80 	mov	r8,128
800026f2:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800026f4:	30 28       	mov	r8,2
800026f6:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800026f8:	49 e6       	lddpc	r6,80002770 <twim_write+0x94>
800026fa:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800026fc:	f0 1f 00 1e 	mcall	80002774 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80002700:	49 e8       	lddpc	r8,80002778 <twim_write+0x9c>
80002702:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80002704:	49 e8       	lddpc	r8,8000277c <twim_write+0xa0>
80002706:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
80002708:	30 09       	mov	r9,0
8000270a:	49 e8       	lddpc	r8,80002780 <twim_write+0xa4>
8000270c:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000270e:	49 e9       	lddpc	r9,80002784 <twim_write+0xa8>
80002710:	30 08       	mov	r8,0
80002712:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80002714:	6c 08       	ld.w	r8,r6[0x0]
80002716:	b1 65       	lsl	r5,0x10
80002718:	e8 15 e0 00 	orl	r5,0xe000
8000271c:	eb e2 10 12 	or	r2,r5,r2<<0x1
80002720:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
80002724:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80002726:	49 9a       	lddpc	r10,80002788 <twim_write+0xac>
80002728:	e0 6b 03 02 	mov	r11,770
8000272c:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8000272e:	74 0a       	ld.w	r10,r10[0x0]
80002730:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002732:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
80002734:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002736:	72 08       	ld.w	r8,r9[0x0]
80002738:	58 08       	cp.w	r8,0
8000273a:	c0 80       	breq	8000274a <twim_write+0x6e>
8000273c:	c0 b8       	rjmp	80002752 <twim_write+0x76>
		cpu_relax();
8000273e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002742:	6c 08       	ld.w	r8,r6[0x0]
80002744:	58 08       	cp.w	r8,0
80002746:	c0 30       	breq	8000274c <twim_write+0x70>
80002748:	c0 58       	rjmp	80002752 <twim_write+0x76>
8000274a:	48 f6       	lddpc	r6,80002784 <twim_write+0xa8>
8000274c:	f0 1f 00 10 	mcall	8000278c <twim_write+0xb0>
80002750:	cf 70       	breq	8000273e <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002752:	30 28       	mov	r8,2
80002754:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002756:	48 c8       	lddpc	r8,80002784 <twim_write+0xa8>
80002758:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8000275a:	5b c8       	cp.w	r8,-4
8000275c:	c0 70       	breq	8000276a <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000275e:	48 a8       	lddpc	r8,80002784 <twim_write+0xa8>
80002760:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80002762:	5b e8       	cp.w	r8,-2
80002764:	c0 30       	breq	8000276a <twim_write+0x8e>
80002766:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000276a:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
8000276e:	00 00       	add	r0,r0
80002770:	00 00       	add	r0,r0
80002772:	00 0c       	add	r12,r0
80002774:	80 00       	ld.sh	r0,r0[0x0]
80002776:	26 c8       	sub	r8,108
80002778:	00 00       	add	r0,r0
8000277a:	00 1c       	sub	r12,r0
8000277c:	00 00       	add	r0,r0
8000277e:	00 2c       	rsub	r12,r0
80002780:	00 00       	add	r0,r0
80002782:	00 24       	rsub	r4,r0
80002784:	00 00       	add	r0,r0
80002786:	00 18       	sub	r8,r0
80002788:	00 00       	add	r0,r0
8000278a:	00 20       	rsub	r0,r0
8000278c:	80 00       	ld.sh	r0,r0[0x0]
8000278e:	26 b8       	sub	r8,107

80002790 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002790:	d4 01       	pushm	lr
80002792:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002794:	30 08       	mov	r8,0
80002796:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80002798:	30 08       	mov	r8,0
8000279a:	16 99       	mov	r9,r11
8000279c:	10 9a       	mov	r10,r8
8000279e:	1a 9b       	mov	r11,sp
800027a0:	f0 1f 00 02 	mcall	800027a8 <twim_probe+0x18>
}
800027a4:	2f fd       	sub	sp,-4
800027a6:	d8 02       	popm	pc
800027a8:	80 00       	ld.sh	r0,r0[0x0]
800027aa:	26 dc       	sub	r12,109

800027ac <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
800027ac:	eb cd 40 c0 	pushm	r6-r7,lr
800027b0:	18 96       	mov	r6,r12
800027b2:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800027b4:	30 28       	mov	r8,2
800027b6:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800027b8:	4b 78       	lddpc	r8,80002894 <twim_read_packet+0xe8>
800027ba:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800027bc:	f0 1f 00 37 	mcall	80002898 <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
800027c0:	6e 29       	ld.w	r9,r7[0x8]
800027c2:	4b 78       	lddpc	r8,8000289c <twim_read_packet+0xf0>
800027c4:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
800027c6:	6e 39       	ld.w	r9,r7[0xc]
800027c8:	4b 68       	lddpc	r8,800028a0 <twim_read_packet+0xf4>
800027ca:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
800027cc:	30 08       	mov	r8,0
800027ce:	4b 6a       	lddpc	r10,800028a4 <twim_read_packet+0xf8>
800027d0:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800027d2:	30 0b       	mov	r11,0
800027d4:	4b 5a       	lddpc	r10,800028a8 <twim_read_packet+0xfc>
800027d6:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
800027d8:	0f fa       	ld.ub	r10,r7[0x7]
800027da:	f0 0a 18 00 	cp.b	r10,r8
800027de:	c2 50       	breq	80002828 <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800027e0:	4a d8       	lddpc	r8,80002894 <twim_read_packet+0xe8>
800027e2:	70 08       	ld.w	r8,r8[0x0]
800027e4:	30 19       	mov	r9,1
800027e6:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
800027e8:	e0 69 00 80 	mov	r9,128
800027ec:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
800027ee:	30 29       	mov	r9,2
800027f0:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
800027f2:	ee ca ff fc 	sub	r10,r7,-4
800027f6:	4a e9       	lddpc	r9,800028ac <twim_read_packet+0x100>
800027f8:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
800027fa:	0f f9       	ld.ub	r9,r7[0x7]
800027fc:	4a da       	lddpc	r10,800028b0 <twim_read_packet+0x104>
800027fe:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002800:	e0 6b 07 03 	mov	r11,1795
80002804:	4a ca       	lddpc	r10,800028b4 <twim_read_packet+0x108>
80002806:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002808:	6e 0a       	ld.w	r10,r7[0x0]
8000280a:	a1 7a       	lsl	r10,0x1
8000280c:	e8 1a a0 00 	orl	r10,0xa000
80002810:	f5 e9 11 09 	or	r9,r10,r9<<0x10
80002814:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80002816:	6e 0a       	ld.w	r10,r7[0x0]
80002818:	6e 39       	ld.w	r9,r7[0xc]
8000281a:	b1 69       	lsl	r9,0x10
8000281c:	f3 ea 10 19 	or	r9,r9,r10<<0x1
80002820:	e8 19 e0 01 	orl	r9,0xe001
80002824:	91 49       	st.w	r8[0x10],r9
80002826:	c1 18       	rjmp	80002848 <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
80002828:	30 0a       	mov	r10,0
8000282a:	4a 28       	lddpc	r8,800028b0 <twim_read_packet+0x104>
8000282c:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8000282e:	e0 6a 07 01 	mov	r10,1793
80002832:	4a 18       	lddpc	r8,800028b4 <twim_read_packet+0x108>
80002834:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002836:	49 88       	lddpc	r8,80002894 <twim_read_packet+0xe8>
80002838:	70 08       	ld.w	r8,r8[0x0]
8000283a:	6e 0a       	ld.w	r10,r7[0x0]
8000283c:	b1 69       	lsl	r9,0x10
8000283e:	f3 ea 10 19 	or	r9,r9,r10<<0x1
80002842:	e8 19 e0 01 	orl	r9,0xe001
80002846:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80002848:	49 38       	lddpc	r8,80002894 <twim_read_packet+0xe8>
8000284a:	70 08       	ld.w	r8,r8[0x0]
8000284c:	49 a9       	lddpc	r9,800028b4 <twim_read_packet+0x108>
8000284e:	72 09       	ld.w	r9,r9[0x0]
80002850:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002852:	30 18       	mov	r8,1
80002854:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
80002856:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80002858:	49 48       	lddpc	r8,800028a8 <twim_read_packet+0xfc>
8000285a:	70 08       	ld.w	r8,r8[0x0]
8000285c:	58 08       	cp.w	r8,0
8000285e:	c0 80       	breq	8000286e <twim_read_packet+0xc2>
80002860:	c0 b8       	rjmp	80002876 <twim_read_packet+0xca>
		cpu_relax();
80002862:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80002866:	6e 08       	ld.w	r8,r7[0x0]
80002868:	58 08       	cp.w	r8,0
8000286a:	c0 30       	breq	80002870 <twim_read_packet+0xc4>
8000286c:	c0 58       	rjmp	80002876 <twim_read_packet+0xca>
8000286e:	48 f7       	lddpc	r7,800028a8 <twim_read_packet+0xfc>
80002870:	f0 1f 00 12 	mcall	800028b8 <twim_read_packet+0x10c>
80002874:	cf 70       	breq	80002862 <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002876:	30 28       	mov	r8,2
80002878:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000287a:	48 c8       	lddpc	r8,800028a8 <twim_read_packet+0xfc>
8000287c:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000287e:	5b c8       	cp.w	r8,-4
80002880:	c0 70       	breq	8000288e <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002882:	48 a8       	lddpc	r8,800028a8 <twim_read_packet+0xfc>
80002884:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002886:	5b e8       	cp.w	r8,-2
80002888:	c0 30       	breq	8000288e <twim_read_packet+0xe2>
8000288a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8000288e:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80002892:	00 00       	add	r0,r0
80002894:	00 00       	add	r0,r0
80002896:	00 0c       	add	r12,r0
80002898:	80 00       	ld.sh	r0,r0[0x0]
8000289a:	26 c8       	sub	r8,108
8000289c:	00 00       	add	r0,r0
8000289e:	00 10       	sub	r0,r0
800028a0:	00 00       	add	r0,r0
800028a2:	00 14       	sub	r4,r0
800028a4:	00 00       	add	r0,r0
800028a6:	00 24       	rsub	r4,r0
800028a8:	00 00       	add	r0,r0
800028aa:	00 18       	sub	r8,r0
800028ac:	00 00       	add	r0,r0
800028ae:	00 1c       	sub	r12,r0
800028b0:	00 00       	add	r0,r0
800028b2:	00 2c       	rsub	r12,r0
800028b4:	00 00       	add	r0,r0
800028b6:	00 20       	rsub	r0,r0
800028b8:	80 00       	ld.sh	r0,r0[0x0]
800028ba:	26 b8       	sub	r8,107

800028bc <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
800028bc:	eb cd 40 e0 	pushm	r5-r7,lr
800028c0:	20 1d       	sub	sp,4
800028c2:	18 97       	mov	r7,r12
800028c4:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
800028c6:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800028ca:	30 0a       	mov	r10,0
800028cc:	4a 79       	lddpc	r9,80002968 <twim_master_init+0xac>
800028ce:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
800028d0:	e6 18 00 01 	andh	r8,0x1,COH
800028d4:	c0 b1       	brne	800028ea <twim_master_init+0x2e>
		cpu_irq_disable ();
800028d6:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
800028d8:	3f f8       	mov	r8,-1
800028da:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800028dc:	30 18       	mov	r8,1
800028de:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800028e0:	e0 68 00 80 	mov	r8,128
800028e4:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
800028e6:	d5 03       	csrf	0x10
800028e8:	c0 88       	rjmp	800028f8 <twim_master_init+0x3c>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
800028ea:	3f f8       	mov	r8,-1
800028ec:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800028ee:	30 18       	mov	r8,1
800028f0:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800028f2:	e0 68 00 80 	mov	r8,128
800028f6:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
800028f8:	3f f8       	mov	r8,-1
800028fa:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800028fc:	e1 b8 00 00 	mfsr	r8,0x0
80002900:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002902:	d3 03       	ssrf	0x10

	return flags;
80002904:	40 06       	lddsp	r6,sp[0x0]

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002906:	30 1a       	mov	r10,1
80002908:	e0 6b 01 40 	mov	r11,320
8000290c:	49 8c       	lddpc	r12,8000296c <twim_master_init+0xb0>
8000290e:	f0 1f 00 19 	mcall	80002970 <twim_master_init+0xb4>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002912:	e6 16 00 01 	andh	r6,0x1,COH
80002916:	c0 21       	brne	8000291a <twim_master_init+0x5e>
      cpu_irq_enable();
80002918:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
8000291a:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000291e:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80002920:	f0 09 18 00 	cp.b	r9,r8
80002924:	f9 b8 01 10 	movne	r8,16
80002928:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
8000292c:	f9 b8 01 ff 	movne	r8,-1
80002930:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80002934:	6a 0a       	ld.w	r10,r5[0x0]
80002936:	6a 1b       	ld.w	r11,r5[0x4]
80002938:	0e 9c       	mov	r12,r7
8000293a:	f0 1f 00 0f 	mcall	80002974 <twim_master_init+0xb8>
8000293e:	5b 8c       	cp.w	r12,-8
80002940:	c1 00       	breq	80002960 <twim_master_init+0xa4>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80002942:	6a 2b       	ld.w	r11,r5[0x8]
80002944:	0e 9c       	mov	r12,r7
80002946:	f0 1f 00 0d 	mcall	80002978 <twim_master_init+0xbc>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000294a:	48 88       	lddpc	r8,80002968 <twim_master_init+0xac>
8000294c:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
8000294e:	5b c8       	cp.w	r8,-4
80002950:	c0 70       	breq	8000295e <twim_master_init+0xa2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002952:	48 68       	lddpc	r8,80002968 <twim_master_init+0xac>
80002954:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80002956:	5b e8       	cp.w	r8,-2
80002958:	c0 30       	breq	8000295e <twim_master_init+0xa2>
8000295a:	30 0c       	mov	r12,0
8000295c:	c0 28       	rjmp	80002960 <twim_master_init+0xa4>
8000295e:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
<<<<<<< HEAD
800029a0:	2f fd       	sub	sp,-4
800029a2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800029a6:	00 00       	add	r0,r0
800029a8:	00 00       	add	r0,r0
800029aa:	00 20       	rsub	r0,r0
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	25 b8       	sub	r8,91
800029b0:	80 00       	ld.sh	r0,r0[0x0]
800029b2:	29 c0       	sub	r0,-100
800029b4:	80 00       	ld.sh	r0,r0[0x0]
800029b6:	26 94       	sub	r4,105
800029b8:	80 00       	ld.sh	r0,r0[0x0]
800029ba:	27 d0       	sub	r0,125

800029bc <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800029bc:	c0 08       	rjmp	800029bc <_unhandled_interrupt>
800029be:	d7 03       	nop

800029c0 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800029c0:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800029c4:	49 99       	lddpc	r9,80002a28 <INTC_register_interrupt+0x68>
800029c6:	f2 08 00 39 	add	r9,r9,r8<<0x3
800029ca:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800029ce:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800029d0:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800029d4:	58 0a       	cp.w	r10,0
800029d6:	c0 91       	brne	800029e8 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800029d8:	49 59       	lddpc	r9,80002a2c <INTC_register_interrupt+0x6c>
800029da:	49 6a       	lddpc	r10,80002a30 <INTC_register_interrupt+0x70>
800029dc:	12 1a       	sub	r10,r9
800029de:	fe 79 10 00 	mov	r9,-61440
800029e2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800029e6:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800029e8:	58 1a       	cp.w	r10,1
800029ea:	c0 a1       	brne	800029fe <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800029ec:	49 09       	lddpc	r9,80002a2c <INTC_register_interrupt+0x6c>
800029ee:	49 2a       	lddpc	r10,80002a34 <INTC_register_interrupt+0x74>
800029f0:	12 1a       	sub	r10,r9
800029f2:	bf aa       	sbr	r10,0x1e
800029f4:	fe 79 10 00 	mov	r9,-61440
800029f8:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800029fc:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800029fe:	58 2a       	cp.w	r10,2
80002a00:	c0 a1       	brne	80002a14 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002a02:	48 b9       	lddpc	r9,80002a2c <INTC_register_interrupt+0x6c>
80002a04:	48 da       	lddpc	r10,80002a38 <INTC_register_interrupt+0x78>
80002a06:	12 1a       	sub	r10,r9
80002a08:	bf ba       	sbr	r10,0x1f
80002a0a:	fe 79 10 00 	mov	r9,-61440
80002a0e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002a12:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002a14:	48 69       	lddpc	r9,80002a2c <INTC_register_interrupt+0x6c>
80002a16:	48 aa       	lddpc	r10,80002a3c <INTC_register_interrupt+0x7c>
80002a18:	12 1a       	sub	r10,r9
80002a1a:	ea 1a c0 00 	orh	r10,0xc000
80002a1e:	fe 79 10 00 	mov	r9,-61440
80002a22:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002a26:	5e fc       	retal	r12
80002a28:	80 00       	ld.sh	r0,r0[0x0]
80002a2a:	30 48       	mov	r8,4
80002a2c:	80 00       	ld.sh	r0,r0[0x0]
80002a2e:	2e 00       	sub	r0,-32
80002a30:	80 00       	ld.sh	r0,r0[0x0]
80002a32:	2f 04       	sub	r4,-16
80002a34:	80 00       	ld.sh	r0,r0[0x0]
80002a36:	2f 12       	sub	r2,-15
80002a38:	80 00       	ld.sh	r0,r0[0x0]
80002a3a:	2f 20       	sub	r0,-14
80002a3c:	80 00       	ld.sh	r0,r0[0x0]
80002a3e:	2f 2e       	sub	lr,-14

80002a40 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002a40:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002a42:	49 18       	lddpc	r8,80002a84 <INTC_init_interrupts+0x44>
80002a44:	e3 b8 00 01 	mtsr	0x4,r8
80002a48:	49 0e       	lddpc	lr,80002a88 <INTC_init_interrupts+0x48>
80002a4a:	30 07       	mov	r7,0
80002a4c:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002a4e:	49 0c       	lddpc	r12,80002a8c <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002a50:	49 05       	lddpc	r5,80002a90 <INTC_init_interrupts+0x50>
80002a52:	10 15       	sub	r5,r8
80002a54:	fe 76 10 00 	mov	r6,-61440
80002a58:	c1 08       	rjmp	80002a78 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002a5a:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002a5c:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002a5e:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002a60:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002a64:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002a66:	10 3a       	cp.w	r10,r8
80002a68:	fe 9b ff fc 	brhi	80002a60 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002a6c:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002a70:	2f f7       	sub	r7,-1
80002a72:	2f 8e       	sub	lr,-8
80002a74:	59 67       	cp.w	r7,22
80002a76:	c0 50       	breq	80002a80 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002a78:	7c 08       	ld.w	r8,lr[0x0]
80002a7a:	58 08       	cp.w	r8,0
80002a7c:	ce f1       	brne	80002a5a <INTC_init_interrupts+0x1a>
80002a7e:	cf 7b       	rjmp	80002a6c <INTC_init_interrupts+0x2c>
80002a80:	d8 22       	popm	r4-r7,pc
80002a82:	00 00       	add	r0,r0
80002a84:	80 00       	ld.sh	r0,r0[0x0]
80002a86:	2e 00       	sub	r0,-32
80002a88:	80 00       	ld.sh	r0,r0[0x0]
80002a8a:	30 48       	mov	r8,4
80002a8c:	80 00       	ld.sh	r0,r0[0x0]
80002a8e:	29 bc       	sub	r12,-101
80002a90:	80 00       	ld.sh	r0,r0[0x0]
80002a92:	2f 04       	sub	r4,-16

80002a94 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002a94:	fe 78 10 00 	mov	r8,-61440
80002a98:	e0 69 00 83 	mov	r9,131
80002a9c:	f2 0c 01 0c 	sub	r12,r9,r12
80002aa0:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002aa4:	f2 ca ff c0 	sub	r10,r9,-64
80002aa8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002aac:	58 08       	cp.w	r8,0
80002aae:	c0 21       	brne	80002ab2 <_get_interrupt_handler+0x1e>
80002ab0:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002ab2:	f0 08 12 00 	clz	r8,r8
80002ab6:	48 5a       	lddpc	r10,80002ac8 <_get_interrupt_handler+0x34>
80002ab8:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002abc:	f0 08 11 1f 	rsub	r8,r8,31
80002ac0:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002ac2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002ac6:	5e fc       	retal	r12
80002ac8:	80 00       	ld.sh	r0,r0[0x0]
80002aca:	30 48       	mov	r8,4

80002acc <_stext>:
80002acc:	e0 6d 40 00 	mov	sp,16384
80002ad0:	fe c0 fc d0 	sub	r0,pc,-816
80002ad4:	e3 b0 00 01 	mtsr	0x4,r0
80002ad8:	d5 53       	csrf	0x15
80002ada:	30 40       	mov	r0,4
80002adc:	31 01       	mov	r1,16
80002ade:	02 30       	cp.w	r0,r1
80002ae0:	c0 72       	brcc	80002aee <idata_load_loop_end>
80002ae2:	fe c2 f9 ea 	sub	r2,pc,-1558

80002ae6 <idata_load_loop>:
80002ae6:	a5 05       	ld.d	r4,r2++
80002ae8:	a1 24       	st.d	r0++,r4
80002aea:	02 30       	cp.w	r0,r1
80002aec:	cf d3       	brcs	80002ae6 <idata_load_loop>

80002aee <idata_load_loop_end>:
80002aee:	31 00       	mov	r0,16
80002af0:	e0 61 01 b8 	mov	r1,440
80002af4:	02 30       	cp.w	r0,r1
80002af6:	c0 62       	brcc	80002b02 <udata_clear_loop_end>
80002af8:	30 02       	mov	r2,0
80002afa:	30 03       	mov	r3,0

80002afc <udata_clear_loop>:
80002afc:	a1 22       	st.d	r0++,r2
80002afe:	02 30       	cp.w	r0,r1
80002b00:	cf e3       	brcs	80002afc <udata_clear_loop>

80002b02 <udata_clear_loop_end>:
80002b02:	fe cf fe da 	sub	pc,pc,-294
80002b06:	d7 03       	nop

80002b08 <board_init>:
=======
80002960:	2f fd       	sub	sp,-4
80002962:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002966:	00 00       	add	r0,r0
80002968:	00 00       	add	r0,r0
8000296a:	00 18       	sub	r8,r0
8000296c:	80 00       	ld.sh	r0,r0[0x0]
8000296e:	25 78       	sub	r8,87
80002970:	80 00       	ld.sh	r0,r0[0x0]
80002972:	29 80       	sub	r0,-104
80002974:	80 00       	ld.sh	r0,r0[0x0]
80002976:	26 54       	sub	r4,101
80002978:	80 00       	ld.sh	r0,r0[0x0]
8000297a:	27 90       	sub	r0,121

8000297c <_unhandled_interrupt>:
8000297c:	c0 08       	rjmp	8000297c <_unhandled_interrupt>
8000297e:	d7 03       	nop

80002980 <INTC_register_interrupt>:
80002980:	f6 08 16 05 	lsr	r8,r11,0x5
80002984:	49 99       	lddpc	r9,800029e8 <INTC_register_interrupt+0x68>
80002986:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000298a:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000298e:	72 19       	ld.w	r9,r9[0x4]
80002990:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
80002994:	58 0a       	cp.w	r10,0
80002996:	c0 91       	brne	800029a8 <INTC_register_interrupt+0x28>
80002998:	49 59       	lddpc	r9,800029ec <INTC_register_interrupt+0x6c>
8000299a:	49 6a       	lddpc	r10,800029f0 <INTC_register_interrupt+0x70>
8000299c:	12 1a       	sub	r10,r9
8000299e:	fe 79 10 00 	mov	r9,-61440
800029a2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800029a6:	5e fc       	retal	r12
800029a8:	58 1a       	cp.w	r10,1
800029aa:	c0 a1       	brne	800029be <INTC_register_interrupt+0x3e>
800029ac:	49 09       	lddpc	r9,800029ec <INTC_register_interrupt+0x6c>
800029ae:	49 2a       	lddpc	r10,800029f4 <INTC_register_interrupt+0x74>
800029b0:	12 1a       	sub	r10,r9
800029b2:	bf aa       	sbr	r10,0x1e
800029b4:	fe 79 10 00 	mov	r9,-61440
800029b8:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800029bc:	5e fc       	retal	r12
800029be:	58 2a       	cp.w	r10,2
800029c0:	c0 a1       	brne	800029d4 <INTC_register_interrupt+0x54>
800029c2:	48 b9       	lddpc	r9,800029ec <INTC_register_interrupt+0x6c>
800029c4:	48 da       	lddpc	r10,800029f8 <INTC_register_interrupt+0x78>
800029c6:	12 1a       	sub	r10,r9
800029c8:	bf ba       	sbr	r10,0x1f
800029ca:	fe 79 10 00 	mov	r9,-61440
800029ce:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800029d2:	5e fc       	retal	r12
800029d4:	48 69       	lddpc	r9,800029ec <INTC_register_interrupt+0x6c>
800029d6:	48 aa       	lddpc	r10,800029fc <INTC_register_interrupt+0x7c>
800029d8:	12 1a       	sub	r10,r9
800029da:	ea 1a c0 00 	orh	r10,0xc000
800029de:	fe 79 10 00 	mov	r9,-61440
800029e2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800029e6:	5e fc       	retal	r12
800029e8:	80 00       	ld.sh	r0,r0[0x0]
800029ea:	30 48       	mov	r8,4
800029ec:	80 00       	ld.sh	r0,r0[0x0]
800029ee:	2e 00       	sub	r0,-32
800029f0:	80 00       	ld.sh	r0,r0[0x0]
800029f2:	2f 04       	sub	r4,-16
800029f4:	80 00       	ld.sh	r0,r0[0x0]
800029f6:	2f 12       	sub	r2,-15
800029f8:	80 00       	ld.sh	r0,r0[0x0]
800029fa:	2f 20       	sub	r0,-14
800029fc:	80 00       	ld.sh	r0,r0[0x0]
800029fe:	2f 2e       	sub	lr,-14

80002a00 <INTC_init_interrupts>:
80002a00:	d4 21       	pushm	r4-r7,lr
80002a02:	49 18       	lddpc	r8,80002a44 <INTC_init_interrupts+0x44>
80002a04:	e3 b8 00 01 	mtsr	0x4,r8
80002a08:	49 0e       	lddpc	lr,80002a48 <INTC_init_interrupts+0x48>
80002a0a:	30 07       	mov	r7,0
80002a0c:	0e 94       	mov	r4,r7
80002a0e:	49 0c       	lddpc	r12,80002a4c <INTC_init_interrupts+0x4c>
80002a10:	49 05       	lddpc	r5,80002a50 <INTC_init_interrupts+0x50>
80002a12:	10 15       	sub	r5,r8
80002a14:	fe 76 10 00 	mov	r6,-61440
80002a18:	c1 08       	rjmp	80002a38 <INTC_init_interrupts+0x38>
80002a1a:	08 98       	mov	r8,r4
80002a1c:	7c 1b       	ld.w	r11,lr[0x4]
80002a1e:	7c 0a       	ld.w	r10,lr[0x0]
80002a20:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
80002a24:	2f f8       	sub	r8,-1
80002a26:	10 3a       	cp.w	r10,r8
80002a28:	fe 9b ff fc 	brhi	80002a20 <INTC_init_interrupts+0x20>
80002a2c:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
80002a30:	2f f7       	sub	r7,-1
80002a32:	2f 8e       	sub	lr,-8
80002a34:	59 67       	cp.w	r7,22
80002a36:	c0 50       	breq	80002a40 <INTC_init_interrupts+0x40>
80002a38:	7c 08       	ld.w	r8,lr[0x0]
80002a3a:	58 08       	cp.w	r8,0
80002a3c:	ce f1       	brne	80002a1a <INTC_init_interrupts+0x1a>
80002a3e:	cf 7b       	rjmp	80002a2c <INTC_init_interrupts+0x2c>
80002a40:	d8 22       	popm	r4-r7,pc
80002a42:	00 00       	add	r0,r0
80002a44:	80 00       	ld.sh	r0,r0[0x0]
80002a46:	2e 00       	sub	r0,-32
80002a48:	80 00       	ld.sh	r0,r0[0x0]
80002a4a:	30 48       	mov	r8,4
80002a4c:	80 00       	ld.sh	r0,r0[0x0]
80002a4e:	29 7c       	sub	r12,-105
80002a50:	80 00       	ld.sh	r0,r0[0x0]
80002a52:	2f 04       	sub	r4,-16

80002a54 <_get_interrupt_handler>:
80002a54:	fe 78 10 00 	mov	r8,-61440
80002a58:	e0 69 00 83 	mov	r9,131
80002a5c:	f2 0c 01 0c 	sub	r12,r9,r12
80002a60:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
80002a64:	f2 ca ff c0 	sub	r10,r9,-64
80002a68:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a6c:	58 08       	cp.w	r8,0
80002a6e:	c0 21       	brne	80002a72 <_get_interrupt_handler+0x1e>
80002a70:	5e fd       	retal	0
80002a72:	f0 08 12 00 	clz	r8,r8
80002a76:	48 5a       	lddpc	r10,80002a88 <_get_interrupt_handler+0x34>
80002a78:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002a7c:	f0 08 11 1f 	rsub	r8,r8,31
80002a80:	72 19       	ld.w	r9,r9[0x4]
80002a82:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
80002a86:	5e fc       	retal	r12
80002a88:	80 00       	ld.sh	r0,r0[0x0]
80002a8a:	30 48       	mov	r8,4

80002a8c <_stext>:
80002a8c:	e0 6d 40 00 	mov	sp,16384
80002a90:	fe c0 fc 90 	sub	r0,pc,-880
80002a94:	e3 b0 00 01 	mtsr	0x4,r0
80002a98:	d5 53       	csrf	0x15
80002a9a:	30 40       	mov	r0,4
80002a9c:	30 81       	mov	r1,8
80002a9e:	02 30       	cp.w	r0,r1
80002aa0:	c0 72       	brcc	80002aae <idata_load_loop_end>
80002aa2:	fe c2 f9 aa 	sub	r2,pc,-1622

80002aa6 <idata_load_loop>:
80002aa6:	a5 05       	ld.d	r4,r2++
80002aa8:	a1 24       	st.d	r0++,r4
80002aaa:	02 30       	cp.w	r0,r1
80002aac:	cf d3       	brcs	80002aa6 <idata_load_loop>

80002aae <idata_load_loop_end>:
80002aae:	30 80       	mov	r0,8
80002ab0:	e0 61 01 b0 	mov	r1,432
80002ab4:	02 30       	cp.w	r0,r1
80002ab6:	c0 62       	brcc	80002ac2 <udata_clear_loop_end>
80002ab8:	30 02       	mov	r2,0
80002aba:	30 03       	mov	r3,0

80002abc <udata_clear_loop>:
80002abc:	a1 22       	st.d	r0++,r2
80002abe:	02 30       	cp.w	r0,r1
80002ac0:	cf e3       	brcs	80002abc <udata_clear_loop>

80002ac2 <udata_clear_loop_end>:
80002ac2:	fe cf fe da 	sub	pc,pc,-294
80002ac6:	d7 03       	nop

80002ac8 <board_init>:
>>>>>>> origin/master
#include <conf_board.h>
#include "sensor.h"
#include "com_spi.h"

void board_init(void)
{
80002ac8:	d4 01       	pushm	lr
	sysclk_init();
80002aca:	f0 1f 00 0a 	mcall	80002af0 <board_init+0x28>
	INTC_init_interrupts();
80002ace:	f0 1f 00 0a 	mcall	80002af4 <board_init+0x2c>
80002ad2:	30 6b       	mov	r11,6
80002ad4:	30 2c       	mov	r12,2
80002ad6:	f0 1f 00 09 	mcall	80002af8 <board_init+0x30>
	ioport_init();
	sensor_init();
80002ada:	f0 1f 00 09 	mcall	80002afc <board_init+0x34>
	com_spi_init();
80002ade:	f0 1f 00 09 	mcall	80002b00 <board_init+0x38>

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
80002ae2:	fc 19 00 80 	movh	r9,0x80
80002ae6:	fe 78 28 00 	mov	r8,-55296
80002aea:	f1 49 00 44 	st.w	r8[68],r9
	//ioport_set_pin_dir(RST_ARDU_REG, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_TRANS, IOPORT_DIR_OUTPUT);
	
}
80002aee:	d8 02       	popm	pc
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	24 a8       	sub	r8,74
80002af4:	80 00       	ld.sh	r0,r0[0x0]
80002af6:	2a 00       	sub	r0,-96
80002af8:	80 00       	ld.sh	r0,r0[0x0]
80002afa:	24 e8       	sub	r8,78
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	22 9c       	sub	r12,41
80002b00:	80 00       	ld.sh	r0,r0[0x0]
80002b02:	21 94       	sub	r4,25

80002b04 <read_sensor>:
struct bno055_accel_t acc;
struct bno055_gyro_t gyr;
struct bno055_euler_t eul;

void read_sensor(void)
{
80002b04:	eb cd 40 c0 	pushm	r6-r7,lr
80002b08:	20 1d       	sub	sp,4
		//TODO: Works only if start Adresse for read is 0
		uint8_t val = BNO055_PAGE_ZERO; //CHANGE PAGE
80002b0a:	fa c7 ff fc 	sub	r7,sp,-4
80002b0e:	30 08       	mov	r8,0
80002b10:	0e f8       	st.b	--r7,r8
		write_sensor_data(BNO055_PAGE_ID_ADDR, &val, 1);
80002b12:	30 1a       	mov	r10,1
80002b14:	0e 9b       	mov	r11,r7
80002b16:	30 7c       	mov	r12,7
80002b18:	f0 1f 00 2d 	mcall	80002bcc <read_sensor+0xc8>
		
		
		read_sensor_data(BNO055_CHIP_ID_ADDR, &page_0, 106);
80002b1c:	4a d6       	lddpc	r6,80002bd0 <read_sensor+0xcc>
80002b1e:	36 aa       	mov	r10,106
80002b20:	0c 9b       	mov	r11,r6
80002b22:	30 0c       	mov	r12,0
80002b24:	f0 1f 00 2c 	mcall	80002bd4 <read_sensor+0xd0>
		
		acc.x = ((int16_t) page_0[BNO055_ACCEL_DATA_X_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_ACCEL_DATA_X_LSB_ADDR];
80002b28:	4a c8       	lddpc	r8,80002bd8 <read_sensor+0xd4>
80002b2a:	ed 39 00 09 	ld.ub	r9,r6[9]
80002b2e:	a9 69       	lsl	r9,0x8
80002b30:	ed 3a 00 08 	ld.ub	r10,r6[8]
80002b34:	14 09       	add	r9,r10
80002b36:	91 09       	st.w	r8[0x0],r9
		acc.y = ((int16_t) page_0[BNO055_ACCEL_DATA_Y_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_ACCEL_DATA_Y_LSB_ADDR];
80002b38:	ed 39 00 0b 	ld.ub	r9,r6[11]
80002b3c:	a9 69       	lsl	r9,0x8
80002b3e:	ed 3a 00 0a 	ld.ub	r10,r6[10]
80002b42:	14 09       	add	r9,r10
80002b44:	91 19       	st.w	r8[0x4],r9
		acc.z = ((int16_t) page_0[BNO055_ACCEL_DATA_Z_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_ACCEL_DATA_Z_LSB_ADDR];
80002b46:	ed 39 00 0d 	ld.ub	r9,r6[13]
80002b4a:	a9 69       	lsl	r9,0x8
80002b4c:	ed 3a 00 0c 	ld.ub	r10,r6[12]
80002b50:	14 09       	add	r9,r10
80002b52:	91 29       	st.w	r8[0x8],r9
		
		eul.h = ((int16_t) page_0[BNO055_EULER_H_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_EULER_H_LSB_ADDR];
80002b54:	4a 28       	lddpc	r8,80002bdc <read_sensor+0xd8>
80002b56:	ed 39 00 1b 	ld.ub	r9,r6[27]
80002b5a:	a9 69       	lsl	r9,0x8
80002b5c:	ed 3a 00 1a 	ld.ub	r10,r6[26]
80002b60:	14 09       	add	r9,r10
80002b62:	91 09       	st.w	r8[0x0],r9
		eul.p = ((int16_t) page_0[BNO055_EULER_P_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_EULER_P_LSB_ADDR];
80002b64:	ed 39 00 1f 	ld.ub	r9,r6[31]
80002b68:	a9 69       	lsl	r9,0x8
80002b6a:	ed 3a 00 1e 	ld.ub	r10,r6[30]
80002b6e:	14 09       	add	r9,r10
80002b70:	91 29       	st.w	r8[0x8],r9
		eul.r = ((int16_t) page_0[BNO055_EULER_R_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_EULER_R_LSB_ADDR];
80002b72:	ed 39 00 1d 	ld.ub	r9,r6[29]
80002b76:	a9 69       	lsl	r9,0x8
80002b78:	ed 3a 00 1c 	ld.ub	r10,r6[28]
80002b7c:	14 09       	add	r9,r10
80002b7e:	91 19       	st.w	r8[0x4],r9
		
		gyr.x = ((int16_t) page_0[BNO055_GYRO_DATA_X_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_GYRO_DATA_X_LSB_ADDR];
80002b80:	49 88       	lddpc	r8,80002be0 <read_sensor+0xdc>
80002b82:	ed 39 00 15 	ld.ub	r9,r6[21]
80002b86:	a9 69       	lsl	r9,0x8
80002b88:	ed 3a 00 14 	ld.ub	r10,r6[20]
80002b8c:	14 09       	add	r9,r10
80002b8e:	91 09       	st.w	r8[0x0],r9
		gyr.y = ((int16_t) page_0[BNO055_GYRO_DATA_Y_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_GYRO_DATA_Y_LSB_ADDR];
80002b90:	ed 39 00 17 	ld.ub	r9,r6[23]
80002b94:	a9 69       	lsl	r9,0x8
80002b96:	ed 3a 00 16 	ld.ub	r10,r6[22]
80002b9a:	14 09       	add	r9,r10
80002b9c:	91 19       	st.w	r8[0x4],r9
		gyr.z = ((int16_t) page_0[BNO055_GYRO_DATA_Z_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_GYRO_DATA_Z_LSB_ADDR];
80002b9e:	ed 39 00 19 	ld.ub	r9,r6[25]
80002ba2:	a9 69       	lsl	r9,0x8
80002ba4:	ed 3a 00 18 	ld.ub	r10,r6[24]
80002ba8:	14 09       	add	r9,r10
80002baa:	91 29       	st.w	r8[0x8],r9
		
		val = BNO055_PAGE_ONE; //CHANGE PAGE
80002bac:	30 18       	mov	r8,1
80002bae:	ba b8       	st.b	sp[0x3],r8
		write_sensor_data(BNO055_PAGE_ID_ADDR, &val, 1);
80002bb0:	30 1a       	mov	r10,1
80002bb2:	0e 9b       	mov	r11,r7
80002bb4:	30 7c       	mov	r12,7
80002bb6:	f0 1f 00 06 	mcall	80002bcc <read_sensor+0xc8>
		
		read_sensor_data(BNO055_CHIP_ID_ADDR, &page_1, 20);
80002bba:	31 4a       	mov	r10,20
80002bbc:	48 ab       	lddpc	r11,80002be4 <read_sensor+0xe0>
80002bbe:	30 0c       	mov	r12,0
80002bc0:	f0 1f 00 05 	mcall	80002bd4 <read_sensor+0xd0>
}
80002bc4:	2f fd       	sub	sp,-4
80002bc6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bca:	00 00       	add	r0,r0
80002bcc:	80 00       	ld.sh	r0,r0[0x0]
80002bce:	22 28       	sub	r8,34
80002bd0:	00 00       	add	r0,r0
80002bd2:	01 34       	ld.ub	r4,r0++
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	22 70       	sub	r0,39
80002bd8:	00 00       	add	r0,r0
80002bda:	00 fc       	st.b	--r0,r12
80002bdc:	00 00       	add	r0,r0
80002bde:	01 08       	ld.w	r8,r0++
80002be0:	00 00       	add	r0,r0
80002be2:	01 a0       	ld.ub	r0,r0[0x2]
80002be4:	00 00       	add	r0,r0
80002be6:	01 14       	ld.sh	r4,r0++

80002be8 <main>:

int main (void)
{
80002be8:	d4 31       	pushm	r0-r7,lr
	board_init();		
80002bea:	f0 1f 00 4a 	mcall	80002d10 <main+0x128>


	while (1)
	{
		read_sensor();
		spi_put(SPI_ARDU,(uint8_t) eul.h);
80002bee:	4c a0       	lddpc	r0,80002d14 <main+0x12c>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002bf0:	fe 72 3c 00 	mov	r2,-50176
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002bf4:	fe 77 28 00 	mov	r7,-55296
80002bf8:	fc 11 00 80 	movh	r1,0x80

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002bfc:	e0 66 40 00 	mov	r6,16384
80002c00:	e0 65 80 00 	mov	r5,32768
80002c04:	e2 64 00 00 	mov	r4,131072
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c08:	e0 63 70 e0 	mov	r3,28896
80002c0c:	ea 13 00 72 	orh	r3,0x72
	board_init();		


	while (1)
	{
		read_sensor();
80002c10:	f0 1f 00 42 	mcall	80002d18 <main+0x130>
		spi_put(SPI_ARDU,(uint8_t) eul.h);
80002c14:	60 09       	ld.w	r9,r0[0x0]
80002c16:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80002c1a:	85 38       	st.w	r2[0xc],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002c1c:	64 48       	ld.w	r8,r2[0x10]
		while (!spi_is_tx_ready(SPI_ARDU));
80002c1e:	e2 18 00 02 	andl	r8,0x2,COH
80002c22:	cf d0       	breq	80002c1c <main+0x34>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002c24:	f3 d9 c1 08 	bfextu	r9,r9,0x8,0x8
80002c28:	85 39       	st.w	r2[0xc],r9
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002c2a:	ef 41 00 58 	st.w	r7[88],r1

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002c2e:	ef 46 00 54 	st.w	r7[84],r6
80002c32:	ef 45 00 54 	st.w	r7[84],r5
80002c36:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c3a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c3e:	f0 03 00 0a 	add	r10,r8,r3
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c42:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c46:	14 38       	cp.w	r8,r10
80002c48:	e0 88 00 08 	brls	80002c58 <main+0x70>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c4c:	12 38       	cp.w	r8,r9
80002c4e:	fe 98 ff fa 	brls	80002c42 <main+0x5a>
80002c52:	12 3a       	cp.w	r10,r9
80002c54:	c3 b3       	brcs	80002cca <main+0xe2>
80002c56:	cf 6b       	rjmp	80002c42 <main+0x5a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c58:	12 38       	cp.w	r8,r9
80002c5a:	e0 8b 00 38 	brhi	80002cca <main+0xe2>
80002c5e:	12 3a       	cp.w	r10,r9
80002c60:	c3 53       	brcs	80002cca <main+0xe2>
80002c62:	cf 0b       	rjmp	80002c42 <main+0x5a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c64:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c68:	14 38       	cp.w	r8,r10
80002c6a:	e0 88 00 08 	brls	80002c7a <main+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c6e:	12 38       	cp.w	r8,r9
80002c70:	fe 98 ff fa 	brls	80002c64 <main+0x7c>
80002c74:	12 3a       	cp.w	r10,r9
80002c76:	c3 53       	brcs	80002ce0 <main+0xf8>
80002c78:	cf 6b       	rjmp	80002c64 <main+0x7c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c7a:	12 38       	cp.w	r8,r9
80002c7c:	e0 8b 00 32 	brhi	80002ce0 <main+0xf8>
80002c80:	12 3a       	cp.w	r10,r9
80002c82:	c2 f3       	brcs	80002ce0 <main+0xf8>
80002c84:	cf 0b       	rjmp	80002c64 <main+0x7c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c86:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c8a:	14 38       	cp.w	r8,r10
80002c8c:	e0 88 00 08 	brls	80002c9c <main+0xb4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c90:	12 38       	cp.w	r8,r9
80002c92:	fe 98 ff fa 	brls	80002c86 <main+0x9e>
80002c96:	12 3a       	cp.w	r10,r9
80002c98:	c3 13       	brcs	80002cfa <main+0x112>
80002c9a:	cf 6b       	rjmp	80002c86 <main+0x9e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c9c:	12 38       	cp.w	r8,r9
80002c9e:	e0 8b 00 2e 	brhi	80002cfa <main+0x112>
80002ca2:	12 3a       	cp.w	r10,r9
80002ca4:	c2 b3       	brcs	80002cfa <main+0x112>
80002ca6:	cf 0b       	rjmp	80002c86 <main+0x9e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ca8:	e1 ba 00 42 	mfsr	r10,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002cac:	12 38       	cp.w	r8,r9
80002cae:	e0 88 00 08 	brls	80002cbe <main+0xd6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002cb2:	14 38       	cp.w	r8,r10
80002cb4:	fe 98 ff fa 	brls	80002ca8 <main+0xc0>
80002cb8:	14 39       	cp.w	r9,r10
80002cba:	ca b3       	brcs	80002c10 <main+0x28>
80002cbc:	cf 6b       	rjmp	80002ca8 <main+0xc0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cbe:	14 38       	cp.w	r8,r10
80002cc0:	fe 9b ff a8 	brhi	80002c10 <main+0x28>
80002cc4:	14 39       	cp.w	r9,r10
80002cc6:	ca 53       	brcs	80002c10 <main+0x28>
80002cc8:	cf 0b       	rjmp	80002ca8 <main+0xc0>
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002cca:	ef 46 00 58 	st.w	r7[88],r6

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002cce:	ef 45 00 54 	st.w	r7[84],r5
80002cd2:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002cd6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002cda:	f0 03 00 0a 	add	r10,r8,r3
80002cde:	cc 3b       	rjmp	80002c64 <main+0x7c>
80002ce0:	ef 41 00 54 	st.w	r7[84],r1
80002ce4:	ef 46 00 54 	st.w	r7[84],r6
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002ce8:	ef 45 00 58 	st.w	r7[88],r5

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002cec:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002cf0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002cf4:	f0 03 00 0a 	add	r10,r8,r3
80002cf8:	cc 7b       	rjmp	80002c86 <main+0x9e>
80002cfa:	ef 46 00 54 	st.w	r7[84],r6
80002cfe:	ef 45 00 54 	st.w	r7[84],r5
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002d02:	ef 44 00 58 	st.w	r7[88],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d06:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d0a:	f0 03 00 09 	add	r9,r8,r3
80002d0e:	cc db       	rjmp	80002ca8 <main+0xc0>
80002d10:	80 00       	ld.sh	r0,r0[0x0]
80002d12:	2a c8       	sub	r8,-84
80002d14:	00 00       	add	r0,r0
80002d16:	01 08       	ld.w	r8,r0++
80002d18:	80 00       	ld.sh	r0,r0[0x0]
80002d1a:	2b 04       	sub	r4,-80

Disassembly of section .exception:

80002e00 <_evba>:
80002e00:	c0 08       	rjmp	80002e00 <_evba>
	...

80002e04 <_handle_TLB_Multiple_Hit>:
80002e04:	c0 08       	rjmp	80002e04 <_handle_TLB_Multiple_Hit>
	...

80002e08 <_handle_Bus_Error_Data_Fetch>:
80002e08:	c0 08       	rjmp	80002e08 <_handle_Bus_Error_Data_Fetch>
	...

80002e0c <_handle_Bus_Error_Instruction_Fetch>:
80002e0c:	c0 08       	rjmp	80002e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80002e10 <_handle_NMI>:
80002e10:	c0 08       	rjmp	80002e10 <_handle_NMI>
	...

80002e14 <_handle_Instruction_Address>:
80002e14:	c0 08       	rjmp	80002e14 <_handle_Instruction_Address>
	...

80002e18 <_handle_ITLB_Protection>:
80002e18:	c0 08       	rjmp	80002e18 <_handle_ITLB_Protection>
	...

80002e1c <_handle_Breakpoint>:
80002e1c:	c0 08       	rjmp	80002e1c <_handle_Breakpoint>
	...

80002e20 <_handle_Illegal_Opcode>:
80002e20:	c0 08       	rjmp	80002e20 <_handle_Illegal_Opcode>
	...

80002e24 <_handle_Unimplemented_Instruction>:
80002e24:	c0 08       	rjmp	80002e24 <_handle_Unimplemented_Instruction>
	...

80002e28 <_handle_Privilege_Violation>:
80002e28:	c0 08       	rjmp	80002e28 <_handle_Privilege_Violation>
	...

80002e2c <_handle_Floating_Point>:
80002e2c:	c0 08       	rjmp	80002e2c <_handle_Floating_Point>
	...

80002e30 <_handle_Coprocessor_Absent>:
80002e30:	c0 08       	rjmp	80002e30 <_handle_Coprocessor_Absent>
	...

80002e34 <_handle_Data_Address_Read>:
80002e34:	c0 08       	rjmp	80002e34 <_handle_Data_Address_Read>
	...

80002e38 <_handle_Data_Address_Write>:
80002e38:	c0 08       	rjmp	80002e38 <_handle_Data_Address_Write>
	...

80002e3c <_handle_DTLB_Protection_Read>:
80002e3c:	c0 08       	rjmp	80002e3c <_handle_DTLB_Protection_Read>
	...

80002e40 <_handle_DTLB_Protection_Write>:
80002e40:	c0 08       	rjmp	80002e40 <_handle_DTLB_Protection_Write>
	...

80002e44 <_handle_DTLB_Modified>:
80002e44:	c0 08       	rjmp	80002e44 <_handle_DTLB_Modified>
	...

80002e50 <_handle_ITLB_Miss>:
80002e50:	c0 08       	rjmp	80002e50 <_handle_ITLB_Miss>
	...

80002e60 <_handle_DTLB_Miss_Read>:
80002e60:	c0 08       	rjmp	80002e60 <_handle_DTLB_Miss_Read>
	...

80002e70 <_handle_DTLB_Miss_Write>:
80002e70:	c0 08       	rjmp	80002e70 <_handle_DTLB_Miss_Write>
	...

80002f00 <_handle_Supervisor_Call>:
80002f00:	c0 08       	rjmp	80002f00 <_handle_Supervisor_Call>
80002f02:	d7 03       	nop

80002f04 <_int0>:
80002f04:	30 0c       	mov	r12,0
80002f06:	fe b0 fd a7 	rcall	80002a54 <_get_interrupt_handler>
80002f0a:	58 0c       	cp.w	r12,0
80002f0c:	f8 0f 17 10 	movne	pc,r12
80002f10:	d6 03       	rete

80002f12 <_int1>:
80002f12:	30 1c       	mov	r12,1
80002f14:	fe b0 fd a0 	rcall	80002a54 <_get_interrupt_handler>
80002f18:	58 0c       	cp.w	r12,0
80002f1a:	f8 0f 17 10 	movne	pc,r12
80002f1e:	d6 03       	rete

80002f20 <_int2>:
80002f20:	30 2c       	mov	r12,2
80002f22:	fe b0 fd 99 	rcall	80002a54 <_get_interrupt_handler>
80002f26:	58 0c       	cp.w	r12,0
80002f28:	f8 0f 17 10 	movne	pc,r12
80002f2c:	d6 03       	rete

80002f2e <_int3>:
80002f2e:	30 3c       	mov	r12,3
80002f30:	fe b0 fd 92 	rcall	80002a54 <_get_interrupt_handler>
80002f34:	58 0c       	cp.w	r12,0
80002f36:	f8 0f 17 10 	movne	pc,r12
80002f3a:	d6 03       	rete
80002f3c:	d7 03       	nop
80002f3e:	d7 03       	nop
80002f40:	d7 03       	nop
80002f42:	d7 03       	nop
80002f44:	d7 03       	nop
80002f46:	d7 03       	nop
80002f48:	d7 03       	nop
80002f4a:	d7 03       	nop
80002f4c:	d7 03       	nop
80002f4e:	d7 03       	nop
80002f50:	d7 03       	nop
80002f52:	d7 03       	nop
80002f54:	d7 03       	nop
80002f56:	d7 03       	nop
80002f58:	d7 03       	nop
80002f5a:	d7 03       	nop
80002f5c:	d7 03       	nop
80002f5e:	d7 03       	nop
80002f60:	d7 03       	nop
80002f62:	d7 03       	nop
80002f64:	d7 03       	nop
80002f66:	d7 03       	nop
80002f68:	d7 03       	nop
80002f6a:	d7 03       	nop
80002f6c:	d7 03       	nop
80002f6e:	d7 03       	nop
80002f70:	d7 03       	nop
80002f72:	d7 03       	nop
80002f74:	d7 03       	nop
80002f76:	d7 03       	nop
80002f78:	d7 03       	nop
80002f7a:	d7 03       	nop
80002f7c:	d7 03       	nop
80002f7e:	d7 03       	nop
80002f80:	d7 03       	nop
80002f82:	d7 03       	nop
80002f84:	d7 03       	nop
80002f86:	d7 03       	nop
80002f88:	d7 03       	nop
80002f8a:	d7 03       	nop
80002f8c:	d7 03       	nop
80002f8e:	d7 03       	nop
80002f90:	d7 03       	nop
80002f92:	d7 03       	nop
80002f94:	d7 03       	nop
80002f96:	d7 03       	nop
80002f98:	d7 03       	nop
80002f9a:	d7 03       	nop
80002f9c:	d7 03       	nop
80002f9e:	d7 03       	nop
80002fa0:	d7 03       	nop
80002fa2:	d7 03       	nop
80002fa4:	d7 03       	nop
80002fa6:	d7 03       	nop
80002fa8:	d7 03       	nop
80002faa:	d7 03       	nop
80002fac:	d7 03       	nop
80002fae:	d7 03       	nop
80002fb0:	d7 03       	nop
80002fb2:	d7 03       	nop
80002fb4:	d7 03       	nop
80002fb6:	d7 03       	nop
80002fb8:	d7 03       	nop
80002fba:	d7 03       	nop
80002fbc:	d7 03       	nop
80002fbe:	d7 03       	nop
80002fc0:	d7 03       	nop
80002fc2:	d7 03       	nop
80002fc4:	d7 03       	nop
80002fc6:	d7 03       	nop
80002fc8:	d7 03       	nop
80002fca:	d7 03       	nop
80002fcc:	d7 03       	nop
80002fce:	d7 03       	nop
80002fd0:	d7 03       	nop
80002fd2:	d7 03       	nop
80002fd4:	d7 03       	nop
80002fd6:	d7 03       	nop
80002fd8:	d7 03       	nop
80002fda:	d7 03       	nop
80002fdc:	d7 03       	nop
80002fde:	d7 03       	nop
80002fe0:	d7 03       	nop
80002fe2:	d7 03       	nop
80002fe4:	d7 03       	nop
80002fe6:	d7 03       	nop
80002fe8:	d7 03       	nop
80002fea:	d7 03       	nop
80002fec:	d7 03       	nop
80002fee:	d7 03       	nop
80002ff0:	d7 03       	nop
80002ff2:	d7 03       	nop
80002ff4:	d7 03       	nop
80002ff6:	d7 03       	nop
80002ff8:	d7 03       	nop
80002ffa:	d7 03       	nop
80002ffc:	d7 03       	nop
80002ffe:	d7 03       	nop
