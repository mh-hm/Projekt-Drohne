
Regler 2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000bd4  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002c00  80002c00  00003000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000e0  80002e00  80002e00  00003200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000004  00000004  80002ee0  00003404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a8  00000008  80002ee4  00003408  2**2
                  ALLOC
  7 .comment      00000030  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000570  00000000  00000000  00003438  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000fe5  00000000  00000000  000039a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000b809  00000000  00000000  0000498d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000016e3  00000000  00000000  00010196  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005b9a  00000000  00000000  00011879  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000d10  00000000  00000000  00017414  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000038ef  00000000  00000000  00018124  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002030  00000000  00000000  0001ba13  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 009196fc  00000000  00000000  0001da43  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 18 .debug_ranges 000006f0  00000000  00000000  00937140  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f6 8c 	sub	pc,pc,-2420

Disassembly of section .text:

80002004 <flashcdw_set_wait_state>:
80002004:	fe 68 14 00 	mov	r8,-125952
80002008:	70 09       	ld.w	r9,r8[0x0]
8000200a:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
8000200e:	91 09       	st.w	r8[0x0],r9
80002010:	5e fc       	retal	r12

80002012 <flashcdw_is_ready>:
80002012:	fe 68 14 00 	mov	r8,-125952
80002016:	70 2c       	ld.w	r12,r8[0x8]
80002018:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000201c:	5e fc       	retal	r12
8000201e:	d7 03       	nop

80002020 <flashcdw_default_wait_until_ready>:
80002020:	d4 01       	pushm	lr
80002022:	f0 1f 00 03 	mcall	8000202c <flashcdw_default_wait_until_ready+0xc>
80002026:	cf e0       	breq	80002022 <flashcdw_default_wait_until_ready+0x2>
80002028:	d8 02       	popm	pc
8000202a:	00 00       	add	r0,r0
8000202c:	80 00       	ld.sh	r0,r0[0x0]
8000202e:	20 12       	sub	r2,1

80002030 <flashcdw_issue_command>:
80002030:	eb cd 40 c0 	pushm	r6-r7,lr
80002034:	18 96       	mov	r6,r12
80002036:	16 97       	mov	r7,r11
80002038:	48 e8       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
8000203a:	70 08       	ld.w	r8,r8[0x0]
8000203c:	5d 18       	icall	r8
8000203e:	fe 68 14 00 	mov	r8,-125952
80002042:	70 18       	ld.w	r8,r8[0x4]
80002044:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
80002048:	58 07       	cp.w	r7,0
8000204a:	c0 35       	brlt	80002050 <flashcdw_issue_command+0x20>
8000204c:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
80002050:	3a 59       	mov	r9,-91
80002052:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
80002056:	fe 69 14 00 	mov	r9,-125952
8000205a:	93 18       	st.w	r9[0x4],r8
8000205c:	72 29       	ld.w	r9,r9[0x8]
8000205e:	e2 19 00 0c 	andl	r9,0xc,COH
80002062:	48 58       	lddpc	r8,80002074 <flashcdw_issue_command+0x44>
80002064:	91 09       	st.w	r8[0x0],r9
80002066:	48 38       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
80002068:	70 08       	ld.w	r8,r8[0x0]
8000206a:	5d 18       	icall	r8
8000206c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002070:	00 00       	add	r0,r0
80002072:	00 04       	add	r4,r0
80002074:	00 00       	add	r0,r0
80002076:	00 08       	add	r8,r0

80002078 <flashcdw_set_flash_waitstate_and_readmode>:
80002078:	d4 01       	pushm	lr
8000207a:	e0 68 e1 c0 	mov	r8,57792
8000207e:	ea 18 00 e4 	orh	r8,0xe4
80002082:	10 3c       	cp.w	r12,r8
80002084:	e0 88 00 19 	brls	800020b6 <flashcdw_set_flash_waitstate_and_readmode+0x3e>
80002088:	e0 68 c3 80 	mov	r8,50048
8000208c:	ea 18 01 c9 	orh	r8,0x1c9
80002090:	10 3c       	cp.w	r12,r8
80002092:	e0 8b 00 0a 	brhi	800020a6 <flashcdw_set_flash_waitstate_and_readmode+0x2e>
80002096:	30 1c       	mov	r12,1
80002098:	f0 1f 00 0c 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
8000209c:	3f fb       	mov	r11,-1
8000209e:	31 1c       	mov	r12,17
800020a0:	f0 1f 00 0b 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020a4:	d8 02       	popm	pc
800020a6:	30 1c       	mov	r12,1
800020a8:	f0 1f 00 08 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
800020ac:	3f fb       	mov	r11,-1
800020ae:	31 0c       	mov	r12,16
800020b0:	f0 1f 00 07 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020b4:	d8 02       	popm	pc
800020b6:	30 0c       	mov	r12,0
800020b8:	f0 1f 00 04 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
800020bc:	3f fb       	mov	r11,-1
800020be:	31 1c       	mov	r12,17
800020c0:	f0 1f 00 03 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020c4:	d8 02       	popm	pc
800020c6:	00 00       	add	r0,r0
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	20 04       	sub	r4,0
800020cc:	80 00       	ld.sh	r0,r0[0x0]
800020ce:	20 30       	sub	r0,3

800020d0 <gpio_enable_module_pin>:
800020d0:	f8 08 16 05 	lsr	r8,r12,0x5
800020d4:	a9 78       	lsl	r8,0x9
800020d6:	e0 28 d8 00 	sub	r8,55296
800020da:	58 7b       	cp.w	r11,7
800020dc:	e0 8b 00 05 	brhi	800020e6 <gpio_enable_module_pin+0x16>
800020e0:	4a 09       	lddpc	r9,80002160 <gpio_enable_module_pin+0x90>
800020e2:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
800020e6:	5e ff       	retal	1
800020e8:	30 19       	mov	r9,1
800020ea:	f2 0c 09 49 	lsl	r9,r9,r12
800020ee:	91 69       	st.w	r8[0x18],r9
800020f0:	91 a9       	st.w	r8[0x28],r9
800020f2:	91 e9       	st.w	r8[0x38],r9
800020f4:	c3 18       	rjmp	80002156 <gpio_enable_module_pin+0x86>
800020f6:	30 19       	mov	r9,1
800020f8:	f2 0c 09 49 	lsl	r9,r9,r12
800020fc:	91 59       	st.w	r8[0x14],r9
800020fe:	91 a9       	st.w	r8[0x28],r9
80002100:	91 e9       	st.w	r8[0x38],r9
80002102:	c2 a8       	rjmp	80002156 <gpio_enable_module_pin+0x86>
80002104:	30 19       	mov	r9,1
80002106:	f2 0c 09 49 	lsl	r9,r9,r12
8000210a:	91 69       	st.w	r8[0x18],r9
8000210c:	91 99       	st.w	r8[0x24],r9
8000210e:	91 e9       	st.w	r8[0x38],r9
80002110:	c2 38       	rjmp	80002156 <gpio_enable_module_pin+0x86>
80002112:	30 19       	mov	r9,1
80002114:	f2 0c 09 49 	lsl	r9,r9,r12
80002118:	91 59       	st.w	r8[0x14],r9
8000211a:	91 99       	st.w	r8[0x24],r9
8000211c:	91 e9       	st.w	r8[0x38],r9
8000211e:	c1 c8       	rjmp	80002156 <gpio_enable_module_pin+0x86>
80002120:	30 19       	mov	r9,1
80002122:	f2 0c 09 49 	lsl	r9,r9,r12
80002126:	91 69       	st.w	r8[0x18],r9
80002128:	91 a9       	st.w	r8[0x28],r9
8000212a:	91 d9       	st.w	r8[0x34],r9
8000212c:	c1 58       	rjmp	80002156 <gpio_enable_module_pin+0x86>
8000212e:	30 19       	mov	r9,1
80002130:	f2 0c 09 49 	lsl	r9,r9,r12
80002134:	91 59       	st.w	r8[0x14],r9
80002136:	91 a9       	st.w	r8[0x28],r9
80002138:	91 d9       	st.w	r8[0x34],r9
8000213a:	c0 e8       	rjmp	80002156 <gpio_enable_module_pin+0x86>
8000213c:	30 19       	mov	r9,1
8000213e:	f2 0c 09 49 	lsl	r9,r9,r12
80002142:	91 69       	st.w	r8[0x18],r9
80002144:	91 99       	st.w	r8[0x24],r9
80002146:	91 d9       	st.w	r8[0x34],r9
80002148:	c0 78       	rjmp	80002156 <gpio_enable_module_pin+0x86>
8000214a:	30 19       	mov	r9,1
8000214c:	f2 0c 09 49 	lsl	r9,r9,r12
80002150:	91 59       	st.w	r8[0x14],r9
80002152:	91 99       	st.w	r8[0x24],r9
80002154:	91 d9       	st.w	r8[0x34],r9
80002156:	30 19       	mov	r9,1
80002158:	f2 0c 09 4c 	lsl	r12,r9,r12
8000215c:	91 2c       	st.w	r8[0x8],r12
8000215e:	5e fd       	retal	0
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	2e 00       	sub	r0,-32

80002164 <gpio_enable_module>:
80002164:	d4 21       	pushm	r4-r7,lr
80002166:	18 97       	mov	r7,r12
80002168:	16 94       	mov	r4,r11
8000216a:	58 0b       	cp.w	r11,0
8000216c:	c0 31       	brne	80002172 <gpio_enable_module+0xe>
8000216e:	30 05       	mov	r5,0
80002170:	c0 d8       	rjmp	8000218a <gpio_enable_module+0x26>
80002172:	30 06       	mov	r6,0
80002174:	0c 95       	mov	r5,r6
80002176:	6e 1b       	ld.w	r11,r7[0x4]
80002178:	6e 0c       	ld.w	r12,r7[0x0]
8000217a:	f0 1f 00 06 	mcall	80002190 <gpio_enable_module+0x2c>
8000217e:	18 45       	or	r5,r12
80002180:	2f 87       	sub	r7,-8
80002182:	2f f6       	sub	r6,-1
80002184:	0c 34       	cp.w	r4,r6
80002186:	fe 9b ff f8 	brhi	80002176 <gpio_enable_module+0x12>
8000218a:	0a 9c       	mov	r12,r5
8000218c:	d8 22       	popm	r4-r7,pc
8000218e:	00 00       	add	r0,r0
80002190:	80 00       	ld.sh	r0,r0[0x0]
80002192:	20 d0       	sub	r0,13

80002194 <sensor_led_init>:

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
80002194:	fe 78 28 00 	mov	r8,-55296
80002198:	e0 69 80 00 	mov	r9,32768
8000219c:	f1 49 00 44 	st.w	r8[68],r9
800021a0:	e2 69 00 00 	mov	r9,131072
800021a4:	f1 49 00 44 	st.w	r8[68],r9
800021a8:	e0 69 40 00 	mov	r9,16384
800021ac:	f1 49 00 44 	st.w	r8[68],r9
void sensor_led_init(void)
{
	ioport_set_pin_dir(LED_R_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_G_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_B_SENS, IOPORT_DIR_OUTPUT);
}
800021b0:	5e fc       	retal	r12
800021b2:	d7 03       	nop

800021b4 <write_sensor_data>:
	return twim_read_packet(TWI_SENS, &pack);
	//return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
}

status_code_t write_sensor_data(bno055_register_addr_t _addr, uint8_t *values, uint_fast8_t count)
{
800021b4:	eb cd 40 c0 	pushm	r6-r7,lr
800021b8:	1a 97       	mov	r7,sp
800021ba:	14 98       	mov	r8,r10
	uint8_t volatile _values[count + 1];
	_values[0] = _addr;
	for (uint_fast8_t i = 0; i< count; i++) _values[i+1] = values[i];
	
	return twim_write(TWI_SENS, &_values, count + 1, BNO055_TWI_ADDR_SENSOR, false);
}
800021bc:	1a 96       	mov	r6,sp
	//return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
}

status_code_t write_sensor_data(bno055_register_addr_t _addr, uint8_t *values, uint_fast8_t count)
{
	uint8_t volatile _values[count + 1];
800021be:	2f fa       	sub	r10,-1
800021c0:	f0 c9 ff f9 	sub	r9,r8,-7
800021c4:	e0 19 ff fc 	andl	r9,0xfffc
800021c8:	12 1d       	sub	sp,r9
800021ca:	1a 9e       	mov	lr,sp
	_values[0] = _addr;
800021cc:	ba 8c       	st.b	sp[0x0],r12
	for (uint_fast8_t i = 0; i< count; i++) _values[i+1] = values[i];
800021ce:	58 08       	cp.w	r8,0
800021d0:	c0 90       	breq	800021e2 <write_sensor_data+0x2e>
800021d2:	30 09       	mov	r9,0
800021d4:	2f f9       	sub	r9,-1
800021d6:	17 3c       	ld.ub	r12,r11++
800021d8:	fc 09 0b 0c 	st.b	lr[r9],r12
800021dc:	12 38       	cp.w	r8,r9
800021de:	fe 9b ff fb 	brhi	800021d4 <write_sensor_data+0x20>
	
	return twim_write(TWI_SENS, &_values, count + 1, BNO055_TWI_ADDR_SENSOR, false);
800021e2:	30 08       	mov	r8,0
800021e4:	32 89       	mov	r9,40
800021e6:	1c 9b       	mov	r11,lr
800021e8:	fe 7c 40 00 	mov	r12,-49152
800021ec:	f0 1f 00 03 	mcall	800021f8 <write_sensor_data+0x44>
}
800021f0:	0c 9d       	mov	sp,r6
800021f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021f6:	00 00       	add	r0,r0
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	26 1c       	sub	r12,97

800021fc <read_sensor_data>:
	ioport_set_pin_dir(LED_R_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_G_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_B_SENS, IOPORT_DIR_OUTPUT);
}

status_code_t read_sensor_data(bno055_register_addr_t _addr, const uint8_t *values, uint32_t count){
800021fc:	d4 01       	pushm	lr
800021fe:	20 5d       	sub	sp,20
	twim_package_t pack;
	pack.addr[0] = _addr;
80002200:	ba cc       	st.b	sp[0x4],r12
	pack.addr_length = 1;
80002202:	30 18       	mov	r8,1
80002204:	ba f8       	st.b	sp[0x7],r8
	pack.buffer = values;
80002206:	50 2b       	stdsp	sp[0x8],r11
	pack.chip = BNO055_TWI_ADDR_SENSOR;
80002208:	32 88       	mov	r8,40
8000220a:	50 08       	stdsp	sp[0x0],r8
	pack.length = count;
8000220c:	50 3a       	stdsp	sp[0xc],r10
	pack.no_wait = false;
8000220e:	30 08       	mov	r8,0
80002210:	fb 68 00 10 	st.b	sp[16],r8
	
	return twim_read_packet(TWI_SENS, &pack);
80002214:	1a 9b       	mov	r11,sp
80002216:	fe 7c 40 00 	mov	r12,-49152
8000221a:	f0 1f 00 03 	mcall	80002224 <read_sensor_data+0x28>
	//return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
}
8000221e:	2f bd       	sub	sp,-20
80002220:	d8 02       	popm	pc
80002222:	00 00       	add	r0,r0
80002224:	80 00       	ld.sh	r0,r0[0x0]
80002226:	26 ec       	sub	r12,110

80002228 <sensor_init>:
 *  Author: Markus
 */ 
#include "asf.h"
#include "sensor.h" 

void sensor_init(void){
80002228:	eb cd 40 e0 	pushm	r5-r7,lr
8000222c:	20 5d       	sub	sp,20
8000222e:	fe 77 28 00 	mov	r7,-55296
80002232:	e0 76 00 00 	mov	r6,65536
80002236:	ef 46 00 44 	st.w	r7[68],r6
8000223a:	e0 65 01 00 	mov	r5,256
8000223e:	ef 45 00 44 	st.w	r7[68],r5
				pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->oderc = arch_ioport_pin_to_mask(
80002242:	e0 68 20 00 	mov	r8,8192
80002246:	ef 48 00 48 	st.w	r7[72],r8
	//ioport_set_pin_dir(BOOT_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(ADDR0_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(RST_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(INT_SENS, IOPORT_DIR_INPUT);
	
	sensor_led_init();
8000224a:	f0 1f 00 49 	mcall	8000236c <sensor_init+0x144>
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
8000224e:	ef 46 00 58 	st.w	r7[88],r6
80002252:	ef 45 00 58 	st.w	r7[88],r5
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80002256:	30 bb       	mov	r11,11
80002258:	30 2c       	mov	r12,2
8000225a:	f0 1f 00 46 	mcall	80002370 <sensor_init+0x148>
	ioport_set_pin_level(RST_SENS, LOW);
	
	sysclk_enable_peripheral_clock(TWI_SENS);
	
	static const gpio_map_t TWI_GPIO_MAP =	{{SDA_SENS, 0},{SCL_SENS, 0}};	 //TODO: DEFINE FUNCTION_A 0
	gpio_enable_module(TWI_GPIO_MAP,2);
8000225e:	30 2b       	mov	r11,2
80002260:	4c 5c       	lddpc	r12,80002374 <sensor_init+0x14c>
80002262:	f0 1f 00 46 	mcall	80002378 <sensor_init+0x150>
		
	twim_options_t _twi_opt;
	_twi_opt.chip = BNO055_TWI_ADDR_SENSOR;
80002266:	32 88       	mov	r8,40
80002268:	50 38       	stdsp	sp[0xc],r8
	_twi_opt.pba_hz = sysclk_get_pba_hz();
8000226a:	e0 68 c3 80 	mov	r8,50048
8000226e:	ea 18 01 c9 	orh	r8,0x1c9
80002272:	50 18       	stdsp	sp[0x4],r8
	_twi_opt.smbus = false;
80002274:	30 08       	mov	r8,0
80002276:	fb 68 00 10 	st.b	sp[16],r8
	_twi_opt.speed = TWI_SENS_SPEED;
8000227a:	e6 68 1a 80 	mov	r8,400000
8000227e:	50 28       	stdsp	sp[0x8],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002280:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002284:	e2 69 49 f0 	mov	r9,150000
80002288:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000228c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002290:	14 38       	cp.w	r8,r10
80002292:	e0 88 00 08 	brls	800022a2 <sensor_init+0x7a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002296:	12 38       	cp.w	r8,r9
80002298:	fe 98 ff fa 	brls	8000228c <sensor_init+0x64>
8000229c:	12 3a       	cp.w	r10,r9
8000229e:	c2 a3       	brcs	800022f2 <sensor_init+0xca>
800022a0:	cf 6b       	rjmp	8000228c <sensor_init+0x64>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022a2:	12 38       	cp.w	r8,r9
800022a4:	e0 8b 00 27 	brhi	800022f2 <sensor_init+0xca>
800022a8:	12 3a       	cp.w	r10,r9
800022aa:	c2 43       	brcs	800022f2 <sensor_init+0xca>
800022ac:	cf 0b       	rjmp	8000228c <sensor_init+0x64>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022ae:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022b2:	14 38       	cp.w	r8,r10
800022b4:	e0 88 00 08 	brls	800022c4 <sensor_init+0x9c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022b8:	12 38       	cp.w	r8,r9
800022ba:	fe 98 ff fa 	brls	800022ae <sensor_init+0x86>
800022be:	12 3a       	cp.w	r10,r9
800022c0:	c2 83       	brcs	80002310 <sensor_init+0xe8>
800022c2:	cf 6b       	rjmp	800022ae <sensor_init+0x86>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022c4:	12 38       	cp.w	r8,r9
800022c6:	e0 8b 00 25 	brhi	80002310 <sensor_init+0xe8>
800022ca:	12 3a       	cp.w	r10,r9
800022cc:	c2 23       	brcs	80002310 <sensor_init+0xe8>
800022ce:	cf 0b       	rjmp	800022ae <sensor_init+0x86>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022d0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022d4:	14 38       	cp.w	r8,r10
800022d6:	e0 88 00 08 	brls	800022e6 <sensor_init+0xbe>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022da:	12 38       	cp.w	r8,r9
800022dc:	fe 98 ff fa 	brls	800022d0 <sensor_init+0xa8>
800022e0:	12 3a       	cp.w	r10,r9
800022e2:	c4 13       	brcs	80002364 <sensor_init+0x13c>
800022e4:	cf 6b       	rjmp	800022d0 <sensor_init+0xa8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022e6:	12 38       	cp.w	r8,r9
800022e8:	e0 8b 00 3e 	brhi	80002364 <sensor_init+0x13c>
800022ec:	12 3a       	cp.w	r10,r9
800022ee:	c3 b3       	brcs	80002364 <sensor_init+0x13c>
800022f0:	cf 0b       	rjmp	800022d0 <sensor_init+0xa8>

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
800022f2:	e0 69 01 00 	mov	r9,256
800022f6:	fe 78 28 00 	mov	r8,-55296
800022fa:	f1 49 00 54 	st.w	r8[84],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022fe:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002302:	e0 6a 6f 40 	mov	r10,28480
80002306:	ea 1a 01 40 	orh	r10,0x140
8000230a:	f0 0a 00 0a 	add	r10,r8,r10
8000230e:	cd 0b       	rjmp	800022ae <sensor_init+0x86>
	
	delay_ms(5);
	ioport_set_pin_level(RST_SENS, HIGH);
	delay_ms(BNO055_STARTUP_TIME_MS);							//SENSOR STARTUP TIME
	twim_master_init(TWI_SENS, &_twi_opt);
80002310:	fa cb ff fc 	sub	r11,sp,-4
80002314:	fe 7c 40 00 	mov	r12,-49152
80002318:	f0 1f 00 19 	mcall	8000237c <sensor_init+0x154>
	
	//Konfigurieren des Sensores
	
	//REMAP X AS Y
	uint8_t val;
	val = BNO055_REMAP_X_Y;
8000231c:	32 18       	mov	r8,33
8000231e:	ba b8       	st.b	sp[0x3],r8
	write_sensor_data(BNO055_AXIS_MAP_CONFIG_ADDR, &val,1);											//AXIS REMAPPING
80002320:	fa c7 ff fd 	sub	r7,sp,-3
80002324:	30 1a       	mov	r10,1
80002326:	0e 9b       	mov	r11,r7
80002328:	34 1c       	mov	r12,65
8000232a:	f0 1f 00 16 	mcall	80002380 <sensor_init+0x158>
	val = (BNO055_REMAP_AXIS_POSITIVE)&(BNO055_REMAP_AXIS_POSITIVE)&(BNO055_REMAP_AXIS_POSITIVE);
8000232e:	30 06       	mov	r6,0
80002330:	ba b6       	st.b	sp[0x3],r6
	write_sensor_data(BNO055_AXIS_MAP_SIGN_ADDR, &val, 1);														//AXIS REMAPPING SIGN
80002332:	30 1a       	mov	r10,1
80002334:	0e 9b       	mov	r11,r7
80002336:	34 2c       	mov	r12,66
80002338:	f0 1f 00 12 	mcall	80002380 <sensor_init+0x158>
	
	//Output Data Format
	val = (BNO055_ACCEL_UNIT_MSQ << BNO055_ACCEL_UNIT_POS) & \
8000233c:	ba b6       	st.b	sp[0x3],r6
		(BNO055_GYRO_UNIT_RPS << BNO055_GYRO_UNIT_POS) & \
		(BNO055_EULER_UNIT_DEG << BNO055_EULER_UNIT_POS) & \
		(BNO055_TEMP_UNIT_CELSIUS << BNO055_TEMP_UNIT_POS); 
	write_sensor_data(BNO055_UNIT_SEL_ADDR, &val, 1);
8000233e:	30 1a       	mov	r10,1
80002340:	0e 9b       	mov	r11,r7
80002342:	33 bc       	mov	r12,59
80002344:	f0 1f 00 0f 	mcall	80002380 <sensor_init+0x158>
	
	val = BNO055_OPERATION_MODE_NDOF;
80002348:	30 c8       	mov	r8,12
8000234a:	ba b8       	st.b	sp[0x3],r8
	write_sensor_data(BNO055_OPR_MODE_ADDR, &val,1);
8000234c:	30 1a       	mov	r10,1
8000234e:	0e 9b       	mov	r11,r7
80002350:	33 dc       	mov	r12,61
80002352:	f0 1f 00 0c 	mcall	80002380 <sensor_init+0x158>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002356:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000235a:	e8 79 27 c0 	mov	r9,600000
8000235e:	f0 09 00 0a 	add	r10,r8,r9
80002362:	cb 7b       	rjmp	800022d0 <sensor_init+0xa8>
	delay_ms(BNO055_SWITCH_OP_TIME_MS);												//SENSOR SWITCHING OPERATION MODE TIME
}
80002364:	2f bd       	sub	sp,-20
80002366:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000236a:	00 00       	add	r0,r0
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	21 94       	sub	r4,25
80002370:	80 00       	ld.sh	r0,r0[0x0]
80002372:	24 74       	sub	r4,71
80002374:	80 00       	ld.sh	r0,r0[0x0]
80002376:	2e 20       	sub	r0,-30
80002378:	80 00       	ld.sh	r0,r0[0x0]
8000237a:	21 64       	sub	r4,22
8000237c:	80 00       	ld.sh	r0,r0[0x0]
8000237e:	27 fc       	sub	r12,127
80002380:	80 00       	ld.sh	r0,r0[0x0]
80002382:	21 b4       	sub	r4,27

80002384 <osc_priv_enable_rc120m>:
80002384:	20 1d       	sub	sp,4
80002386:	e1 b8 00 00 	mfsr	r8,0x0
8000238a:	50 08       	stdsp	sp[0x0],r8
8000238c:	d3 03       	ssrf	0x10
8000238e:	40 09       	lddsp	r9,sp[0x0]
80002390:	fe 78 58 00 	mov	r8,-43008
80002394:	34 4a       	mov	r10,68
80002396:	ea 1a aa 00 	orh	r10,0xaa00
8000239a:	91 6a       	st.w	r8[0x18],r10
8000239c:	30 1a       	mov	r10,1
8000239e:	f1 4a 00 44 	st.w	r8[68],r10
800023a2:	12 98       	mov	r8,r9
800023a4:	e6 18 00 01 	andh	r8,0x1,COH
800023a8:	c0 21       	brne	800023ac <osc_priv_enable_rc120m+0x28>
800023aa:	d5 03       	csrf	0x10
800023ac:	2f fd       	sub	sp,-4
800023ae:	5e fc       	retal	r12

800023b0 <sysclk_set_source>:
800023b0:	20 1d       	sub	sp,4
800023b2:	e1 b8 00 00 	mfsr	r8,0x0
800023b6:	50 08       	stdsp	sp[0x0],r8
800023b8:	d3 03       	ssrf	0x10
800023ba:	40 09       	lddsp	r9,sp[0x0]
800023bc:	fe 78 14 00 	mov	r8,-60416
800023c0:	fc 1a aa 00 	movh	r10,0xaa00
800023c4:	f1 4a 00 58 	st.w	r8[88],r10
800023c8:	91 0c       	st.w	r8[0x0],r12
800023ca:	12 98       	mov	r8,r9
800023cc:	e6 18 00 01 	andh	r8,0x1,COH
800023d0:	c0 21       	brne	800023d4 <sysclk_set_source+0x24>
800023d2:	d5 03       	csrf	0x10
800023d4:	2f fd       	sub	sp,-4
800023d6:	5e fc       	retal	r12

800023d8 <sysclk_set_prescalers>:
800023d8:	d4 01       	pushm	lr
800023da:	20 1d       	sub	sp,4
800023dc:	58 0c       	cp.w	r12,0
800023de:	c0 30       	breq	800023e4 <sysclk_set_prescalers+0xc>
800023e0:	20 1c       	sub	r12,1
800023e2:	a7 bc       	sbr	r12,0x7
800023e4:	58 0b       	cp.w	r11,0
800023e6:	c0 30       	breq	800023ec <sysclk_set_prescalers+0x14>
800023e8:	20 1b       	sub	r11,1
800023ea:	a7 bb       	sbr	r11,0x7
800023ec:	58 0a       	cp.w	r10,0
800023ee:	c0 30       	breq	800023f4 <sysclk_set_prescalers+0x1c>
800023f0:	20 1a       	sub	r10,1
800023f2:	a7 ba       	sbr	r10,0x7
800023f4:	e1 b8 00 00 	mfsr	r8,0x0
800023f8:	50 08       	stdsp	sp[0x0],r8
800023fa:	d3 03       	ssrf	0x10
800023fc:	40 09       	lddsp	r9,sp[0x0]
800023fe:	fe 78 14 00 	mov	r8,-60416
80002402:	30 4e       	mov	lr,4
80002404:	ea 1e aa 00 	orh	lr,0xaa00
80002408:	f1 4e 00 58 	st.w	r8[88],lr
8000240c:	91 1c       	st.w	r8[0x4],r12
8000240e:	30 cc       	mov	r12,12
80002410:	ea 1c aa 00 	orh	r12,0xaa00
80002414:	f1 4c 00 58 	st.w	r8[88],r12
80002418:	91 3b       	st.w	r8[0xc],r11
8000241a:	31 0b       	mov	r11,16
8000241c:	ea 1b aa 00 	orh	r11,0xaa00
80002420:	f1 4b 00 58 	st.w	r8[88],r11
80002424:	91 4a       	st.w	r8[0x10],r10
80002426:	12 98       	mov	r8,r9
80002428:	e6 18 00 01 	andh	r8,0x1,COH
8000242c:	c0 21       	brne	80002430 <sysclk_set_prescalers+0x58>
8000242e:	d5 03       	csrf	0x10
80002430:	2f fd       	sub	sp,-4
80002432:	d8 02       	popm	pc

80002434 <sysclk_init>:
80002434:	d4 01       	pushm	lr
80002436:	30 2a       	mov	r10,2
80002438:	14 9b       	mov	r11,r10
8000243a:	14 9c       	mov	r12,r10
8000243c:	f0 1f 00 0a 	mcall	80002464 <sysclk_init+0x30>
80002440:	f0 1f 00 0a 	mcall	80002468 <sysclk_init+0x34>
80002444:	fe 78 58 00 	mov	r8,-43008
80002448:	71 19       	ld.w	r9,r8[0x44]
8000244a:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000244e:	cf d0       	breq	80002448 <sysclk_init+0x14>
80002450:	e0 6c c3 80 	mov	r12,50048
80002454:	ea 1c 01 c9 	orh	r12,0x1c9
80002458:	f0 1f 00 05 	mcall	8000246c <sysclk_init+0x38>
8000245c:	30 4c       	mov	r12,4
8000245e:	f0 1f 00 05 	mcall	80002470 <sysclk_init+0x3c>
80002462:	d8 02       	popm	pc
80002464:	80 00       	ld.sh	r0,r0[0x0]
80002466:	23 d8       	sub	r8,61
80002468:	80 00       	ld.sh	r0,r0[0x0]
8000246a:	23 84       	sub	r4,56
8000246c:	80 00       	ld.sh	r0,r0[0x0]
8000246e:	20 78       	sub	r8,7
80002470:	80 00       	ld.sh	r0,r0[0x0]
80002472:	23 b0       	sub	r0,59

80002474 <sysclk_priv_enable_module>:
80002474:	d4 01       	pushm	lr
80002476:	20 1d       	sub	sp,4
80002478:	e1 b8 00 00 	mfsr	r8,0x0
8000247c:	50 08       	stdsp	sp[0x0],r8
8000247e:	d3 03       	ssrf	0x10
80002480:	40 09       	lddsp	r9,sp[0x0]
80002482:	a3 6c       	lsl	r12,0x2
80002484:	fe 7a 14 20 	mov	r10,-60384
80002488:	f8 0a 00 08 	add	r8,r12,r10
8000248c:	70 0a       	ld.w	r10,r8[0x0]
8000248e:	30 1e       	mov	lr,1
80002490:	fc 0b 09 4b 	lsl	r11,lr,r11
80002494:	14 4b       	or	r11,r10
80002496:	32 0a       	mov	r10,32
80002498:	ea 1a aa 00 	orh	r10,0xaa00
8000249c:	14 0c       	add	r12,r10
8000249e:	fe 7a 14 00 	mov	r10,-60416
800024a2:	f5 4c 00 58 	st.w	r10[88],r12
800024a6:	91 0b       	st.w	r8[0x0],r11
800024a8:	12 98       	mov	r8,r9
800024aa:	e6 18 00 01 	andh	r8,0x1,COH
800024ae:	c0 21       	brne	800024b2 <sysclk_priv_enable_module+0x3e>
800024b0:	d5 03       	csrf	0x10
800024b2:	2f fd       	sub	sp,-4
800024b4:	d8 02       	popm	pc
800024b6:	d7 03       	nop

800024b8 <twim_master_interrupt_handler>:
800024b8:	4a e8       	lddpc	r8,80002570 <twim_master_interrupt_handler+0xb8>
800024ba:	70 08       	ld.w	r8,r8[0x0]
800024bc:	70 79       	ld.w	r9,r8[0x1c]
800024be:	4a ea       	lddpc	r10,80002574 <twim_master_interrupt_handler+0xbc>
800024c0:	74 0a       	ld.w	r10,r10[0x0]
800024c2:	f5 e9 00 09 	and	r9,r10,r9
800024c6:	12 9a       	mov	r10,r9
800024c8:	e2 1a 07 00 	andl	r10,0x700,COH
800024cc:	c1 40       	breq	800024f4 <twim_master_interrupt_handler+0x3c>
800024ce:	e2 19 03 00 	andl	r9,0x300,COH
800024d2:	f9 b9 01 fc 	movne	r9,-4
800024d6:	f9 b9 00 fe 	moveq	r9,-2
800024da:	4a 8a       	lddpc	r10,80002578 <twim_master_interrupt_handler+0xc0>
800024dc:	95 09       	st.w	r10[0x0],r9
800024de:	70 3a       	ld.w	r10,r8[0xc]
800024e0:	30 09       	mov	r9,0
800024e2:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
800024e6:	91 3a       	st.w	r8[0xc],r10
800024e8:	3f fa       	mov	r10,-1
800024ea:	91 ba       	st.w	r8[0x2c],r10
800024ec:	91 9a       	st.w	r8[0x24],r10
800024ee:	4a 48       	lddpc	r8,8000257c <twim_master_interrupt_handler+0xc4>
800024f0:	b0 89       	st.b	r8[0x0],r9
800024f2:	d6 03       	rete
800024f4:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
800024f8:	c1 30       	breq	8000251e <twim_master_interrupt_handler+0x66>
800024fa:	4a 2a       	lddpc	r10,80002580 <twim_master_interrupt_handler+0xc8>
800024fc:	70 5b       	ld.w	r11,r8[0x14]
800024fe:	74 09       	ld.w	r9,r10[0x0]
80002500:	12 cb       	st.b	r9++,r11
80002502:	95 09       	st.w	r10[0x0],r9
80002504:	4a 09       	lddpc	r9,80002584 <twim_master_interrupt_handler+0xcc>
80002506:	72 0a       	ld.w	r10,r9[0x0]
80002508:	20 1a       	sub	r10,1
8000250a:	93 0a       	st.w	r9[0x0],r10
8000250c:	72 09       	ld.w	r9,r9[0x0]
8000250e:	58 09       	cp.w	r9,0
80002510:	c2 f1       	brne	8000256e <twim_master_interrupt_handler+0xb6>
80002512:	30 19       	mov	r9,1
80002514:	91 99       	st.w	r8[0x24],r9
80002516:	30 09       	mov	r9,0
80002518:	49 98       	lddpc	r8,8000257c <twim_master_interrupt_handler+0xc4>
8000251a:	b0 89       	st.b	r8[0x0],r9
8000251c:	d6 03       	rete
8000251e:	e2 19 00 02 	andl	r9,0x2,COH
80002522:	c2 60       	breq	8000256e <twim_master_interrupt_handler+0xb6>
80002524:	49 99       	lddpc	r9,80002588 <twim_master_interrupt_handler+0xd0>
80002526:	72 09       	ld.w	r9,r9[0x0]
80002528:	58 09       	cp.w	r9,0
8000252a:	c0 71       	brne	80002538 <twim_master_interrupt_handler+0x80>
8000252c:	30 29       	mov	r9,2
8000252e:	91 99       	st.w	r8[0x24],r9
80002530:	30 09       	mov	r9,0
80002532:	49 38       	lddpc	r8,8000257c <twim_master_interrupt_handler+0xc4>
80002534:	b0 89       	st.b	r8[0x0],r9
80002536:	d6 03       	rete
80002538:	49 5a       	lddpc	r10,8000258c <twim_master_interrupt_handler+0xd4>
8000253a:	74 09       	ld.w	r9,r10[0x0]
8000253c:	13 3b       	ld.ub	r11,r9++
8000253e:	91 6b       	st.w	r8[0x18],r11
80002540:	95 09       	st.w	r10[0x0],r9
80002542:	49 28       	lddpc	r8,80002588 <twim_master_interrupt_handler+0xd0>
80002544:	70 09       	ld.w	r9,r8[0x0]
80002546:	20 19       	sub	r9,1
80002548:	91 09       	st.w	r8[0x0],r9
8000254a:	70 08       	ld.w	r8,r8[0x0]
8000254c:	58 08       	cp.w	r8,0
8000254e:	c1 01       	brne	8000256e <twim_master_interrupt_handler+0xb6>
80002550:	48 b8       	lddpc	r8,8000257c <twim_master_interrupt_handler+0xc4>
80002552:	11 88       	ld.ub	r8,r8[0x0]
80002554:	58 08       	cp.w	r8,0
80002556:	c0 c0       	breq	8000256e <twim_master_interrupt_handler+0xb6>
80002558:	30 09       	mov	r9,0
8000255a:	48 98       	lddpc	r8,8000257c <twim_master_interrupt_handler+0xc4>
8000255c:	b0 89       	st.b	r8[0x0],r9
8000255e:	48 d8       	lddpc	r8,80002590 <twim_master_interrupt_handler+0xd8>
80002560:	70 08       	ld.w	r8,r8[0x0]
80002562:	70 3a       	ld.w	r10,r8[0xc]
80002564:	48 99       	lddpc	r9,80002588 <twim_master_interrupt_handler+0xd0>
80002566:	93 0a       	st.w	r9[0x0],r10
80002568:	70 29       	ld.w	r9,r8[0x8]
8000256a:	48 98       	lddpc	r8,8000258c <twim_master_interrupt_handler+0xd4>
8000256c:	91 09       	st.w	r8[0x0],r9
8000256e:	d6 03       	rete
80002570:	00 00       	add	r0,r0
80002572:	00 0c       	add	r12,r0
80002574:	00 00       	add	r0,r0
80002576:	00 20       	rsub	r0,r0
80002578:	00 00       	add	r0,r0
8000257a:	00 18       	sub	r8,r0
8000257c:	00 00       	add	r0,r0
8000257e:	00 24       	rsub	r4,r0
80002580:	00 00       	add	r0,r0
80002582:	00 10       	sub	r0,r0
80002584:	00 00       	add	r0,r0
80002586:	00 14       	sub	r4,r0
80002588:	00 00       	add	r0,r0
8000258a:	00 2c       	rsub	r12,r0
8000258c:	00 00       	add	r0,r0
8000258e:	00 1c       	sub	r12,r0
80002590:	00 00       	add	r0,r0
80002592:	00 28       	rsub	r8,r0

80002594 <twim_set_speed>:
80002594:	eb cd 40 80 	pushm	r7,lr
80002598:	f4 0b 0d 0a 	divu	r10,r10,r11
8000259c:	f4 08 16 01 	lsr	r8,r10,0x1
800025a0:	e0 48 00 ff 	cp.w	r8,255
800025a4:	e0 8b 00 04 	brhi	800025ac <twim_set_speed+0x18>
800025a8:	30 09       	mov	r9,0
800025aa:	c1 a8       	rjmp	800025de <twim_set_speed+0x4a>
800025ac:	30 09       	mov	r9,0
800025ae:	30 77       	mov	r7,7
800025b0:	30 0e       	mov	lr,0
800025b2:	2f f9       	sub	r9,-1
800025b4:	5c 59       	castu.b	r9
800025b6:	a1 98       	lsr	r8,0x1
800025b8:	e0 48 00 ff 	cp.w	r8,255
800025bc:	5f bb       	srhi	r11
800025be:	ee 09 18 00 	cp.b	r9,r7
800025c2:	5f 8a       	srls	r10
800025c4:	f7 ea 00 0a 	and	r10,r11,r10
800025c8:	fc 0a 18 00 	cp.b	r10,lr
800025cc:	cf 31       	brne	800025b2 <twim_set_speed+0x1e>
800025ce:	30 7a       	mov	r10,7
800025d0:	f4 09 18 00 	cp.b	r9,r10
800025d4:	e0 88 00 05 	brls	800025de <twim_set_speed+0x4a>
800025d8:	3f 8c       	mov	r12,-8
800025da:	e3 cd 80 80 	ldm	sp++,r7,pc
800025de:	f0 0a 16 01 	lsr	r10,r8,0x1
800025e2:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
800025e6:	14 18       	sub	r8,r10
800025e8:	f7 e8 10 88 	or	r8,r11,r8<<0x8
800025ec:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
800025f0:	99 19       	st.w	r12[0x4],r9
800025f2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800025f6:	d7 03       	nop

800025f8 <twim_status>:
800025f8:	48 38       	lddpc	r8,80002604 <twim_status+0xc>
800025fa:	70 08       	ld.w	r8,r8[0x0]
800025fc:	70 7c       	ld.w	r12,r8[0x1c]
800025fe:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002602:	5e fc       	retal	r12
80002604:	00 00       	add	r0,r0
80002606:	00 0c       	add	r12,r0

80002608 <twim_disable_interrupt>:
80002608:	e1 b8 00 00 	mfsr	r8,0x0
8000260c:	e6 18 00 01 	andh	r8,0x1,COH
80002610:	c0 21       	brne	80002614 <twim_disable_interrupt+0xc>
80002612:	d3 03       	ssrf	0x10
80002614:	3f f8       	mov	r8,-1
80002616:	99 98       	st.w	r12[0x24],r8
80002618:	99 b8       	st.w	r12[0x2c],r8
8000261a:	5e fc       	retal	r12

8000261c <twim_write>:
8000261c:	eb cd 40 fe 	pushm	r1-r7,lr
80002620:	18 97       	mov	r7,r12
80002622:	16 93       	mov	r3,r11
80002624:	14 95       	mov	r5,r10
80002626:	12 92       	mov	r2,r9
80002628:	10 91       	mov	r1,r8
8000262a:	30 14       	mov	r4,1
8000262c:	99 04       	st.w	r12[0x0],r4
8000262e:	e0 68 00 80 	mov	r8,128
80002632:	99 08       	st.w	r12[0x0],r8
80002634:	30 28       	mov	r8,2
80002636:	99 08       	st.w	r12[0x0],r8
80002638:	49 e6       	lddpc	r6,800026b0 <twim_write+0x94>
8000263a:	8d 0c       	st.w	r6[0x0],r12
8000263c:	f0 1f 00 1e 	mcall	800026b4 <twim_write+0x98>
80002640:	49 e8       	lddpc	r8,800026b8 <twim_write+0x9c>
80002642:	91 03       	st.w	r8[0x0],r3
80002644:	49 e8       	lddpc	r8,800026bc <twim_write+0xa0>
80002646:	91 05       	st.w	r8[0x0],r5
80002648:	30 09       	mov	r9,0
8000264a:	49 e8       	lddpc	r8,800026c0 <twim_write+0xa4>
8000264c:	b0 89       	st.b	r8[0x0],r9
8000264e:	49 e9       	lddpc	r9,800026c4 <twim_write+0xa8>
80002650:	30 08       	mov	r8,0
80002652:	93 08       	st.w	r9[0x0],r8
80002654:	6c 08       	ld.w	r8,r6[0x0]
80002656:	b1 65       	lsl	r5,0x10
80002658:	e8 15 e0 00 	orl	r5,0xe000
8000265c:	eb e2 10 12 	or	r2,r5,r2<<0x1
80002660:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
80002664:	91 31       	st.w	r8[0xc],r1
80002666:	49 9a       	lddpc	r10,800026c8 <twim_write+0xac>
80002668:	e0 6b 03 02 	mov	r11,770
8000266c:	95 0b       	st.w	r10[0x0],r11
8000266e:	74 0a       	ld.w	r10,r10[0x0]
80002670:	91 8a       	st.w	r8[0x20],r10
80002672:	91 04       	st.w	r8[0x0],r4
80002674:	d5 03       	csrf	0x10
80002676:	72 08       	ld.w	r8,r9[0x0]
80002678:	58 08       	cp.w	r8,0
8000267a:	c0 80       	breq	8000268a <twim_write+0x6e>
8000267c:	c0 b8       	rjmp	80002692 <twim_write+0x76>
8000267e:	fe cf ff fc 	sub	pc,pc,-4
80002682:	6c 08       	ld.w	r8,r6[0x0]
80002684:	58 08       	cp.w	r8,0
80002686:	c0 30       	breq	8000268c <twim_write+0x70>
80002688:	c0 58       	rjmp	80002692 <twim_write+0x76>
8000268a:	48 f6       	lddpc	r6,800026c4 <twim_write+0xa8>
8000268c:	f0 1f 00 10 	mcall	800026cc <twim_write+0xb0>
80002690:	cf 70       	breq	8000267e <twim_write+0x62>
80002692:	30 28       	mov	r8,2
80002694:	8f 08       	st.w	r7[0x0],r8
80002696:	48 c8       	lddpc	r8,800026c4 <twim_write+0xa8>
80002698:	70 08       	ld.w	r8,r8[0x0]
8000269a:	5b c8       	cp.w	r8,-4
8000269c:	c0 70       	breq	800026aa <twim_write+0x8e>
8000269e:	48 a8       	lddpc	r8,800026c4 <twim_write+0xa8>
800026a0:	70 08       	ld.w	r8,r8[0x0]
800026a2:	5b e8       	cp.w	r8,-2
800026a4:	c0 30       	breq	800026aa <twim_write+0x8e>
800026a6:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800026aa:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
800026ae:	00 00       	add	r0,r0
800026b0:	00 00       	add	r0,r0
800026b2:	00 0c       	add	r12,r0
800026b4:	80 00       	ld.sh	r0,r0[0x0]
800026b6:	26 08       	sub	r8,96
800026b8:	00 00       	add	r0,r0
800026ba:	00 1c       	sub	r12,r0
800026bc:	00 00       	add	r0,r0
800026be:	00 2c       	rsub	r12,r0
800026c0:	00 00       	add	r0,r0
800026c2:	00 24       	rsub	r4,r0
800026c4:	00 00       	add	r0,r0
800026c6:	00 18       	sub	r8,r0
800026c8:	00 00       	add	r0,r0
800026ca:	00 20       	rsub	r0,r0
800026cc:	80 00       	ld.sh	r0,r0[0x0]
800026ce:	25 f8       	sub	r8,95

800026d0 <twim_probe>:
800026d0:	d4 01       	pushm	lr
800026d2:	20 1d       	sub	sp,4
800026d4:	30 08       	mov	r8,0
800026d6:	ba 88       	st.b	sp[0x0],r8
800026d8:	30 08       	mov	r8,0
800026da:	16 99       	mov	r9,r11
800026dc:	10 9a       	mov	r10,r8
800026de:	1a 9b       	mov	r11,sp
800026e0:	f0 1f 00 02 	mcall	800026e8 <twim_probe+0x18>
800026e4:	2f fd       	sub	sp,-4
800026e6:	d8 02       	popm	pc
800026e8:	80 00       	ld.sh	r0,r0[0x0]
800026ea:	26 1c       	sub	r12,97

800026ec <twim_read_packet>:
800026ec:	eb cd 40 c0 	pushm	r6-r7,lr
800026f0:	18 96       	mov	r6,r12
800026f2:	16 97       	mov	r7,r11
800026f4:	30 28       	mov	r8,2
800026f6:	99 08       	st.w	r12[0x0],r8
800026f8:	4b 78       	lddpc	r8,800027d4 <twim_read_packet+0xe8>
800026fa:	91 0c       	st.w	r8[0x0],r12
800026fc:	f0 1f 00 37 	mcall	800027d8 <twim_read_packet+0xec>
80002700:	6e 29       	ld.w	r9,r7[0x8]
80002702:	4b 78       	lddpc	r8,800027dc <twim_read_packet+0xf0>
80002704:	91 09       	st.w	r8[0x0],r9
80002706:	6e 39       	ld.w	r9,r7[0xc]
80002708:	4b 68       	lddpc	r8,800027e0 <twim_read_packet+0xf4>
8000270a:	91 09       	st.w	r8[0x0],r9
8000270c:	30 08       	mov	r8,0
8000270e:	4b 6a       	lddpc	r10,800027e4 <twim_read_packet+0xf8>
80002710:	b4 88       	st.b	r10[0x0],r8
80002712:	30 0b       	mov	r11,0
80002714:	4b 5a       	lddpc	r10,800027e8 <twim_read_packet+0xfc>
80002716:	95 0b       	st.w	r10[0x0],r11
80002718:	0f fa       	ld.ub	r10,r7[0x7]
8000271a:	f0 0a 18 00 	cp.b	r10,r8
8000271e:	c2 50       	breq	80002768 <twim_read_packet+0x7c>
80002720:	4a d8       	lddpc	r8,800027d4 <twim_read_packet+0xe8>
80002722:	70 08       	ld.w	r8,r8[0x0]
80002724:	30 19       	mov	r9,1
80002726:	91 09       	st.w	r8[0x0],r9
80002728:	e0 69 00 80 	mov	r9,128
8000272c:	91 09       	st.w	r8[0x0],r9
8000272e:	30 29       	mov	r9,2
80002730:	91 09       	st.w	r8[0x0],r9
80002732:	ee ca ff fc 	sub	r10,r7,-4
80002736:	4a e9       	lddpc	r9,800027ec <twim_read_packet+0x100>
80002738:	93 0a       	st.w	r9[0x0],r10
8000273a:	0f f9       	ld.ub	r9,r7[0x7]
8000273c:	4a da       	lddpc	r10,800027f0 <twim_read_packet+0x104>
8000273e:	95 09       	st.w	r10[0x0],r9
80002740:	e0 6b 07 03 	mov	r11,1795
80002744:	4a ca       	lddpc	r10,800027f4 <twim_read_packet+0x108>
80002746:	95 0b       	st.w	r10[0x0],r11
80002748:	6e 0a       	ld.w	r10,r7[0x0]
8000274a:	a1 7a       	lsl	r10,0x1
8000274c:	e8 1a a0 00 	orl	r10,0xa000
80002750:	f5 e9 11 09 	or	r9,r10,r9<<0x10
80002754:	91 39       	st.w	r8[0xc],r9
80002756:	6e 0a       	ld.w	r10,r7[0x0]
80002758:	6e 39       	ld.w	r9,r7[0xc]
8000275a:	b1 69       	lsl	r9,0x10
8000275c:	f3 ea 10 19 	or	r9,r9,r10<<0x1
80002760:	e8 19 e0 01 	orl	r9,0xe001
80002764:	91 49       	st.w	r8[0x10],r9
80002766:	c1 18       	rjmp	80002788 <twim_read_packet+0x9c>
80002768:	30 0a       	mov	r10,0
8000276a:	4a 28       	lddpc	r8,800027f0 <twim_read_packet+0x104>
8000276c:	91 0a       	st.w	r8[0x0],r10
8000276e:	e0 6a 07 01 	mov	r10,1793
80002772:	4a 18       	lddpc	r8,800027f4 <twim_read_packet+0x108>
80002774:	91 0a       	st.w	r8[0x0],r10
80002776:	49 88       	lddpc	r8,800027d4 <twim_read_packet+0xe8>
80002778:	70 08       	ld.w	r8,r8[0x0]
8000277a:	6e 0a       	ld.w	r10,r7[0x0]
8000277c:	b1 69       	lsl	r9,0x10
8000277e:	f3 ea 10 19 	or	r9,r9,r10<<0x1
80002782:	e8 19 e0 01 	orl	r9,0xe001
80002786:	91 39       	st.w	r8[0xc],r9
80002788:	49 38       	lddpc	r8,800027d4 <twim_read_packet+0xe8>
8000278a:	70 08       	ld.w	r8,r8[0x0]
8000278c:	49 a9       	lddpc	r9,800027f4 <twim_read_packet+0x108>
8000278e:	72 09       	ld.w	r9,r9[0x0]
80002790:	91 89       	st.w	r8[0x20],r9
80002792:	30 18       	mov	r8,1
80002794:	8d 08       	st.w	r6[0x0],r8
80002796:	d5 03       	csrf	0x10
80002798:	49 48       	lddpc	r8,800027e8 <twim_read_packet+0xfc>
8000279a:	70 08       	ld.w	r8,r8[0x0]
8000279c:	58 08       	cp.w	r8,0
8000279e:	c0 80       	breq	800027ae <twim_read_packet+0xc2>
800027a0:	c0 b8       	rjmp	800027b6 <twim_read_packet+0xca>
800027a2:	fe cf ff fc 	sub	pc,pc,-4
800027a6:	6e 08       	ld.w	r8,r7[0x0]
800027a8:	58 08       	cp.w	r8,0
800027aa:	c0 30       	breq	800027b0 <twim_read_packet+0xc4>
800027ac:	c0 58       	rjmp	800027b6 <twim_read_packet+0xca>
800027ae:	48 f7       	lddpc	r7,800027e8 <twim_read_packet+0xfc>
800027b0:	f0 1f 00 12 	mcall	800027f8 <twim_read_packet+0x10c>
800027b4:	cf 70       	breq	800027a2 <twim_read_packet+0xb6>
800027b6:	30 28       	mov	r8,2
800027b8:	8d 08       	st.w	r6[0x0],r8
800027ba:	48 c8       	lddpc	r8,800027e8 <twim_read_packet+0xfc>
800027bc:	70 08       	ld.w	r8,r8[0x0]
800027be:	5b c8       	cp.w	r8,-4
800027c0:	c0 70       	breq	800027ce <twim_read_packet+0xe2>
800027c2:	48 a8       	lddpc	r8,800027e8 <twim_read_packet+0xfc>
800027c4:	70 08       	ld.w	r8,r8[0x0]
800027c6:	5b e8       	cp.w	r8,-2
800027c8:	c0 30       	breq	800027ce <twim_read_packet+0xe2>
800027ca:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800027ce:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
800027d2:	00 00       	add	r0,r0
800027d4:	00 00       	add	r0,r0
800027d6:	00 0c       	add	r12,r0
800027d8:	80 00       	ld.sh	r0,r0[0x0]
800027da:	26 08       	sub	r8,96
800027dc:	00 00       	add	r0,r0
800027de:	00 10       	sub	r0,r0
800027e0:	00 00       	add	r0,r0
800027e2:	00 14       	sub	r4,r0
800027e4:	00 00       	add	r0,r0
800027e6:	00 24       	rsub	r4,r0
800027e8:	00 00       	add	r0,r0
800027ea:	00 18       	sub	r8,r0
800027ec:	00 00       	add	r0,r0
800027ee:	00 1c       	sub	r12,r0
800027f0:	00 00       	add	r0,r0
800027f2:	00 2c       	rsub	r12,r0
800027f4:	00 00       	add	r0,r0
800027f6:	00 20       	rsub	r0,r0
800027f8:	80 00       	ld.sh	r0,r0[0x0]
800027fa:	25 f8       	sub	r8,95

800027fc <twim_master_init>:
800027fc:	eb cd 40 e0 	pushm	r5-r7,lr
80002800:	20 1d       	sub	sp,4
80002802:	18 97       	mov	r7,r12
80002804:	16 95       	mov	r5,r11
80002806:	e1 b8 00 00 	mfsr	r8,0x0
8000280a:	30 0a       	mov	r10,0
8000280c:	4a 79       	lddpc	r9,800028a8 <twim_master_init+0xac>
8000280e:	93 0a       	st.w	r9[0x0],r10
80002810:	e6 18 00 01 	andh	r8,0x1,COH
80002814:	c0 b1       	brne	8000282a <twim_master_init+0x2e>
80002816:	d3 03       	ssrf	0x10
80002818:	3f f8       	mov	r8,-1
8000281a:	99 98       	st.w	r12[0x24],r8
8000281c:	30 18       	mov	r8,1
8000281e:	99 08       	st.w	r12[0x0],r8
80002820:	e0 68 00 80 	mov	r8,128
80002824:	99 08       	st.w	r12[0x0],r8
80002826:	d5 03       	csrf	0x10
80002828:	c0 88       	rjmp	80002838 <twim_master_init+0x3c>
8000282a:	3f f8       	mov	r8,-1
8000282c:	99 98       	st.w	r12[0x24],r8
8000282e:	30 18       	mov	r8,1
80002830:	99 08       	st.w	r12[0x0],r8
80002832:	e0 68 00 80 	mov	r8,128
80002836:	99 08       	st.w	r12[0x0],r8
80002838:	3f f8       	mov	r8,-1
8000283a:	8f b8       	st.w	r7[0x2c],r8
8000283c:	e1 b8 00 00 	mfsr	r8,0x0
80002840:	50 08       	stdsp	sp[0x0],r8
80002842:	d3 03       	ssrf	0x10
80002844:	40 06       	lddsp	r6,sp[0x0]
80002846:	30 1a       	mov	r10,1
80002848:	e0 6b 01 40 	mov	r11,320
8000284c:	49 8c       	lddpc	r12,800028ac <twim_master_init+0xb0>
8000284e:	f0 1f 00 19 	mcall	800028b0 <twim_master_init+0xb4>
80002852:	e6 16 00 01 	andh	r6,0x1,COH
80002856:	c0 21       	brne	8000285a <twim_master_init+0x5e>
80002858:	d5 03       	csrf	0x10
8000285a:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000285e:	30 08       	mov	r8,0
80002860:	f0 09 18 00 	cp.b	r9,r8
80002864:	f9 b8 01 10 	movne	r8,16
80002868:	ef f8 1a 00 	st.wne	r7[0x0],r8
8000286c:	f9 b8 01 ff 	movne	r8,-1
80002870:	ef f8 1a 02 	st.wne	r7[0x8],r8
80002874:	6a 0a       	ld.w	r10,r5[0x0]
80002876:	6a 1b       	ld.w	r11,r5[0x4]
80002878:	0e 9c       	mov	r12,r7
8000287a:	f0 1f 00 0f 	mcall	800028b4 <twim_master_init+0xb8>
8000287e:	5b 8c       	cp.w	r12,-8
80002880:	c1 00       	breq	800028a0 <twim_master_init+0xa4>
80002882:	6a 2b       	ld.w	r11,r5[0x8]
80002884:	0e 9c       	mov	r12,r7
80002886:	f0 1f 00 0d 	mcall	800028b8 <twim_master_init+0xbc>
8000288a:	48 88       	lddpc	r8,800028a8 <twim_master_init+0xac>
8000288c:	70 08       	ld.w	r8,r8[0x0]
8000288e:	5b c8       	cp.w	r8,-4
80002890:	c0 70       	breq	8000289e <twim_master_init+0xa2>
80002892:	48 68       	lddpc	r8,800028a8 <twim_master_init+0xac>
80002894:	70 08       	ld.w	r8,r8[0x0]
80002896:	5b e8       	cp.w	r8,-2
80002898:	c0 30       	breq	8000289e <twim_master_init+0xa2>
8000289a:	30 0c       	mov	r12,0
8000289c:	c0 28       	rjmp	800028a0 <twim_master_init+0xa4>
8000289e:	3f fc       	mov	r12,-1
800028a0:	2f fd       	sub	sp,-4
800028a2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800028a6:	00 00       	add	r0,r0
800028a8:	00 00       	add	r0,r0
800028aa:	00 18       	sub	r8,r0
800028ac:	80 00       	ld.sh	r0,r0[0x0]
800028ae:	24 b8       	sub	r8,75
800028b0:	80 00       	ld.sh	r0,r0[0x0]
800028b2:	28 bc       	sub	r12,-117
800028b4:	80 00       	ld.sh	r0,r0[0x0]
800028b6:	25 94       	sub	r4,89
800028b8:	80 00       	ld.sh	r0,r0[0x0]
800028ba:	26 d0       	sub	r0,109

800028bc <INTC_register_interrupt>:
800028bc:	f6 08 16 05 	lsr	r8,r11,0x5
800028c0:	49 99       	lddpc	r9,80002924 <INTC_register_interrupt+0x68>
800028c2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800028c6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800028ca:	72 19       	ld.w	r9,r9[0x4]
800028cc:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
800028d0:	58 0a       	cp.w	r10,0
800028d2:	c0 91       	brne	800028e4 <INTC_register_interrupt+0x28>
800028d4:	49 59       	lddpc	r9,80002928 <INTC_register_interrupt+0x6c>
800028d6:	49 6a       	lddpc	r10,8000292c <INTC_register_interrupt+0x70>
800028d8:	12 1a       	sub	r10,r9
800028da:	fe 79 10 00 	mov	r9,-61440
800028de:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800028e2:	5e fc       	retal	r12
800028e4:	58 1a       	cp.w	r10,1
800028e6:	c0 a1       	brne	800028fa <INTC_register_interrupt+0x3e>
800028e8:	49 09       	lddpc	r9,80002928 <INTC_register_interrupt+0x6c>
800028ea:	49 2a       	lddpc	r10,80002930 <INTC_register_interrupt+0x74>
800028ec:	12 1a       	sub	r10,r9
800028ee:	bf aa       	sbr	r10,0x1e
800028f0:	fe 79 10 00 	mov	r9,-61440
800028f4:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800028f8:	5e fc       	retal	r12
800028fa:	58 2a       	cp.w	r10,2
800028fc:	c0 a1       	brne	80002910 <INTC_register_interrupt+0x54>
800028fe:	48 b9       	lddpc	r9,80002928 <INTC_register_interrupt+0x6c>
80002900:	48 da       	lddpc	r10,80002934 <INTC_register_interrupt+0x78>
80002902:	12 1a       	sub	r10,r9
80002904:	bf ba       	sbr	r10,0x1f
80002906:	fe 79 10 00 	mov	r9,-61440
8000290a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000290e:	5e fc       	retal	r12
80002910:	48 69       	lddpc	r9,80002928 <INTC_register_interrupt+0x6c>
80002912:	48 aa       	lddpc	r10,80002938 <INTC_register_interrupt+0x7c>
80002914:	12 1a       	sub	r10,r9
80002916:	ea 1a c0 00 	orh	r10,0xc000
8000291a:	fe 79 10 00 	mov	r9,-61440
8000291e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002922:	5e fc       	retal	r12
80002924:	80 00       	ld.sh	r0,r0[0x0]
80002926:	2e 30       	sub	r0,-29
80002928:	80 00       	ld.sh	r0,r0[0x0]
8000292a:	2c 00       	sub	r0,-64
8000292c:	80 00       	ld.sh	r0,r0[0x0]
8000292e:	2d 04       	sub	r4,-48
80002930:	80 00       	ld.sh	r0,r0[0x0]
80002932:	2d 10       	sub	r0,-47
80002934:	80 00       	ld.sh	r0,r0[0x0]
80002936:	2d 1c       	sub	r12,-47
80002938:	80 00       	ld.sh	r0,r0[0x0]
8000293a:	2d 28       	sub	r8,-46

8000293c <_get_interrupt_handler>:
8000293c:	fe 78 10 00 	mov	r8,-61440
80002940:	e0 69 00 83 	mov	r9,131
80002944:	f2 0c 01 0c 	sub	r12,r9,r12
80002948:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
8000294c:	f2 ca ff c0 	sub	r10,r9,-64
80002950:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002954:	58 08       	cp.w	r8,0
80002956:	c0 21       	brne	8000295a <_get_interrupt_handler+0x1e>
80002958:	5e fd       	retal	0
8000295a:	f0 08 12 00 	clz	r8,r8
8000295e:	48 5a       	lddpc	r10,80002970 <_get_interrupt_handler+0x34>
80002960:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002964:	f0 08 11 1f 	rsub	r8,r8,31
80002968:	72 19       	ld.w	r9,r9[0x4]
8000296a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
8000296e:	5e fc       	retal	r12
80002970:	80 00       	ld.sh	r0,r0[0x0]
80002972:	2e 30       	sub	r0,-29

80002974 <_stext>:
80002974:	e0 6d 40 00 	mov	sp,16384
80002978:	fe c0 fd 78 	sub	r0,pc,-648
8000297c:	e3 b0 00 01 	mtsr	0x4,r0
80002980:	d5 53       	csrf	0x15
80002982:	30 40       	mov	r0,4
80002984:	30 81       	mov	r1,8
80002986:	02 30       	cp.w	r0,r1
80002988:	c0 72       	brcc	80002996 <idata_load_loop_end>
8000298a:	fe c2 fa aa 	sub	r2,pc,-1366

8000298e <idata_load_loop>:
8000298e:	a5 05       	ld.d	r4,r2++
80002990:	a1 24       	st.d	r0++,r4
80002992:	02 30       	cp.w	r0,r1
80002994:	cf d3       	brcs	8000298e <idata_load_loop>

80002996 <idata_load_loop_end>:
80002996:	30 80       	mov	r0,8
80002998:	e0 61 01 b0 	mov	r1,432
8000299c:	02 30       	cp.w	r0,r1
8000299e:	c0 62       	brcc	800029aa <udata_clear_loop_end>
800029a0:	30 02       	mov	r2,0
800029a2:	30 03       	mov	r3,0

800029a4 <udata_clear_loop>:
800029a4:	a1 22       	st.d	r0++,r2
800029a6:	02 30       	cp.w	r0,r1
800029a8:	cf e3       	brcs	800029a4 <udata_clear_loop>

800029aa <udata_clear_loop_end>:
800029aa:	fe cf fe ea 	sub	pc,pc,-278
800029ae:	d7 03       	nop

800029b0 <board_init>:
#include <board.h>
#include <conf_board.h>
#include "sensor.h"

void board_init(void)
{
800029b0:	d4 01       	pushm	lr
	sysclk_init();
800029b2:	f0 1f 00 08 	mcall	800029d0 <board_init+0x20>
800029b6:	30 6b       	mov	r11,6
800029b8:	30 2c       	mov	r12,2
800029ba:	f0 1f 00 07 	mcall	800029d4 <board_init+0x24>
	ioport_init();
	sensor_init();
800029be:	f0 1f 00 07 	mcall	800029d8 <board_init+0x28>

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
800029c2:	fc 19 00 80 	movh	r9,0x80
800029c6:	fe 78 28 00 	mov	r8,-55296
800029ca:	f1 49 00 44 	st.w	r8[68],r9
	
	ioport_set_pin_dir(LED_TRANS, IOPORT_DIR_OUTPUT);
	
}
800029ce:	d8 02       	popm	pc
800029d0:	80 00       	ld.sh	r0,r0[0x0]
800029d2:	24 34       	sub	r4,67
800029d4:	80 00       	ld.sh	r0,r0[0x0]
800029d6:	24 74       	sub	r4,71
800029d8:	80 00       	ld.sh	r0,r0[0x0]
800029da:	22 28       	sub	r8,34

800029dc <read_sensor>:
struct bno055_accel_t acc;
struct bno055_gyro_t gyr;
struct bno055_euler_t eul;

void read_sensor(void)
{
800029dc:	eb cd 40 c0 	pushm	r6-r7,lr
800029e0:	20 1d       	sub	sp,4
		//TODO: Works only if start Adresse for read is 0
		uint8_t val = BNO055_PAGE_ZERO; //CHANGE PAGE
800029e2:	fa c7 ff fc 	sub	r7,sp,-4
800029e6:	30 08       	mov	r8,0
800029e8:	0e f8       	st.b	--r7,r8
		write_sensor_data(BNO055_PAGE_ID_ADDR, &val, 1);
800029ea:	30 1a       	mov	r10,1
800029ec:	0e 9b       	mov	r11,r7
800029ee:	30 7c       	mov	r12,7
800029f0:	f0 1f 00 2d 	mcall	80002aa4 <read_sensor+0xc8>
		
		
		read_sensor_data(BNO055_CHIP_ID_ADDR, &page_0, 106);
800029f4:	4a d6       	lddpc	r6,80002aa8 <read_sensor+0xcc>
800029f6:	36 aa       	mov	r10,106
800029f8:	0c 9b       	mov	r11,r6
800029fa:	30 0c       	mov	r12,0
800029fc:	f0 1f 00 2c 	mcall	80002aac <read_sensor+0xd0>
		
		acc.x = ((int16_t) page_0[BNO055_ACCEL_DATA_X_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_ACCEL_DATA_X_LSB_ADDR];
80002a00:	4a c8       	lddpc	r8,80002ab0 <read_sensor+0xd4>
80002a02:	ed 39 00 09 	ld.ub	r9,r6[9]
80002a06:	a9 69       	lsl	r9,0x8
80002a08:	ed 3a 00 08 	ld.ub	r10,r6[8]
80002a0c:	14 09       	add	r9,r10
80002a0e:	91 09       	st.w	r8[0x0],r9
		acc.y = ((int16_t) page_0[BNO055_ACCEL_DATA_Y_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_ACCEL_DATA_Y_LSB_ADDR];
80002a10:	ed 39 00 0b 	ld.ub	r9,r6[11]
80002a14:	a9 69       	lsl	r9,0x8
80002a16:	ed 3a 00 0a 	ld.ub	r10,r6[10]
80002a1a:	14 09       	add	r9,r10
80002a1c:	91 19       	st.w	r8[0x4],r9
		acc.z = ((int16_t) page_0[BNO055_ACCEL_DATA_Z_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_ACCEL_DATA_Z_LSB_ADDR];
80002a1e:	ed 39 00 0d 	ld.ub	r9,r6[13]
80002a22:	a9 69       	lsl	r9,0x8
80002a24:	ed 3a 00 0c 	ld.ub	r10,r6[12]
80002a28:	14 09       	add	r9,r10
80002a2a:	91 29       	st.w	r8[0x8],r9
		
		eul.h = ((int16_t) page_0[BNO055_EULER_H_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_EULER_H_LSB_ADDR];
80002a2c:	4a 28       	lddpc	r8,80002ab4 <read_sensor+0xd8>
80002a2e:	ed 39 00 1b 	ld.ub	r9,r6[27]
80002a32:	a9 69       	lsl	r9,0x8
80002a34:	ed 3a 00 1a 	ld.ub	r10,r6[26]
80002a38:	14 09       	add	r9,r10
80002a3a:	91 09       	st.w	r8[0x0],r9
		eul.p = ((int16_t) page_0[BNO055_EULER_P_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_EULER_P_LSB_ADDR];
80002a3c:	ed 39 00 1f 	ld.ub	r9,r6[31]
80002a40:	a9 69       	lsl	r9,0x8
80002a42:	ed 3a 00 1e 	ld.ub	r10,r6[30]
80002a46:	14 09       	add	r9,r10
80002a48:	91 29       	st.w	r8[0x8],r9
		eul.r = ((int16_t) page_0[BNO055_EULER_R_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_EULER_R_LSB_ADDR];
80002a4a:	ed 39 00 1d 	ld.ub	r9,r6[29]
80002a4e:	a9 69       	lsl	r9,0x8
80002a50:	ed 3a 00 1c 	ld.ub	r10,r6[28]
80002a54:	14 09       	add	r9,r10
80002a56:	91 19       	st.w	r8[0x4],r9
		
		gyr.x = ((int16_t) page_0[BNO055_GYRO_DATA_X_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_GYRO_DATA_X_LSB_ADDR];
80002a58:	49 88       	lddpc	r8,80002ab8 <read_sensor+0xdc>
80002a5a:	ed 39 00 15 	ld.ub	r9,r6[21]
80002a5e:	a9 69       	lsl	r9,0x8
80002a60:	ed 3a 00 14 	ld.ub	r10,r6[20]
80002a64:	14 09       	add	r9,r10
80002a66:	91 09       	st.w	r8[0x0],r9
		gyr.y = ((int16_t) page_0[BNO055_GYRO_DATA_Y_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_GYRO_DATA_Y_LSB_ADDR];
80002a68:	ed 39 00 17 	ld.ub	r9,r6[23]
80002a6c:	a9 69       	lsl	r9,0x8
80002a6e:	ed 3a 00 16 	ld.ub	r10,r6[22]
80002a72:	14 09       	add	r9,r10
80002a74:	91 19       	st.w	r8[0x4],r9
		gyr.z = ((int16_t) page_0[BNO055_GYRO_DATA_Z_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_GYRO_DATA_Z_LSB_ADDR];
80002a76:	ed 39 00 19 	ld.ub	r9,r6[25]
80002a7a:	a9 69       	lsl	r9,0x8
80002a7c:	ed 3a 00 18 	ld.ub	r10,r6[24]
80002a80:	14 09       	add	r9,r10
80002a82:	91 29       	st.w	r8[0x8],r9
		
		val = BNO055_PAGE_ONE; //CHANGE PAGE
80002a84:	30 18       	mov	r8,1
80002a86:	ba b8       	st.b	sp[0x3],r8
		write_sensor_data(BNO055_PAGE_ID_ADDR, &val, 1);
80002a88:	30 1a       	mov	r10,1
80002a8a:	0e 9b       	mov	r11,r7
80002a8c:	30 7c       	mov	r12,7
80002a8e:	f0 1f 00 06 	mcall	80002aa4 <read_sensor+0xc8>
		
		read_sensor_data(BNO055_CHIP_ID_ADDR, &page_1, 20);
80002a92:	31 4a       	mov	r10,20
80002a94:	48 ab       	lddpc	r11,80002abc <read_sensor+0xe0>
80002a96:	30 0c       	mov	r12,0
80002a98:	f0 1f 00 05 	mcall	80002aac <read_sensor+0xd0>
}
80002a9c:	2f fd       	sub	sp,-4
80002a9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002aa2:	00 00       	add	r0,r0
80002aa4:	80 00       	ld.sh	r0,r0[0x0]
80002aa6:	21 b4       	sub	r4,27
80002aa8:	00 00       	add	r0,r0
80002aaa:	01 34       	ld.ub	r4,r0++
80002aac:	80 00       	ld.sh	r0,r0[0x0]
80002aae:	21 fc       	sub	r12,31
80002ab0:	00 00       	add	r0,r0
80002ab2:	00 fc       	st.b	--r0,r12
80002ab4:	00 00       	add	r0,r0
80002ab6:	01 08       	ld.w	r8,r0++
80002ab8:	00 00       	add	r0,r0
80002aba:	01 a0       	ld.ub	r0,r0[0x2]
80002abc:	00 00       	add	r0,r0
80002abe:	01 14       	ld.sh	r4,r0++

80002ac0 <main>:

int main (void)
{
80002ac0:	eb cd 40 fc 	pushm	r2-r7,lr
	board_init();		
80002ac4:	f0 1f 00 43 	mcall	80002bd0 <main+0x110>
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002ac8:	fe 77 28 00 	mov	r7,-55296
80002acc:	fc 12 00 80 	movh	r2,0x80

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002ad0:	e0 66 40 00 	mov	r6,16384
80002ad4:	e0 65 80 00 	mov	r5,32768
80002ad8:	e2 64 00 00 	mov	r4,131072
80002adc:	e0 63 70 e0 	mov	r3,28896
80002ae0:	ea 13 00 72 	orh	r3,0x72
	


	while (1)
	{
		read_sensor();
80002ae4:	f0 1f 00 3c 	mcall	80002bd4 <main+0x114>
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002ae8:	ef 42 00 58 	st.w	r7[88],r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002aec:	ef 46 00 54 	st.w	r7[84],r6
80002af0:	ef 45 00 54 	st.w	r7[84],r5
80002af4:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002af8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002afc:	f0 03 00 0a 	add	r10,r8,r3
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002b00:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002b04:	14 38       	cp.w	r8,r10
80002b06:	e0 88 00 08 	brls	80002b16 <main+0x56>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002b0a:	12 38       	cp.w	r8,r9
80002b0c:	fe 98 ff fa 	brls	80002b00 <main+0x40>
80002b10:	12 3a       	cp.w	r10,r9
80002b12:	c3 b3       	brcs	80002b88 <main+0xc8>
80002b14:	cf 6b       	rjmp	80002b00 <main+0x40>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b16:	12 38       	cp.w	r8,r9
80002b18:	e0 8b 00 38 	brhi	80002b88 <main+0xc8>
80002b1c:	12 3a       	cp.w	r10,r9
80002b1e:	c3 53       	brcs	80002b88 <main+0xc8>
80002b20:	cf 0b       	rjmp	80002b00 <main+0x40>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002b22:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002b26:	14 38       	cp.w	r8,r10
80002b28:	e0 88 00 08 	brls	80002b38 <main+0x78>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002b2c:	12 38       	cp.w	r8,r9
80002b2e:	fe 98 ff fa 	brls	80002b22 <main+0x62>
80002b32:	12 3a       	cp.w	r10,r9
80002b34:	c3 53       	brcs	80002b9e <main+0xde>
80002b36:	cf 6b       	rjmp	80002b22 <main+0x62>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b38:	12 38       	cp.w	r8,r9
80002b3a:	e0 8b 00 32 	brhi	80002b9e <main+0xde>
80002b3e:	12 3a       	cp.w	r10,r9
80002b40:	c2 f3       	brcs	80002b9e <main+0xde>
80002b42:	cf 0b       	rjmp	80002b22 <main+0x62>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002b44:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002b48:	14 38       	cp.w	r8,r10
80002b4a:	e0 88 00 08 	brls	80002b5a <main+0x9a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002b4e:	12 38       	cp.w	r8,r9
80002b50:	fe 98 ff fa 	brls	80002b44 <main+0x84>
80002b54:	12 3a       	cp.w	r10,r9
80002b56:	c3 13       	brcs	80002bb8 <main+0xf8>
80002b58:	cf 6b       	rjmp	80002b44 <main+0x84>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b5a:	12 38       	cp.w	r8,r9
80002b5c:	e0 8b 00 2e 	brhi	80002bb8 <main+0xf8>
80002b60:	12 3a       	cp.w	r10,r9
80002b62:	c2 b3       	brcs	80002bb8 <main+0xf8>
80002b64:	cf 0b       	rjmp	80002b44 <main+0x84>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002b66:	e1 ba 00 42 	mfsr	r10,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002b6a:	12 38       	cp.w	r8,r9
80002b6c:	e0 88 00 08 	brls	80002b7c <main+0xbc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002b70:	14 38       	cp.w	r8,r10
80002b72:	fe 98 ff fa 	brls	80002b66 <main+0xa6>
80002b76:	14 39       	cp.w	r9,r10
80002b78:	cb 63       	brcs	80002ae4 <main+0x24>
80002b7a:	cf 6b       	rjmp	80002b66 <main+0xa6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b7c:	14 38       	cp.w	r8,r10
80002b7e:	fe 9b ff b3 	brhi	80002ae4 <main+0x24>
80002b82:	14 39       	cp.w	r9,r10
80002b84:	cb 03       	brcs	80002ae4 <main+0x24>
80002b86:	cf 0b       	rjmp	80002b66 <main+0xa6>
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002b88:	ef 46 00 58 	st.w	r7[88],r6

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002b8c:	ef 45 00 54 	st.w	r7[84],r5
80002b90:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002b94:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002b98:	f0 03 00 0a 	add	r10,r8,r3
80002b9c:	cc 3b       	rjmp	80002b22 <main+0x62>
80002b9e:	ef 42 00 54 	st.w	r7[84],r2
80002ba2:	ef 46 00 54 	st.w	r7[84],r6
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002ba6:	ef 45 00 58 	st.w	r7[88],r5

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002baa:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002bae:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002bb2:	f0 03 00 0a 	add	r10,r8,r3
80002bb6:	cc 7b       	rjmp	80002b44 <main+0x84>
80002bb8:	ef 46 00 54 	st.w	r7[84],r6
80002bbc:	ef 45 00 54 	st.w	r7[84],r5
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002bc0:	ef 44 00 58 	st.w	r7[88],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002bc4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002bc8:	f0 03 00 09 	add	r9,r8,r3
80002bcc:	cc db       	rjmp	80002b66 <main+0xa6>
80002bce:	00 00       	add	r0,r0
80002bd0:	80 00       	ld.sh	r0,r0[0x0]
80002bd2:	29 b0       	sub	r0,-101
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	29 dc       	sub	r12,-99

Disassembly of section .exception:

80002c00 <_evba>:
80002c00:	c0 08       	rjmp	80002c00 <_evba>
	...

80002c04 <_handle_TLB_Multiple_Hit>:
80002c04:	c0 08       	rjmp	80002c04 <_handle_TLB_Multiple_Hit>
	...

80002c08 <_handle_Bus_Error_Data_Fetch>:
80002c08:	c0 08       	rjmp	80002c08 <_handle_Bus_Error_Data_Fetch>
	...

80002c0c <_handle_Bus_Error_Instruction_Fetch>:
80002c0c:	c0 08       	rjmp	80002c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80002c10 <_handle_NMI>:
80002c10:	c0 08       	rjmp	80002c10 <_handle_NMI>
	...

80002c14 <_handle_Instruction_Address>:
80002c14:	c0 08       	rjmp	80002c14 <_handle_Instruction_Address>
	...

80002c18 <_handle_ITLB_Protection>:
80002c18:	c0 08       	rjmp	80002c18 <_handle_ITLB_Protection>
	...

80002c1c <_handle_Breakpoint>:
80002c1c:	c0 08       	rjmp	80002c1c <_handle_Breakpoint>
	...

80002c20 <_handle_Illegal_Opcode>:
80002c20:	c0 08       	rjmp	80002c20 <_handle_Illegal_Opcode>
	...

80002c24 <_handle_Unimplemented_Instruction>:
80002c24:	c0 08       	rjmp	80002c24 <_handle_Unimplemented_Instruction>
	...

80002c28 <_handle_Privilege_Violation>:
80002c28:	c0 08       	rjmp	80002c28 <_handle_Privilege_Violation>
	...

80002c2c <_handle_Floating_Point>:
80002c2c:	c0 08       	rjmp	80002c2c <_handle_Floating_Point>
	...

80002c30 <_handle_Coprocessor_Absent>:
80002c30:	c0 08       	rjmp	80002c30 <_handle_Coprocessor_Absent>
	...

80002c34 <_handle_Data_Address_Read>:
80002c34:	c0 08       	rjmp	80002c34 <_handle_Data_Address_Read>
	...

80002c38 <_handle_Data_Address_Write>:
80002c38:	c0 08       	rjmp	80002c38 <_handle_Data_Address_Write>
	...

80002c3c <_handle_DTLB_Protection_Read>:
80002c3c:	c0 08       	rjmp	80002c3c <_handle_DTLB_Protection_Read>
	...

80002c40 <_handle_DTLB_Protection_Write>:
80002c40:	c0 08       	rjmp	80002c40 <_handle_DTLB_Protection_Write>
	...

80002c44 <_handle_DTLB_Modified>:
80002c44:	c0 08       	rjmp	80002c44 <_handle_DTLB_Modified>
	...

80002c50 <_handle_ITLB_Miss>:
80002c50:	c0 08       	rjmp	80002c50 <_handle_ITLB_Miss>
	...

80002c60 <_handle_DTLB_Miss_Read>:
80002c60:	c0 08       	rjmp	80002c60 <_handle_DTLB_Miss_Read>
	...

80002c70 <_handle_DTLB_Miss_Write>:
80002c70:	c0 08       	rjmp	80002c70 <_handle_DTLB_Miss_Write>
	...

80002d00 <_handle_Supervisor_Call>:
80002d00:	c0 08       	rjmp	80002d00 <_handle_Supervisor_Call>
80002d02:	d7 03       	nop

80002d04 <_int0>:
80002d04:	30 0c       	mov	r12,0
80002d06:	c1 be       	rcall	8000293c <_get_interrupt_handler>
80002d08:	58 0c       	cp.w	r12,0
80002d0a:	f8 0f 17 10 	movne	pc,r12
80002d0e:	d6 03       	rete

80002d10 <_int1>:
80002d10:	30 1c       	mov	r12,1
80002d12:	c1 5e       	rcall	8000293c <_get_interrupt_handler>
80002d14:	58 0c       	cp.w	r12,0
80002d16:	f8 0f 17 10 	movne	pc,r12
80002d1a:	d6 03       	rete

80002d1c <_int2>:
80002d1c:	30 2c       	mov	r12,2
80002d1e:	c0 fe       	rcall	8000293c <_get_interrupt_handler>
80002d20:	58 0c       	cp.w	r12,0
80002d22:	f8 0f 17 10 	movne	pc,r12
80002d26:	d6 03       	rete

80002d28 <_int3>:
80002d28:	30 3c       	mov	r12,3
80002d2a:	c0 9e       	rcall	8000293c <_get_interrupt_handler>
80002d2c:	58 0c       	cp.w	r12,0
80002d2e:	f8 0f 17 10 	movne	pc,r12
80002d32:	d6 03       	rete
80002d34:	d7 03       	nop
80002d36:	d7 03       	nop
80002d38:	d7 03       	nop
80002d3a:	d7 03       	nop
80002d3c:	d7 03       	nop
80002d3e:	d7 03       	nop
80002d40:	d7 03       	nop
80002d42:	d7 03       	nop
80002d44:	d7 03       	nop
80002d46:	d7 03       	nop
80002d48:	d7 03       	nop
80002d4a:	d7 03       	nop
80002d4c:	d7 03       	nop
80002d4e:	d7 03       	nop
80002d50:	d7 03       	nop
80002d52:	d7 03       	nop
80002d54:	d7 03       	nop
80002d56:	d7 03       	nop
80002d58:	d7 03       	nop
80002d5a:	d7 03       	nop
80002d5c:	d7 03       	nop
80002d5e:	d7 03       	nop
80002d60:	d7 03       	nop
80002d62:	d7 03       	nop
80002d64:	d7 03       	nop
80002d66:	d7 03       	nop
80002d68:	d7 03       	nop
80002d6a:	d7 03       	nop
80002d6c:	d7 03       	nop
80002d6e:	d7 03       	nop
80002d70:	d7 03       	nop
80002d72:	d7 03       	nop
80002d74:	d7 03       	nop
80002d76:	d7 03       	nop
80002d78:	d7 03       	nop
80002d7a:	d7 03       	nop
80002d7c:	d7 03       	nop
80002d7e:	d7 03       	nop
80002d80:	d7 03       	nop
80002d82:	d7 03       	nop
80002d84:	d7 03       	nop
80002d86:	d7 03       	nop
80002d88:	d7 03       	nop
80002d8a:	d7 03       	nop
80002d8c:	d7 03       	nop
80002d8e:	d7 03       	nop
80002d90:	d7 03       	nop
80002d92:	d7 03       	nop
80002d94:	d7 03       	nop
80002d96:	d7 03       	nop
80002d98:	d7 03       	nop
80002d9a:	d7 03       	nop
80002d9c:	d7 03       	nop
80002d9e:	d7 03       	nop
80002da0:	d7 03       	nop
80002da2:	d7 03       	nop
80002da4:	d7 03       	nop
80002da6:	d7 03       	nop
80002da8:	d7 03       	nop
80002daa:	d7 03       	nop
80002dac:	d7 03       	nop
80002dae:	d7 03       	nop
80002db0:	d7 03       	nop
80002db2:	d7 03       	nop
80002db4:	d7 03       	nop
80002db6:	d7 03       	nop
80002db8:	d7 03       	nop
80002dba:	d7 03       	nop
80002dbc:	d7 03       	nop
80002dbe:	d7 03       	nop
80002dc0:	d7 03       	nop
80002dc2:	d7 03       	nop
80002dc4:	d7 03       	nop
80002dc6:	d7 03       	nop
80002dc8:	d7 03       	nop
80002dca:	d7 03       	nop
80002dcc:	d7 03       	nop
80002dce:	d7 03       	nop
80002dd0:	d7 03       	nop
80002dd2:	d7 03       	nop
80002dd4:	d7 03       	nop
80002dd6:	d7 03       	nop
80002dd8:	d7 03       	nop
80002dda:	d7 03       	nop
80002ddc:	d7 03       	nop
80002dde:	d7 03       	nop
80002de0:	d7 03       	nop
80002de2:	d7 03       	nop
80002de4:	d7 03       	nop
80002de6:	d7 03       	nop
80002de8:	d7 03       	nop
80002dea:	d7 03       	nop
80002dec:	d7 03       	nop
80002dee:	d7 03       	nop
80002df0:	d7 03       	nop
80002df2:	d7 03       	nop
80002df4:	d7 03       	nop
80002df6:	d7 03       	nop
80002df8:	d7 03       	nop
80002dfa:	d7 03       	nop
80002dfc:	d7 03       	nop
80002dfe:	d7 03       	nop
