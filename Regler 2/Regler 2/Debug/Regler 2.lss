
Regler 2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000096c  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002a00  80002a00  00002e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000e4  80002c00  80002c00  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80002ce4  80002ce4  000030e4  2**0
                  ALLOC
  6 .data         00000004  00000004  80002ce8  00003404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000f8  00000008  80002cec  00003408  2**2
                  ALLOC
  8 .comment      00000030  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000560  00000000  00000000  00003438  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00000f93  00000000  00000000  00003998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000b130  00000000  00000000  0000492b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001669  00000000  00000000  0000fa5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005af3  00000000  00000000  000110c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000cc0  00000000  00000000  00016bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000385b  00000000  00000000  00017878  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00001f2c  00000000  00000000  0001b0d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 009196de  00000000  00000000  0001cfff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 19 .debug_ranges 000005c0  00000000  00000000  009366e0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f7 ac 	sub	pc,pc,-2132

Disassembly of section .text:

80002004 <flashcdw_set_wait_state>:
80002004:	fe 68 14 00 	mov	r8,-125952
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002008:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
8000200a:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
8000200e:	91 09       	st.w	r8[0x0],r9
}
80002010:	5e fc       	retal	r12

80002012 <flashcdw_is_ready>:
//! @{


bool flashcdw_is_ready(void)
{
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
80002012:	fe 68 14 00 	mov	r8,-125952
80002016:	70 2c       	ld.w	r12,r8[0x8]
}
80002018:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000201c:	5e fc       	retal	r12
8000201e:	d7 03       	nop

80002020 <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
80002020:	d4 01       	pushm	lr
	while (!flashcdw_is_ready());
80002022:	f0 1f 00 03 	mcall	8000202c <flashcdw_default_wait_until_ready+0xc>
80002026:	cf e0       	breq	80002022 <flashcdw_default_wait_until_ready+0x2>
}
80002028:	d8 02       	popm	pc
8000202a:	00 00       	add	r0,r0
8000202c:	80 00       	ld.sh	r0,r0[0x0]
8000202e:	20 12       	sub	r2,1

80002030 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80002030:	eb cd 40 c0 	pushm	r6-r7,lr
80002034:	18 96       	mov	r6,r12
80002036:	16 97       	mov	r7,r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80002038:	48 e8       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
8000203a:	70 08       	ld.w	r8,r8[0x0]
8000203c:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
8000203e:	fe 68 14 00 	mov	r8,-125952
80002042:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80002044:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
80002048:	58 07       	cp.w	r7,0
8000204a:	c0 35       	brlt	80002050 <flashcdw_issue_command+0x20>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
8000204c:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
80002050:	3a 59       	mov	r9,-91
80002052:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80002056:	fe 69 14 00 	mov	r9,-125952
8000205a:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
8000205c:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
	flashcdw_error_status = flashcdw_get_error_status();
8000205e:	e2 19 00 0c 	andl	r9,0xc,COH
80002062:	48 58       	lddpc	r8,80002074 <flashcdw_issue_command+0x44>
80002064:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80002066:	48 38       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
80002068:	70 08       	ld.w	r8,r8[0x0]
8000206a:	5d 18       	icall	r8
}
8000206c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002070:	00 00       	add	r0,r0
80002072:	00 04       	add	r4,r0
80002074:	00 00       	add	r0,r0
80002076:	00 08       	add	r8,r0

80002078 <flashcdw_set_flash_waitstate_and_readmode>:
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
}


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80002078:	d4 01       	pushm	lr
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
8000207a:	e0 68 e1 c0 	mov	r8,57792
8000207e:	ea 18 00 e4 	orh	r8,0xe4
80002082:	10 3c       	cp.w	r12,r8
80002084:	e0 88 00 19 	brls	800020b6 <flashcdw_set_flash_waitstate_and_readmode+0x3e>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
80002088:	e0 68 c3 80 	mov	r8,50048
8000208c:	ea 18 01 c9 	orh	r8,0x1c9
80002090:	10 3c       	cp.w	r12,r8
80002092:	e0 8b 00 0a 	brhi	800020a6 <flashcdw_set_flash_waitstate_and_readmode+0x2e>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
80002096:	30 1c       	mov	r12,1
80002098:	f0 1f 00 0c 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000209c:	3f fb       	mov	r11,-1
8000209e:	31 1c       	mov	r12,17
800020a0:	f0 1f 00 0b 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020a4:	d8 02       	popm	pc
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
800020a6:	30 1c       	mov	r12,1
800020a8:	f0 1f 00 08 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
800020ac:	3f fb       	mov	r11,-1
800020ae:	31 0c       	mov	r12,16
800020b0:	f0 1f 00 07 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020b4:	d8 02       	popm	pc
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
800020b6:	30 0c       	mov	r12,0
800020b8:	f0 1f 00 04 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
800020bc:	3f fb       	mov	r11,-1
800020be:	31 1c       	mov	r12,17
800020c0:	f0 1f 00 03 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020c4:	d8 02       	popm	pc
800020c6:	00 00       	add	r0,r0
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	20 04       	sub	r4,0
800020cc:	80 00       	ld.sh	r0,r0[0x0]
800020ce:	20 30       	sub	r0,3

800020d0 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800020d0:	f8 08 16 05 	lsr	r8,r12,0x5
800020d4:	a9 78       	lsl	r8,0x9
800020d6:	e0 28 d8 00 	sub	r8,55296

	/* Enable the correct function. */
	switch (function) {
800020da:	58 7b       	cp.w	r11,7
800020dc:	e0 8b 00 05 	brhi	800020e6 <gpio_enable_module_pin+0x16>
800020e0:	4a 09       	lddpc	r9,80002160 <gpio_enable_module_pin+0x90>
800020e2:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
800020e6:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800020e8:	30 19       	mov	r9,1
800020ea:	f2 0c 09 49 	lsl	r9,r9,r12
800020ee:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020f0:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800020f2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800020f4:	c3 18       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800020f6:	30 19       	mov	r9,1
800020f8:	f2 0c 09 49 	lsl	r9,r9,r12
800020fc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020fe:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002100:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002102:	c2 a8       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002104:	30 19       	mov	r9,1
80002106:	f2 0c 09 49 	lsl	r9,r9,r12
8000210a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000210c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000210e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002110:	c2 38       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002112:	30 19       	mov	r9,1
80002114:	f2 0c 09 49 	lsl	r9,r9,r12
80002118:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000211a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000211c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000211e:	c1 c8       	rjmp	80002156 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002120:	30 19       	mov	r9,1
80002122:	f2 0c 09 49 	lsl	r9,r9,r12
80002126:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002128:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000212a:	91 d9       	st.w	r8[0x34],r9
		break;
8000212c:	c1 58       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000212e:	30 19       	mov	r9,1
80002130:	f2 0c 09 49 	lsl	r9,r9,r12
80002134:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002136:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002138:	91 d9       	st.w	r8[0x34],r9
		break;
8000213a:	c0 e8       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000213c:	30 19       	mov	r9,1
8000213e:	f2 0c 09 49 	lsl	r9,r9,r12
80002142:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002144:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002146:	91 d9       	st.w	r8[0x34],r9
		break;
80002148:	c0 78       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000214a:	30 19       	mov	r9,1
8000214c:	f2 0c 09 49 	lsl	r9,r9,r12
80002150:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002152:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002154:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002156:	30 19       	mov	r9,1
80002158:	f2 0c 09 4c 	lsl	r12,r9,r12
8000215c:	91 2c       	st.w	r8[0x8],r12
8000215e:	5e fd       	retal	0
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	2c 00       	sub	r0,-64

80002164 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002164:	d4 21       	pushm	r4-r7,lr
80002166:	18 97       	mov	r7,r12
80002168:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000216a:	58 0b       	cp.w	r11,0
8000216c:	c0 31       	brne	80002172 <gpio_enable_module+0xe>
8000216e:	30 05       	mov	r5,0
80002170:	c0 d8       	rjmp	8000218a <gpio_enable_module+0x26>
80002172:	30 06       	mov	r6,0
80002174:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002176:	6e 1b       	ld.w	r11,r7[0x4]
80002178:	6e 0c       	ld.w	r12,r7[0x0]
8000217a:	f0 1f 00 06 	mcall	80002190 <gpio_enable_module+0x2c>
8000217e:	18 45       	or	r5,r12
		gpiomap++;
80002180:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002182:	2f f6       	sub	r6,-1
80002184:	0c 34       	cp.w	r4,r6
80002186:	fe 9b ff f8 	brhi	80002176 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000218a:	0a 9c       	mov	r12,r5
8000218c:	d8 22       	popm	r4-r7,pc
8000218e:	00 00       	add	r0,r0
80002190:	80 00       	ld.sh	r0,r0[0x0]
80002192:	20 d0       	sub	r0,13

80002194 <write_sensor_data>:
	//TODO: WRITE START ADDR _addr_t TO SENSOR BEFOR READING
	return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
}

status_code_t write_sensor_data(bno055_register_addr_t _addr, uint8_t *values, uint_fast8_t count)
{
80002194:	d4 01       	pushm	lr
	//TODO: WRITE START ADDR _addr_t TO SENSOR BEFOR WRITING
	return twim_write(TWI_SENS, values, count++, BNO055_TWI_ADDR_SENSOR, false);
80002196:	30 08       	mov	r8,0
80002198:	32 89       	mov	r9,40
8000219a:	fe 7c 40 00 	mov	r12,-49152
8000219e:	f0 1f 00 02 	mcall	800021a4 <write_sensor_data+0x10>
}
800021a2:	d8 02       	popm	pc
800021a4:	80 00       	ld.sh	r0,r0[0x0]
800021a6:	25 34       	sub	r4,83

800021a8 <read_sensor_data>:
	ioport_set_pin_level(RST_SENS, HIGH);
	delay_ms(700);							//SENSOR STARTUP TIME
	twim_master_init(TWI_SENS, &_twi_opt);
}

status_code_t read_sensor_data(bno055_register_addr_t _addr, uint8_t *values, uint_fast32_t count){
800021a8:	d4 01       	pushm	lr
	//TODO: WRITE START ADDR _addr_t TO SENSOR BEFOR READING
	return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
800021aa:	30 08       	mov	r8,0
800021ac:	32 89       	mov	r9,40
800021ae:	fe 7c 40 00 	mov	r12,-49152
800021b2:	f0 1f 00 02 	mcall	800021b8 <read_sensor_data+0x10>
}
800021b6:	d8 02       	popm	pc
800021b8:	80 00       	ld.sh	r0,r0[0x0]
800021ba:	26 04       	sub	r4,96

800021bc <sensor_init>:
 *  Author: Markus
 */ 
#include "asf.h"
#include "sensor.h" 

void sensor_init(void){
800021bc:	d4 01       	pushm	lr
800021be:	20 4d       	sub	sp,16

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
800021c0:	fe 78 28 00 	mov	r8,-55296
800021c4:	e0 7a 00 00 	mov	r10,65536
800021c8:	f1 4a 00 44 	st.w	r8[68],r10
800021cc:	e0 69 01 00 	mov	r9,256
800021d0:	f1 49 00 44 	st.w	r8[68],r9
				pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->oderc = arch_ioport_pin_to_mask(
800021d4:	e0 6b 20 00 	mov	r11,8192
800021d8:	f1 4b 00 48 	st.w	r8[72],r11
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
800021dc:	f1 4a 00 58 	st.w	r8[88],r10
800021e0:	f1 49 00 58 	st.w	r8[88],r9
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800021e4:	30 bb       	mov	r11,11
800021e6:	30 2c       	mov	r12,2
800021e8:	f0 1f 00 29 	mcall	8000228c <sensor_init+0xd0>
	ioport_set_pin_level(RST_SENS, LOW);
	
	sysclk_enable_peripheral_clock(TWI_SENS);
	
	static const gpio_map_t TWI_GPIO_MAP =	{{SDA_SENS, 0},{SCL_SENS, 0}};	 //TODO: DEFINE FUNCTION_A 0
	gpio_enable_module(TWI_GPIO_MAP,2);
800021ec:	30 2b       	mov	r11,2
800021ee:	4a 9c       	lddpc	r12,80002290 <sensor_init+0xd4>
800021f0:	f0 1f 00 29 	mcall	80002294 <sensor_init+0xd8>
		
	twim_options_t _twi_opt;
	_twi_opt.chip = BNO055_TWI_ADDR_SENSOR;
800021f4:	32 88       	mov	r8,40
800021f6:	50 28       	stdsp	sp[0x8],r8
	_twi_opt.pba_hz = sysclk_get_pba_hz();
800021f8:	e0 68 c3 80 	mov	r8,50048
800021fc:	ea 18 01 c9 	orh	r8,0x1c9
80002200:	50 08       	stdsp	sp[0x0],r8
	_twi_opt.smbus = false;
80002202:	30 08       	mov	r8,0
80002204:	fb 68 00 0c 	st.b	sp[12],r8
	_twi_opt.speed = TWI_SENS_SPEED;
80002208:	e6 68 1a 80 	mov	r8,400000
8000220c:	50 18       	stdsp	sp[0x4],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000220e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002212:	e2 69 49 f0 	mov	r9,150000
80002216:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000221a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000221e:	14 38       	cp.w	r8,r10
80002220:	e0 88 00 08 	brls	80002230 <sensor_init+0x74>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002224:	12 38       	cp.w	r8,r9
80002226:	fe 98 ff fa 	brls	8000221a <sensor_init+0x5e>
8000222a:	12 3a       	cp.w	r10,r9
8000222c:	c1 93       	brcs	8000225e <sensor_init+0xa2>
8000222e:	cf 6b       	rjmp	8000221a <sensor_init+0x5e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002230:	12 38       	cp.w	r8,r9
80002232:	e0 8b 00 16 	brhi	8000225e <sensor_init+0xa2>
80002236:	12 3a       	cp.w	r10,r9
80002238:	c1 33       	brcs	8000225e <sensor_init+0xa2>
8000223a:	cf 0b       	rjmp	8000221a <sensor_init+0x5e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000223c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002240:	14 38       	cp.w	r8,r10
80002242:	e0 88 00 08 	brls	80002252 <sensor_init+0x96>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002246:	12 38       	cp.w	r8,r9
80002248:	fe 98 ff fa 	brls	8000223c <sensor_init+0x80>
8000224c:	12 3a       	cp.w	r10,r9
8000224e:	c1 73       	brcs	8000227c <sensor_init+0xc0>
80002250:	cf 6b       	rjmp	8000223c <sensor_init+0x80>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002252:	12 38       	cp.w	r8,r9
80002254:	e0 8b 00 14 	brhi	8000227c <sensor_init+0xc0>
80002258:	12 3a       	cp.w	r10,r9
8000225a:	c1 13       	brcs	8000227c <sensor_init+0xc0>
8000225c:	cf 0b       	rjmp	8000223c <sensor_init+0x80>

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
8000225e:	e0 69 01 00 	mov	r9,256
80002262:	fe 78 28 00 	mov	r8,-55296
80002266:	f1 49 00 54 	st.w	r8[84],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000226a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000226e:	e0 6a 6f 40 	mov	r10,28480
80002272:	ea 1a 01 40 	orh	r10,0x140
80002276:	f0 0a 00 0a 	add	r10,r8,r10
8000227a:	ce 1b       	rjmp	8000223c <sensor_init+0x80>
	
	delay_ms(5);
	ioport_set_pin_level(RST_SENS, HIGH);
	delay_ms(700);							//SENSOR STARTUP TIME
	twim_master_init(TWI_SENS, &_twi_opt);
8000227c:	1a 9b       	mov	r11,sp
8000227e:	fe 7c 40 00 	mov	r12,-49152
80002282:	f0 1f 00 06 	mcall	80002298 <sensor_init+0xdc>
}
80002286:	2f cd       	sub	sp,-16
80002288:	d8 02       	popm	pc
8000228a:	00 00       	add	r0,r0
8000228c:	80 00       	ld.sh	r0,r0[0x0]
8000228e:	23 8c       	sub	r12,56
80002290:	80 00       	ld.sh	r0,r0[0x0]
80002292:	2c 20       	sub	r0,-62
80002294:	80 00       	ld.sh	r0,r0[0x0]
80002296:	21 64       	sub	r4,22
80002298:	80 00       	ld.sh	r0,r0[0x0]
8000229a:	26 dc       	sub	r12,109

8000229c <osc_priv_enable_rc120m>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC32_HZ */

void osc_priv_enable_rc120m(void)
{
8000229c:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000229e:	e1 b8 00 00 	mfsr	r8,0x0
800022a2:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800022a4:	d3 03       	ssrf	0x10

	return flags;
800022a6:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
800022a8:	fe 78 58 00 	mov	r8,-43008
800022ac:	34 4a       	mov	r10,68
800022ae:	ea 1a aa 00 	orh	r10,0xaa00
800022b2:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
800022b4:	30 1a       	mov	r10,1
800022b6:	f1 4a 00 44 	st.w	r8[68],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800022ba:	12 98       	mov	r8,r9
800022bc:	e6 18 00 01 	andh	r8,0x1,COH
800022c0:	c0 21       	brne	800022c4 <osc_priv_enable_rc120m+0x28>
      cpu_irq_enable();
800022c2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800022c4:	2f fd       	sub	sp,-4
800022c6:	5e fc       	retal	r12

800022c8 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
800022c8:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800022ca:	e1 b8 00 00 	mfsr	r8,0x0
800022ce:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800022d0:	d3 03       	ssrf	0x10

	return flags;
800022d2:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL1);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
800022d4:	fe 78 14 00 	mov	r8,-60416
800022d8:	fc 1a aa 00 	movh	r10,0xaa00
800022dc:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
800022e0:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800022e2:	12 98       	mov	r8,r9
800022e4:	e6 18 00 01 	andh	r8,0x1,COH
800022e8:	c0 21       	brne	800022ec <sysclk_set_source+0x24>
      cpu_irq_enable();
800022ea:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800022ec:	2f fd       	sub	sp,-4
800022ee:	5e fc       	retal	r12

800022f0 <sysclk_set_prescalers>:
 * \param pba_shift The PBA clock will be divided by \f$2^{pba\_shift}\f$
 * \param pbb_shift The PBB clock will be divided by \f$2^{pbb\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift)
{
800022f0:	d4 01       	pushm	lr
800022f2:	20 1d       	sub	sp,4
	uint32_t   pbb_cksel = 0;

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
800022f4:	58 0c       	cp.w	r12,0
800022f6:	c0 30       	breq	800022fc <sysclk_set_prescalers+0xc>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_OFFSET)
800022f8:	20 1c       	sub	r12,1
800022fa:	a7 bc       	sbr	r12,0x7
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
800022fc:	58 0b       	cp.w	r11,0
800022fe:	c0 30       	breq	80002304 <sysclk_set_prescalers+0x14>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_OFFSET)
80002300:	20 1b       	sub	r11,1
80002302:	a7 bb       	sbr	r11,0x7
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
80002304:	58 0a       	cp.w	r10,0
80002306:	c0 30       	breq	8000230c <sysclk_set_prescalers+0x1c>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_OFFSET)
80002308:	20 1a       	sub	r10,1
8000230a:	a7 ba       	sbr	r10,0x7

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000230c:	e1 b8 00 00 	mfsr	r8,0x0
80002310:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002312:	d3 03       	ssrf	0x10

	return flags;
80002314:	40 09       	lddsp	r9,sp[0x0]
				| (1U << AVR32_PM_PBBDIV);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
80002316:	fe 78 14 00 	mov	r8,-60416
8000231a:	30 4e       	mov	lr,4
8000231c:	ea 1e aa 00 	orh	lr,0xaa00
80002320:	f1 4e 00 58 	st.w	r8[88],lr
	AVR32_PM.cpusel = cpu_cksel;
80002324:	91 1c       	st.w	r8[0x4],r12
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
80002326:	30 cc       	mov	r12,12
80002328:	ea 1c aa 00 	orh	r12,0xaa00
8000232c:	f1 4c 00 58 	st.w	r8[88],r12
	AVR32_PM.pbasel = pba_cksel;
80002330:	91 3b       	st.w	r8[0xc],r11
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
80002332:	31 0b       	mov	r11,16
80002334:	ea 1b aa 00 	orh	r11,0xaa00
80002338:	f1 4b 00 58 	st.w	r8[88],r11
	AVR32_PM.pbbsel = pbb_cksel;
8000233c:	91 4a       	st.w	r8[0x10],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000233e:	12 98       	mov	r8,r9
80002340:	e6 18 00 01 	andh	r8,0x1,COH
80002344:	c0 21       	brne	80002348 <sysclk_set_prescalers+0x58>
      cpu_irq_enable();
80002346:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002348:	2f fd       	sub	sp,-4
8000234a:	d8 02       	popm	pc

8000234c <sysclk_init>:
#endif // CONFIG_USBCLK_SOURCE



void sysclk_init(void)
{
8000234c:	d4 01       	pushm	lr
	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
8000234e:	30 2a       	mov	r10,2
80002350:	14 9b       	mov	r11,r10
80002352:	14 9c       	mov	r12,r10
80002354:	f0 1f 00 0a 	mcall	8000237c <sysclk_init+0x30>
		osc_priv_enable_osc32();
		break;
#endif

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
80002358:	f0 1f 00 0a 	mcall	80002380 <sysclk_init+0x34>
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
8000235c:	fe 78 58 00 	mov	r8,-43008
80002360:	71 19       	ld.w	r9,r8[0x44]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80002362:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80002366:	cf d0       	breq	80002360 <sysclk_init+0x14>
#endif
	case SYSCLK_SRC_RC120M:
		osc_enable(OSC_ID_RC120M);
		osc_wait_ready(OSC_ID_RC120M);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80002368:	e0 6c c3 80 	mov	r12,50048
8000236c:	ea 1c 01 c9 	orh	r12,0x1c9
80002370:	f0 1f 00 05 	mcall	80002384 <sysclk_init+0x38>
		sysclk_set_source(SYSCLK_SRC_RC120M);
80002374:	30 4c       	mov	r12,4
80002376:	f0 1f 00 05 	mcall	80002388 <sysclk_init+0x3c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000237a:	d8 02       	popm	pc
8000237c:	80 00       	ld.sh	r0,r0[0x0]
8000237e:	22 f0       	sub	r0,47
80002380:	80 00       	ld.sh	r0,r0[0x0]
80002382:	22 9c       	sub	r12,41
80002384:	80 00       	ld.sh	r0,r0[0x0]
80002386:	20 78       	sub	r8,7
80002388:	80 00       	ld.sh	r0,r0[0x0]
8000238a:	22 c8       	sub	r8,44

8000238c <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000238c:	d4 01       	pushm	lr
8000238e:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002390:	e1 b8 00 00 	mfsr	r8,0x0
80002394:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002396:	d3 03       	ssrf	0x10

	return flags;
80002398:	40 09       	lddsp	r9,sp[0x0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000239a:	a3 6c       	lsl	r12,0x2
8000239c:	fe 7a 14 20 	mov	r10,-60384
800023a0:	f8 0a 00 08 	add	r8,r12,r10
800023a4:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
800023a6:	30 1e       	mov	lr,1
800023a8:	fc 0b 09 4b 	lsl	r11,lr,r11
800023ac:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
800023ae:	32 0a       	mov	r10,32
800023b0:	ea 1a aa 00 	orh	r10,0xaa00
800023b4:	14 0c       	add	r12,r10
800023b6:	fe 7a 14 00 	mov	r10,-60416
800023ba:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
800023be:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800023c0:	12 98       	mov	r8,r9
800023c2:	e6 18 00 01 	andh	r8,0x1,COH
800023c6:	c0 21       	brne	800023ca <sysclk_priv_enable_module+0x3e>
      cpu_irq_enable();
800023c8:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800023ca:	2f fd       	sub	sp,-4
800023cc:	d8 02       	popm	pc
800023ce:	d7 03       	nop

800023d0 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
800023d0:	4a e8       	lddpc	r8,80002488 <twim_master_interrupt_handler+0xb8>
800023d2:	70 08       	ld.w	r8,r8[0x0]
800023d4:	70 79       	ld.w	r9,r8[0x1c]
800023d6:	4a ea       	lddpc	r10,8000248c <twim_master_interrupt_handler+0xbc>
800023d8:	74 0a       	ld.w	r10,r10[0x0]
800023da:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
800023de:	12 9a       	mov	r10,r9
800023e0:	e2 1a 07 00 	andl	r10,0x700,COH
800023e4:	c1 40       	breq	8000240c <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
800023e6:	e2 19 03 00 	andl	r9,0x300,COH
800023ea:	f9 b9 01 fc 	movne	r9,-4
800023ee:	f9 b9 00 fe 	moveq	r9,-2
800023f2:	4a 8a       	lddpc	r10,80002490 <twim_master_interrupt_handler+0xc0>
800023f4:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
800023f6:	70 3a       	ld.w	r10,r8[0xc]
800023f8:	30 09       	mov	r9,0
800023fa:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
800023fe:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002400:	3f fa       	mov	r10,-1
80002402:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80002404:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
80002406:	4a 48       	lddpc	r8,80002494 <twim_master_interrupt_handler+0xc4>
80002408:	b0 89       	st.b	r8[0x0],r9
8000240a:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
8000240c:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002410:	c1 30       	breq	80002436 <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80002412:	4a 2a       	lddpc	r10,80002498 <twim_master_interrupt_handler+0xc8>
80002414:	70 5b       	ld.w	r11,r8[0x14]
80002416:	74 09       	ld.w	r9,r10[0x0]
80002418:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000241a:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
8000241c:	4a 09       	lddpc	r9,8000249c <twim_master_interrupt_handler+0xcc>
8000241e:	72 0a       	ld.w	r10,r9[0x0]
80002420:	20 1a       	sub	r10,1
80002422:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80002424:	72 09       	ld.w	r9,r9[0x0]
80002426:	58 09       	cp.w	r9,0
80002428:	c2 f1       	brne	80002486 <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000242a:	30 19       	mov	r9,1
8000242c:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000242e:	30 09       	mov	r9,0
80002430:	49 98       	lddpc	r8,80002494 <twim_master_interrupt_handler+0xc4>
80002432:	b0 89       	st.b	r8[0x0],r9
80002434:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80002436:	e2 19 00 02 	andl	r9,0x2,COH
8000243a:	c2 60       	breq	80002486 <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
8000243c:	49 99       	lddpc	r9,800024a0 <twim_master_interrupt_handler+0xd0>
8000243e:	72 09       	ld.w	r9,r9[0x0]
80002440:	58 09       	cp.w	r9,0
80002442:	c0 71       	brne	80002450 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80002444:	30 29       	mov	r9,2
80002446:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002448:	30 09       	mov	r9,0
8000244a:	49 38       	lddpc	r8,80002494 <twim_master_interrupt_handler+0xc4>
8000244c:	b0 89       	st.b	r8[0x0],r9
8000244e:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002450:	49 5a       	lddpc	r10,800024a4 <twim_master_interrupt_handler+0xd4>
80002452:	74 09       	ld.w	r9,r10[0x0]
80002454:	13 3b       	ld.ub	r11,r9++
80002456:	91 6b       	st.w	r8[0x18],r11
80002458:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
8000245a:	49 28       	lddpc	r8,800024a0 <twim_master_interrupt_handler+0xd0>
8000245c:	70 09       	ld.w	r9,r8[0x0]
8000245e:	20 19       	sub	r9,1
80002460:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80002462:	70 08       	ld.w	r8,r8[0x0]
80002464:	58 08       	cp.w	r8,0
80002466:	c1 01       	brne	80002486 <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
80002468:	48 b8       	lddpc	r8,80002494 <twim_master_interrupt_handler+0xc4>
8000246a:	11 88       	ld.ub	r8,r8[0x0]
8000246c:	58 08       	cp.w	r8,0
8000246e:	c0 c0       	breq	80002486 <twim_master_interrupt_handler+0xb6>
					twim_next = false;
80002470:	30 09       	mov	r9,0
80002472:	48 98       	lddpc	r8,80002494 <twim_master_interrupt_handler+0xc4>
80002474:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
80002476:	48 d8       	lddpc	r8,800024a8 <twim_master_interrupt_handler+0xd8>
80002478:	70 08       	ld.w	r8,r8[0x0]
8000247a:	70 3a       	ld.w	r10,r8[0xc]
8000247c:	48 99       	lddpc	r9,800024a0 <twim_master_interrupt_handler+0xd0>
8000247e:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
80002480:	70 29       	ld.w	r9,r8[0x8]
80002482:	48 98       	lddpc	r8,800024a4 <twim_master_interrupt_handler+0xd4>
80002484:	91 09       	st.w	r8[0x0],r9
80002486:	d6 03       	rete
80002488:	00 00       	add	r0,r0
8000248a:	00 0c       	add	r12,r0
8000248c:	00 00       	add	r0,r0
8000248e:	00 20       	rsub	r0,r0
80002490:	00 00       	add	r0,r0
80002492:	00 18       	sub	r8,r0
80002494:	00 00       	add	r0,r0
80002496:	00 24       	rsub	r4,r0
80002498:	00 00       	add	r0,r0
8000249a:	00 10       	sub	r0,r0
8000249c:	00 00       	add	r0,r0
8000249e:	00 14       	sub	r4,r0
800024a0:	00 00       	add	r0,r0
800024a2:	00 2c       	rsub	r12,r0
800024a4:	00 00       	add	r0,r0
800024a6:	00 1c       	sub	r12,r0
800024a8:	00 00       	add	r0,r0
800024aa:	00 28       	rsub	r8,r0

800024ac <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800024ac:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800024b0:	f4 0b 0d 0a 	divu	r10,r10,r11
800024b4:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800024b8:	e0 48 00 ff 	cp.w	r8,255
800024bc:	e0 8b 00 04 	brhi	800024c4 <twim_set_speed+0x18>
800024c0:	30 09       	mov	r9,0
800024c2:	c1 a8       	rjmp	800024f6 <twim_set_speed+0x4a>
800024c4:	30 09       	mov	r9,0
800024c6:	30 77       	mov	r7,7
800024c8:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
800024ca:	2f f9       	sub	r9,-1
800024cc:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
800024ce:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800024d0:	e0 48 00 ff 	cp.w	r8,255
800024d4:	5f bb       	srhi	r11
800024d6:	ee 09 18 00 	cp.b	r9,r7
800024da:	5f 8a       	srls	r10
800024dc:	f7 ea 00 0a 	and	r10,r11,r10
800024e0:	fc 0a 18 00 	cp.b	r10,lr
800024e4:	cf 31       	brne	800024ca <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
800024e6:	30 7a       	mov	r10,7
800024e8:	f4 09 18 00 	cp.b	r9,r10
800024ec:	e0 88 00 05 	brls	800024f6 <twim_set_speed+0x4a>
800024f0:	3f 8c       	mov	r12,-8
800024f2:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
800024f6:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
800024fa:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
800024fe:	14 18       	sub	r8,r10
80002500:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80002504:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80002508:	99 19       	st.w	r12[0x4],r9
8000250a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
8000250e:	d7 03       	nop

80002510 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002510:	48 38       	lddpc	r8,8000251c <twim_status+0xc>
80002512:	70 08       	ld.w	r8,r8[0x0]
80002514:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
80002516:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000251a:	5e fc       	retal	r12
8000251c:	00 00       	add	r0,r0
8000251e:	00 0c       	add	r12,r0

80002520 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002520:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002524:	e6 18 00 01 	andh	r8,0x1,COH
80002528:	c0 21       	brne	8000252c <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000252a:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
8000252c:	3f f8       	mov	r8,-1
8000252e:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002530:	99 b8       	st.w	r12[0x2c],r8
}
80002532:	5e fc       	retal	r12

80002534 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002534:	eb cd 40 fe 	pushm	r1-r7,lr
80002538:	18 97       	mov	r7,r12
8000253a:	16 93       	mov	r3,r11
8000253c:	14 95       	mov	r5,r10
8000253e:	12 92       	mov	r2,r9
80002540:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002542:	30 14       	mov	r4,1
80002544:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002546:	e0 68 00 80 	mov	r8,128
8000254a:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000254c:	30 28       	mov	r8,2
8000254e:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002550:	49 e6       	lddpc	r6,800025c8 <twim_write+0x94>
80002552:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002554:	f0 1f 00 1e 	mcall	800025cc <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80002558:	49 e8       	lddpc	r8,800025d0 <twim_write+0x9c>
8000255a:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8000255c:	49 e8       	lddpc	r8,800025d4 <twim_write+0xa0>
8000255e:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
80002560:	30 09       	mov	r9,0
80002562:	49 e8       	lddpc	r8,800025d8 <twim_write+0xa4>
80002564:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002566:	49 e9       	lddpc	r9,800025dc <twim_write+0xa8>
80002568:	30 08       	mov	r8,0
8000256a:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000256c:	6c 08       	ld.w	r8,r6[0x0]
8000256e:	b1 65       	lsl	r5,0x10
80002570:	e8 15 e0 00 	orl	r5,0xe000
80002574:	eb e2 10 12 	or	r2,r5,r2<<0x1
80002578:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
8000257c:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8000257e:	49 9a       	lddpc	r10,800025e0 <twim_write+0xac>
80002580:	e0 6b 03 02 	mov	r11,770
80002584:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80002586:	74 0a       	ld.w	r10,r10[0x0]
80002588:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8000258a:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
8000258c:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8000258e:	72 08       	ld.w	r8,r9[0x0]
80002590:	58 08       	cp.w	r8,0
80002592:	c0 80       	breq	800025a2 <twim_write+0x6e>
80002594:	c0 b8       	rjmp	800025aa <twim_write+0x76>
		cpu_relax();
80002596:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8000259a:	6c 08       	ld.w	r8,r6[0x0]
8000259c:	58 08       	cp.w	r8,0
8000259e:	c0 30       	breq	800025a4 <twim_write+0x70>
800025a0:	c0 58       	rjmp	800025aa <twim_write+0x76>
800025a2:	48 f6       	lddpc	r6,800025dc <twim_write+0xa8>
800025a4:	f0 1f 00 10 	mcall	800025e4 <twim_write+0xb0>
800025a8:	cf 70       	breq	80002596 <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800025aa:	30 28       	mov	r8,2
800025ac:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800025ae:	48 c8       	lddpc	r8,800025dc <twim_write+0xa8>
800025b0:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800025b2:	5b c8       	cp.w	r8,-4
800025b4:	c0 70       	breq	800025c2 <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800025b6:	48 a8       	lddpc	r8,800025dc <twim_write+0xa8>
800025b8:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800025ba:	5b e8       	cp.w	r8,-2
800025bc:	c0 30       	breq	800025c2 <twim_write+0x8e>
800025be:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800025c2:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
800025c6:	00 00       	add	r0,r0
800025c8:	00 00       	add	r0,r0
800025ca:	00 0c       	add	r12,r0
800025cc:	80 00       	ld.sh	r0,r0[0x0]
800025ce:	25 20       	sub	r0,82
800025d0:	00 00       	add	r0,r0
800025d2:	00 1c       	sub	r12,r0
800025d4:	00 00       	add	r0,r0
800025d6:	00 2c       	rsub	r12,r0
800025d8:	00 00       	add	r0,r0
800025da:	00 24       	rsub	r4,r0
800025dc:	00 00       	add	r0,r0
800025de:	00 18       	sub	r8,r0
800025e0:	00 00       	add	r0,r0
800025e2:	00 20       	rsub	r0,r0
800025e4:	80 00       	ld.sh	r0,r0[0x0]
800025e6:	25 10       	sub	r0,81

800025e8 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
800025e8:	d4 01       	pushm	lr
800025ea:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
800025ec:	30 08       	mov	r8,0
800025ee:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
800025f0:	30 08       	mov	r8,0
800025f2:	16 99       	mov	r9,r11
800025f4:	10 9a       	mov	r10,r8
800025f6:	1a 9b       	mov	r11,sp
800025f8:	f0 1f 00 02 	mcall	80002600 <twim_probe+0x18>
}
800025fc:	2f fd       	sub	sp,-4
800025fe:	d8 02       	popm	pc
80002600:	80 00       	ld.sh	r0,r0[0x0]
80002602:	25 34       	sub	r4,83

80002604 <twim_read>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read (volatile avr32_twim_t *twim, uint8_t *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002604:	eb cd 40 f8 	pushm	r3-r7,lr
80002608:	18 97       	mov	r7,r12
8000260a:	16 95       	mov	r5,r11
8000260c:	14 96       	mov	r6,r10
8000260e:	12 93       	mov	r3,r9
80002610:	10 94       	mov	r4,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002612:	30 18       	mov	r8,1
80002614:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002616:	e0 68 00 80 	mov	r8,128
8000261a:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000261c:	30 28       	mov	r8,2
8000261e:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002620:	4a 78       	lddpc	r8,800026bc <twim_read+0xb8>
80002622:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002624:	f0 1f 00 27 	mcall	800026c0 <twim_read+0xbc>
	// get a pointer to applicative data
	twim_rx_data = buffer;
80002628:	4a 78       	lddpc	r8,800026c4 <twim_read+0xc0>
8000262a:	91 05       	st.w	r8[0x0],r5
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = nbytes;
8000262c:	4a 78       	lddpc	r8,800026c8 <twim_read+0xc4>
8000262e:	91 06       	st.w	r8[0x0],r6
	// Set next transfer to false
	twim_next = false;
80002630:	30 09       	mov	r9,0
80002632:	4a 78       	lddpc	r8,800026cc <twim_read+0xc8>
80002634:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002636:	30 09       	mov	r9,0
80002638:	4a 68       	lddpc	r8,800026d0 <twim_read+0xcc>
8000263a:	91 09       	st.w	r8[0x0],r9
	//tenbit need special handling
	if (tenbit)	{
8000263c:	58 04       	cp.w	r4,0
8000263e:	c0 f0       	breq	8000265c <twim_read+0x58>
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80002640:	49 f8       	lddpc	r8,800026bc <twim_read+0xb8>
80002642:	70 08       	ld.w	r8,r8[0x0]
80002644:	a1 73       	lsl	r3,0x1
80002646:	06 99       	mov	r9,r3
80002648:	e8 19 a8 00 	orl	r9,0xa800
8000264c:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000264e:	b1 66       	lsl	r6,0x10
80002650:	e8 16 f8 01 	orl	r6,0xf801
80002654:	ed e3 10 03 	or	r3,r6,r3
80002658:	91 43       	st.w	r8[0x10],r3
8000265a:	c0 98       	rjmp	8000266c <twim_read+0x68>
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000265c:	49 88       	lddpc	r8,800026bc <twim_read+0xb8>
8000265e:	70 08       	ld.w	r8,r8[0x0]
80002660:	b1 66       	lsl	r6,0x10
80002662:	e8 16 e0 01 	orl	r6,0xe001
80002666:	ed e3 10 13 	or	r3,r6,r3<<0x1
8000266a:	91 33       	st.w	r8[0xc],r3
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// mask NACK and RXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8000266c:	49 a9       	lddpc	r9,800026d4 <twim_read+0xd0>
8000266e:	e0 68 07 01 	mov	r8,1793
80002672:	93 08       	st.w	r9[0x0],r8
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80002674:	49 28       	lddpc	r8,800026bc <twim_read+0xb8>
80002676:	70 08       	ld.w	r8,r8[0x0]
80002678:	72 09       	ld.w	r9,r9[0x0]
8000267a:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8000267c:	30 19       	mov	r9,1
8000267e:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
80002680:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80002682:	49 48       	lddpc	r8,800026d0 <twim_read+0xcc>
80002684:	70 08       	ld.w	r8,r8[0x0]
80002686:	58 08       	cp.w	r8,0
80002688:	c0 80       	breq	80002698 <twim_read+0x94>
8000268a:	c0 b8       	rjmp	800026a0 <twim_read+0x9c>
		cpu_relax();
8000268c:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80002690:	6c 08       	ld.w	r8,r6[0x0]
80002692:	58 08       	cp.w	r8,0
80002694:	c0 30       	breq	8000269a <twim_read+0x96>
80002696:	c0 58       	rjmp	800026a0 <twim_read+0x9c>
80002698:	48 e6       	lddpc	r6,800026d0 <twim_read+0xcc>
8000269a:	f0 1f 00 10 	mcall	800026d8 <twim_read+0xd4>
8000269e:	cf 70       	breq	8000268c <twim_read+0x88>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800026a0:	30 28       	mov	r8,2
800026a2:	8f 08       	st.w	r7[0x0],r8
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800026a4:	48 b8       	lddpc	r8,800026d0 <twim_read+0xcc>
800026a6:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
800026a8:	5b c8       	cp.w	r8,-4
800026aa:	c0 70       	breq	800026b8 <twim_read+0xb4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800026ac:	48 98       	lddpc	r8,800026d0 <twim_read+0xcc>
800026ae:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
800026b0:	5b e8       	cp.w	r8,-2
800026b2:	c0 30       	breq	800026b8 <twim_read+0xb4>
800026b4:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
800026b8:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1
800026bc:	00 00       	add	r0,r0
800026be:	00 0c       	add	r12,r0
800026c0:	80 00       	ld.sh	r0,r0[0x0]
800026c2:	25 20       	sub	r0,82
800026c4:	00 00       	add	r0,r0
800026c6:	00 10       	sub	r0,r0
800026c8:	00 00       	add	r0,r0
800026ca:	00 14       	sub	r4,r0
800026cc:	00 00       	add	r0,r0
800026ce:	00 24       	rsub	r4,r0
800026d0:	00 00       	add	r0,r0
800026d2:	00 18       	sub	r8,r0
800026d4:	00 00       	add	r0,r0
800026d6:	00 20       	rsub	r0,r0
800026d8:	80 00       	ld.sh	r0,r0[0x0]
800026da:	25 10       	sub	r0,81

800026dc <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
800026dc:	eb cd 40 e0 	pushm	r5-r7,lr
800026e0:	20 1d       	sub	sp,4
800026e2:	18 97       	mov	r7,r12
800026e4:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
800026e6:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800026ea:	30 0a       	mov	r10,0
800026ec:	4a 79       	lddpc	r9,80002788 <twim_master_init+0xac>
800026ee:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
800026f0:	e6 18 00 01 	andh	r8,0x1,COH
800026f4:	c0 b1       	brne	8000270a <twim_master_init+0x2e>
		cpu_irq_disable ();
800026f6:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
800026f8:	3f f8       	mov	r8,-1
800026fa:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800026fc:	30 18       	mov	r8,1
800026fe:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002700:	e0 68 00 80 	mov	r8,128
80002704:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002706:	d5 03       	csrf	0x10
80002708:	c0 88       	rjmp	80002718 <twim_master_init+0x3c>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
8000270a:	3f f8       	mov	r8,-1
8000270c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000270e:	30 18       	mov	r8,1
80002710:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002712:	e0 68 00 80 	mov	r8,128
80002716:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80002718:	3f f8       	mov	r8,-1
8000271a:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000271c:	e1 b8 00 00 	mfsr	r8,0x0
80002720:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002722:	d3 03       	ssrf	0x10

	return flags;
80002724:	40 06       	lddsp	r6,sp[0x0]

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002726:	30 1a       	mov	r10,1
80002728:	e0 6b 01 40 	mov	r11,320
8000272c:	49 8c       	lddpc	r12,8000278c <twim_master_init+0xb0>
8000272e:	f0 1f 00 19 	mcall	80002790 <twim_master_init+0xb4>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002732:	e6 16 00 01 	andh	r6,0x1,COH
80002736:	c0 21       	brne	8000273a <twim_master_init+0x5e>
      cpu_irq_enable();
80002738:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
8000273a:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000273e:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80002740:	f0 09 18 00 	cp.b	r9,r8
80002744:	f9 b8 01 10 	movne	r8,16
80002748:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
8000274c:	f9 b8 01 ff 	movne	r8,-1
80002750:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80002754:	6a 0a       	ld.w	r10,r5[0x0]
80002756:	6a 1b       	ld.w	r11,r5[0x4]
80002758:	0e 9c       	mov	r12,r7
8000275a:	f0 1f 00 0f 	mcall	80002794 <twim_master_init+0xb8>
8000275e:	5b 8c       	cp.w	r12,-8
80002760:	c1 00       	breq	80002780 <twim_master_init+0xa4>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80002762:	6a 2b       	ld.w	r11,r5[0x8]
80002764:	0e 9c       	mov	r12,r7
80002766:	f0 1f 00 0d 	mcall	80002798 <twim_master_init+0xbc>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000276a:	48 88       	lddpc	r8,80002788 <twim_master_init+0xac>
8000276c:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
8000276e:	5b c8       	cp.w	r8,-4
80002770:	c0 70       	breq	8000277e <twim_master_init+0xa2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002772:	48 68       	lddpc	r8,80002788 <twim_master_init+0xac>
80002774:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80002776:	5b e8       	cp.w	r8,-2
80002778:	c0 30       	breq	8000277e <twim_master_init+0xa2>
8000277a:	30 0c       	mov	r12,0
8000277c:	c0 28       	rjmp	80002780 <twim_master_init+0xa4>
8000277e:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
80002780:	2f fd       	sub	sp,-4
80002782:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002786:	00 00       	add	r0,r0
80002788:	00 00       	add	r0,r0
8000278a:	00 18       	sub	r8,r0
8000278c:	80 00       	ld.sh	r0,r0[0x0]
8000278e:	23 d0       	sub	r0,61
80002790:	80 00       	ld.sh	r0,r0[0x0]
80002792:	27 9c       	sub	r12,121
80002794:	80 00       	ld.sh	r0,r0[0x0]
80002796:	24 ac       	sub	r12,74
80002798:	80 00       	ld.sh	r0,r0[0x0]
8000279a:	25 e8       	sub	r8,94

8000279c <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000279c:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800027a0:	49 99       	lddpc	r9,80002804 <INTC_register_interrupt+0x68>
800027a2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800027a6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800027aa:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800027ac:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800027b0:	58 0a       	cp.w	r10,0
800027b2:	c0 91       	brne	800027c4 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800027b4:	49 59       	lddpc	r9,80002808 <INTC_register_interrupt+0x6c>
800027b6:	49 6a       	lddpc	r10,8000280c <INTC_register_interrupt+0x70>
800027b8:	12 1a       	sub	r10,r9
800027ba:	fe 79 10 00 	mov	r9,-61440
800027be:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800027c2:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800027c4:	58 1a       	cp.w	r10,1
800027c6:	c0 a1       	brne	800027da <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800027c8:	49 09       	lddpc	r9,80002808 <INTC_register_interrupt+0x6c>
800027ca:	49 2a       	lddpc	r10,80002810 <INTC_register_interrupt+0x74>
800027cc:	12 1a       	sub	r10,r9
800027ce:	bf aa       	sbr	r10,0x1e
800027d0:	fe 79 10 00 	mov	r9,-61440
800027d4:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800027d8:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800027da:	58 2a       	cp.w	r10,2
800027dc:	c0 a1       	brne	800027f0 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800027de:	48 b9       	lddpc	r9,80002808 <INTC_register_interrupt+0x6c>
800027e0:	48 da       	lddpc	r10,80002814 <INTC_register_interrupt+0x78>
800027e2:	12 1a       	sub	r10,r9
800027e4:	bf ba       	sbr	r10,0x1f
800027e6:	fe 79 10 00 	mov	r9,-61440
800027ea:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800027ee:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800027f0:	48 69       	lddpc	r9,80002808 <INTC_register_interrupt+0x6c>
800027f2:	48 aa       	lddpc	r10,80002818 <INTC_register_interrupt+0x7c>
800027f4:	12 1a       	sub	r10,r9
800027f6:	ea 1a c0 00 	orh	r10,0xc000
800027fa:	fe 79 10 00 	mov	r9,-61440
800027fe:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002802:	5e fc       	retal	r12
80002804:	80 00       	ld.sh	r0,r0[0x0]
80002806:	2c 30       	sub	r0,-61
80002808:	80 00       	ld.sh	r0,r0[0x0]
8000280a:	2a 00       	sub	r0,-96
8000280c:	80 00       	ld.sh	r0,r0[0x0]
8000280e:	2b 04       	sub	r4,-80
80002810:	80 00       	ld.sh	r0,r0[0x0]
80002812:	2b 10       	sub	r0,-79
80002814:	80 00       	ld.sh	r0,r0[0x0]
80002816:	2b 1c       	sub	r12,-79
80002818:	80 00       	ld.sh	r0,r0[0x0]
8000281a:	2b 28       	sub	r8,-78

8000281c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000281c:	fe 78 10 00 	mov	r8,-61440
80002820:	e0 69 00 83 	mov	r9,131
80002824:	f2 0c 01 0c 	sub	r12,r9,r12
80002828:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000282c:	f2 ca ff c0 	sub	r10,r9,-64
80002830:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002834:	58 08       	cp.w	r8,0
80002836:	c0 21       	brne	8000283a <_get_interrupt_handler+0x1e>
80002838:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000283a:	f0 08 12 00 	clz	r8,r8
8000283e:	48 5a       	lddpc	r10,80002850 <_get_interrupt_handler+0x34>
80002840:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002844:	f0 08 11 1f 	rsub	r8,r8,31
80002848:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000284a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000284e:	5e fc       	retal	r12
80002850:	80 00       	ld.sh	r0,r0[0x0]
80002852:	2c 30       	sub	r0,-61

80002854 <_stext>:
80002854:	e0 6d 40 00 	mov	sp,16384
80002858:	fe c0 fe 58 	sub	r0,pc,-424
8000285c:	e3 b0 00 01 	mtsr	0x4,r0
80002860:	d5 53       	csrf	0x15
80002862:	30 40       	mov	r0,4
80002864:	30 81       	mov	r1,8
80002866:	02 30       	cp.w	r0,r1
80002868:	c0 72       	brcc	80002876 <idata_load_loop_end>
8000286a:	fe c2 fb 82 	sub	r2,pc,-1150

8000286e <idata_load_loop>:
8000286e:	a5 05       	ld.d	r4,r2++
80002870:	a1 24       	st.d	r0++,r4
80002872:	02 30       	cp.w	r0,r1
80002874:	cf d3       	brcs	8000286e <idata_load_loop>

80002876 <idata_load_loop_end>:
80002876:	30 80       	mov	r0,8
80002878:	e0 61 01 00 	mov	r1,256
8000287c:	02 30       	cp.w	r0,r1
8000287e:	c0 62       	brcc	8000288a <udata_clear_loop_end>
80002880:	30 02       	mov	r2,0
80002882:	30 03       	mov	r3,0

80002884 <udata_clear_loop>:
80002884:	a1 22       	st.d	r0++,r2
80002886:	02 30       	cp.w	r0,r1
80002888:	cf e3       	brcs	80002884 <udata_clear_loop>

8000288a <udata_clear_loop_end>:
8000288a:	fe cf ff ce 	sub	pc,pc,-50
8000288e:	d7 03       	nop

80002890 <board_init>:
#include <board.h>
#include <conf_board.h>
#include "sensor.h"

void board_init(void)
{
80002890:	d4 01       	pushm	lr
	sysclk_init();
80002892:	f0 1f 00 08 	mcall	800028b0 <board_init+0x20>
80002896:	30 6b       	mov	r11,6
80002898:	30 2c       	mov	r12,2
8000289a:	f0 1f 00 07 	mcall	800028b4 <board_init+0x24>
	ioport_init();
	sensor_init();
8000289e:	f0 1f 00 07 	mcall	800028b8 <board_init+0x28>

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
800028a2:	fc 19 00 80 	movh	r9,0x80
800028a6:	fe 78 28 00 	mov	r8,-55296
800028aa:	f1 49 00 44 	st.w	r8[68],r9
	
	ioport_set_pin_dir(LED_TRANS, IOPORT_DIR_OUTPUT);
	
}
800028ae:	d8 02       	popm	pc
800028b0:	80 00       	ld.sh	r0,r0[0x0]
800028b2:	23 4c       	sub	r12,52
800028b4:	80 00       	ld.sh	r0,r0[0x0]
800028b6:	23 8c       	sub	r12,56
800028b8:	80 00       	ld.sh	r0,r0[0x0]
800028ba:	21 bc       	sub	r12,27

800028bc <main>:
#include "settings_t.h"
#include "motor_control.h"
#include "sensor.h"

int main (void)
{
800028bc:	d4 01       	pushm	lr
800028be:	fa cd 00 90 	sub	sp,sp,144
	board_init();		
800028c2:	f0 1f 00 28 	mcall	80002960 <main+0xa4>

		uint8_t page_0[106];
		read_sensor_data(BNO055_CHIP_ID_ADDR, &page_0, 106);
800028c6:	36 aa       	mov	r10,106
800028c8:	fa cb ff dc 	sub	r11,sp,-36
800028cc:	30 0c       	mov	r12,0
800028ce:	f0 1f 00 26 	mcall	80002964 <main+0xa8>
		
		uint8_t val[2] = {BNO055_PAGE_ID_ADDR, BNO055_PAGE_ONE}; //CHANGE PAGE
800028d2:	4a 68       	lddpc	r8,80002968 <main+0xac>
800028d4:	90 08       	ld.sh	r8,r8[0x0]
800028d6:	fb 58 00 20 	st.h	sp[32],r8
		write_sensor_data(BNO055_PAGE_ID_ADDR, &val, 2);
800028da:	30 2a       	mov	r10,2
800028dc:	fa cb ff e0 	sub	r11,sp,-32
800028e0:	30 7c       	mov	r12,7
800028e2:	f0 1f 00 23 	mcall	8000296c <main+0xb0>
		
		uint8_t page_1[31];
		read_sensor_data(BNO055_CHIP_ID_ADDR, &page_1, 31);
800028e6:	31 fa       	mov	r10,31
800028e8:	1a 9b       	mov	r11,sp
800028ea:	30 0c       	mov	r12,0
800028ec:	f0 1f 00 1e 	mcall	80002964 <main+0xa8>
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
800028f0:	fe 7e 28 00 	mov	lr,-55296
800028f4:	fc 1c 00 80 	movh	r12,0x80
800028f8:	e0 6b e1 c0 	mov	r11,57792
800028fc:	ea 1b 00 e4 	orh	r11,0xe4
80002900:	fd 4c 00 58 	st.w	lr[88],r12
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002904:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002908:	f0 0b 00 0a 	add	r10,r8,r11
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000290c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002910:	14 38       	cp.w	r8,r10
80002912:	e0 88 00 08 	brls	80002922 <main+0x66>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002916:	12 38       	cp.w	r8,r9
80002918:	fe 98 ff fa 	brls	8000290c <main+0x50>
8000291c:	12 3a       	cp.w	r10,r9
8000291e:	c1 93       	brcs	80002950 <main+0x94>
80002920:	cf 6b       	rjmp	8000290c <main+0x50>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002922:	12 38       	cp.w	r8,r9
80002924:	e0 8b 00 16 	brhi	80002950 <main+0x94>
80002928:	12 3a       	cp.w	r10,r9
8000292a:	c1 33       	brcs	80002950 <main+0x94>
8000292c:	cf 0b       	rjmp	8000290c <main+0x50>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000292e:	e1 ba 00 42 	mfsr	r10,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002932:	12 38       	cp.w	r8,r9
80002934:	e0 88 00 08 	brls	80002944 <main+0x88>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002938:	14 38       	cp.w	r8,r10
8000293a:	fe 98 ff fa 	brls	8000292e <main+0x72>
8000293e:	14 39       	cp.w	r9,r10
80002940:	ce 03       	brcs	80002900 <main+0x44>
80002942:	cf 6b       	rjmp	8000292e <main+0x72>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002944:	14 38       	cp.w	r8,r10
80002946:	fe 9b ff dd 	brhi	80002900 <main+0x44>
8000294a:	14 39       	cp.w	r9,r10
8000294c:	cd a3       	brcs	80002900 <main+0x44>
8000294e:	cf 0b       	rjmp	8000292e <main+0x72>

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002950:	fd 4c 00 54 	st.w	lr[84],r12
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002954:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002958:	f0 0b 00 09 	add	r9,r8,r11
8000295c:	ce 9b       	rjmp	8000292e <main+0x72>
8000295e:	00 00       	add	r0,r0
80002960:	80 00       	ld.sh	r0,r0[0x0]
80002962:	28 90       	sub	r0,-119
80002964:	80 00       	ld.sh	r0,r0[0x0]
80002966:	21 a8       	sub	r8,26
80002968:	80 00       	ld.sh	r0,r0[0x0]
8000296a:	2c e0       	sub	r0,-50
8000296c:	80 00       	ld.sh	r0,r0[0x0]
8000296e:	21 94       	sub	r4,25

Disassembly of section .exception:

80002a00 <_evba>:
80002a00:	c0 08       	rjmp	80002a00 <_evba>
	...

80002a04 <_handle_TLB_Multiple_Hit>:
80002a04:	c0 08       	rjmp	80002a04 <_handle_TLB_Multiple_Hit>
	...

80002a08 <_handle_Bus_Error_Data_Fetch>:
80002a08:	c0 08       	rjmp	80002a08 <_handle_Bus_Error_Data_Fetch>
	...

80002a0c <_handle_Bus_Error_Instruction_Fetch>:
80002a0c:	c0 08       	rjmp	80002a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80002a10 <_handle_NMI>:
80002a10:	c0 08       	rjmp	80002a10 <_handle_NMI>
	...

80002a14 <_handle_Instruction_Address>:
80002a14:	c0 08       	rjmp	80002a14 <_handle_Instruction_Address>
	...

80002a18 <_handle_ITLB_Protection>:
80002a18:	c0 08       	rjmp	80002a18 <_handle_ITLB_Protection>
	...

80002a1c <_handle_Breakpoint>:
80002a1c:	c0 08       	rjmp	80002a1c <_handle_Breakpoint>
	...

80002a20 <_handle_Illegal_Opcode>:
80002a20:	c0 08       	rjmp	80002a20 <_handle_Illegal_Opcode>
	...

80002a24 <_handle_Unimplemented_Instruction>:
80002a24:	c0 08       	rjmp	80002a24 <_handle_Unimplemented_Instruction>
	...

80002a28 <_handle_Privilege_Violation>:
80002a28:	c0 08       	rjmp	80002a28 <_handle_Privilege_Violation>
	...

80002a2c <_handle_Floating_Point>:
80002a2c:	c0 08       	rjmp	80002a2c <_handle_Floating_Point>
	...

80002a30 <_handle_Coprocessor_Absent>:
80002a30:	c0 08       	rjmp	80002a30 <_handle_Coprocessor_Absent>
	...

80002a34 <_handle_Data_Address_Read>:
80002a34:	c0 08       	rjmp	80002a34 <_handle_Data_Address_Read>
	...

80002a38 <_handle_Data_Address_Write>:
80002a38:	c0 08       	rjmp	80002a38 <_handle_Data_Address_Write>
	...

80002a3c <_handle_DTLB_Protection_Read>:
80002a3c:	c0 08       	rjmp	80002a3c <_handle_DTLB_Protection_Read>
	...

80002a40 <_handle_DTLB_Protection_Write>:
80002a40:	c0 08       	rjmp	80002a40 <_handle_DTLB_Protection_Write>
	...

80002a44 <_handle_DTLB_Modified>:
80002a44:	c0 08       	rjmp	80002a44 <_handle_DTLB_Modified>
	...

80002a50 <_handle_ITLB_Miss>:
80002a50:	c0 08       	rjmp	80002a50 <_handle_ITLB_Miss>
	...

80002a60 <_handle_DTLB_Miss_Read>:
80002a60:	c0 08       	rjmp	80002a60 <_handle_DTLB_Miss_Read>
	...

80002a70 <_handle_DTLB_Miss_Write>:
80002a70:	c0 08       	rjmp	80002a70 <_handle_DTLB_Miss_Write>
	...

80002b00 <_handle_Supervisor_Call>:
80002b00:	c0 08       	rjmp	80002b00 <_handle_Supervisor_Call>
80002b02:	d7 03       	nop

80002b04 <_int0>:
80002b04:	30 0c       	mov	r12,0
80002b06:	c8 be       	rcall	8000281c <_get_interrupt_handler>
80002b08:	58 0c       	cp.w	r12,0
80002b0a:	f8 0f 17 10 	movne	pc,r12
80002b0e:	d6 03       	rete

80002b10 <_int1>:
80002b10:	30 1c       	mov	r12,1
80002b12:	c8 5e       	rcall	8000281c <_get_interrupt_handler>
80002b14:	58 0c       	cp.w	r12,0
80002b16:	f8 0f 17 10 	movne	pc,r12
80002b1a:	d6 03       	rete

80002b1c <_int2>:
80002b1c:	30 2c       	mov	r12,2
80002b1e:	c7 fe       	rcall	8000281c <_get_interrupt_handler>
80002b20:	58 0c       	cp.w	r12,0
80002b22:	f8 0f 17 10 	movne	pc,r12
80002b26:	d6 03       	rete

80002b28 <_int3>:
80002b28:	30 3c       	mov	r12,3
80002b2a:	c7 9e       	rcall	8000281c <_get_interrupt_handler>
80002b2c:	58 0c       	cp.w	r12,0
80002b2e:	f8 0f 17 10 	movne	pc,r12
80002b32:	d6 03       	rete
80002b34:	d7 03       	nop
80002b36:	d7 03       	nop
80002b38:	d7 03       	nop
80002b3a:	d7 03       	nop
80002b3c:	d7 03       	nop
80002b3e:	d7 03       	nop
80002b40:	d7 03       	nop
80002b42:	d7 03       	nop
80002b44:	d7 03       	nop
80002b46:	d7 03       	nop
80002b48:	d7 03       	nop
80002b4a:	d7 03       	nop
80002b4c:	d7 03       	nop
80002b4e:	d7 03       	nop
80002b50:	d7 03       	nop
80002b52:	d7 03       	nop
80002b54:	d7 03       	nop
80002b56:	d7 03       	nop
80002b58:	d7 03       	nop
80002b5a:	d7 03       	nop
80002b5c:	d7 03       	nop
80002b5e:	d7 03       	nop
80002b60:	d7 03       	nop
80002b62:	d7 03       	nop
80002b64:	d7 03       	nop
80002b66:	d7 03       	nop
80002b68:	d7 03       	nop
80002b6a:	d7 03       	nop
80002b6c:	d7 03       	nop
80002b6e:	d7 03       	nop
80002b70:	d7 03       	nop
80002b72:	d7 03       	nop
80002b74:	d7 03       	nop
80002b76:	d7 03       	nop
80002b78:	d7 03       	nop
80002b7a:	d7 03       	nop
80002b7c:	d7 03       	nop
80002b7e:	d7 03       	nop
80002b80:	d7 03       	nop
80002b82:	d7 03       	nop
80002b84:	d7 03       	nop
80002b86:	d7 03       	nop
80002b88:	d7 03       	nop
80002b8a:	d7 03       	nop
80002b8c:	d7 03       	nop
80002b8e:	d7 03       	nop
80002b90:	d7 03       	nop
80002b92:	d7 03       	nop
80002b94:	d7 03       	nop
80002b96:	d7 03       	nop
80002b98:	d7 03       	nop
80002b9a:	d7 03       	nop
80002b9c:	d7 03       	nop
80002b9e:	d7 03       	nop
80002ba0:	d7 03       	nop
80002ba2:	d7 03       	nop
80002ba4:	d7 03       	nop
80002ba6:	d7 03       	nop
80002ba8:	d7 03       	nop
80002baa:	d7 03       	nop
80002bac:	d7 03       	nop
80002bae:	d7 03       	nop
80002bb0:	d7 03       	nop
80002bb2:	d7 03       	nop
80002bb4:	d7 03       	nop
80002bb6:	d7 03       	nop
80002bb8:	d7 03       	nop
80002bba:	d7 03       	nop
80002bbc:	d7 03       	nop
80002bbe:	d7 03       	nop
80002bc0:	d7 03       	nop
80002bc2:	d7 03       	nop
80002bc4:	d7 03       	nop
80002bc6:	d7 03       	nop
80002bc8:	d7 03       	nop
80002bca:	d7 03       	nop
80002bcc:	d7 03       	nop
80002bce:	d7 03       	nop
80002bd0:	d7 03       	nop
80002bd2:	d7 03       	nop
80002bd4:	d7 03       	nop
80002bd6:	d7 03       	nop
80002bd8:	d7 03       	nop
80002bda:	d7 03       	nop
80002bdc:	d7 03       	nop
80002bde:	d7 03       	nop
80002be0:	d7 03       	nop
80002be2:	d7 03       	nop
80002be4:	d7 03       	nop
80002be6:	d7 03       	nop
80002be8:	d7 03       	nop
80002bea:	d7 03       	nop
80002bec:	d7 03       	nop
80002bee:	d7 03       	nop
80002bf0:	d7 03       	nop
80002bf2:	d7 03       	nop
80002bf4:	d7 03       	nop
80002bf6:	d7 03       	nop
80002bf8:	d7 03       	nop
80002bfa:	d7 03       	nop
80002bfc:	d7 03       	nop
80002bfe:	d7 03       	nop
