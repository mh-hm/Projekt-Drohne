
Regler 2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000a04  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002c00  80002c00  00003000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000e4  80002e00  80002e00  00003200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80002ee4  80002ee4  000032e4  2**0
                  ALLOC
  6 .data         00000004  00000004  80002ee8  00003404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000f8  00000008  80002eec  00003408  2**2
                  ALLOC
  8 .comment      00000030  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000560  00000000  00000000  00003438  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00000f93  00000000  00000000  00003998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000b204  00000000  00000000  0000492b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001669  00000000  00000000  0000fb2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005b0f  00000000  00000000  00011198  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000cc8  00000000  00000000  00016ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003872  00000000  00000000  00017970  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00001f76  00000000  00000000  0001b1e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00919735  00000000  00000000  0001d158  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 19 .debug_ranges 000005f0  00000000  00000000  00936890  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe cf f7 14 	sub	pc,pc,-2284

Disassembly of section .text:

80002004 <flashcdw_set_wait_state>:
80002004:	fe 68 14 00 	mov	r8,-125952
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002008:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
8000200a:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
8000200e:	91 09       	st.w	r8[0x0],r9
}
80002010:	5e fc       	retal	r12

80002012 <flashcdw_is_ready>:
//! @{


bool flashcdw_is_ready(void)
{
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
80002012:	fe 68 14 00 	mov	r8,-125952
80002016:	70 2c       	ld.w	r12,r8[0x8]
}
80002018:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000201c:	5e fc       	retal	r12
8000201e:	d7 03       	nop

80002020 <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
80002020:	d4 01       	pushm	lr
	while (!flashcdw_is_ready());
80002022:	f0 1f 00 03 	mcall	8000202c <flashcdw_default_wait_until_ready+0xc>
80002026:	cf e0       	breq	80002022 <flashcdw_default_wait_until_ready+0x2>
}
80002028:	d8 02       	popm	pc
8000202a:	00 00       	add	r0,r0
8000202c:	80 00       	ld.sh	r0,r0[0x0]
8000202e:	20 12       	sub	r2,1

80002030 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80002030:	eb cd 40 c0 	pushm	r6-r7,lr
80002034:	18 96       	mov	r6,r12
80002036:	16 97       	mov	r7,r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80002038:	48 e8       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
8000203a:	70 08       	ld.w	r8,r8[0x0]
8000203c:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
8000203e:	fe 68 14 00 	mov	r8,-125952
80002042:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80002044:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
80002048:	58 07       	cp.w	r7,0
8000204a:	c0 35       	brlt	80002050 <flashcdw_issue_command+0x20>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
8000204c:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
80002050:	3a 59       	mov	r9,-91
80002052:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80002056:	fe 69 14 00 	mov	r9,-125952
8000205a:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
8000205c:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
	flashcdw_error_status = flashcdw_get_error_status();
8000205e:	e2 19 00 0c 	andl	r9,0xc,COH
80002062:	48 58       	lddpc	r8,80002074 <flashcdw_issue_command+0x44>
80002064:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80002066:	48 38       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
80002068:	70 08       	ld.w	r8,r8[0x0]
8000206a:	5d 18       	icall	r8
}
8000206c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002070:	00 00       	add	r0,r0
80002072:	00 04       	add	r4,r0
80002074:	00 00       	add	r0,r0
80002076:	00 08       	add	r8,r0

80002078 <flashcdw_set_flash_waitstate_and_readmode>:
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
}


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80002078:	d4 01       	pushm	lr
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
8000207a:	e0 68 e1 c0 	mov	r8,57792
8000207e:	ea 18 00 e4 	orh	r8,0xe4
80002082:	10 3c       	cp.w	r12,r8
80002084:	e0 88 00 19 	brls	800020b6 <flashcdw_set_flash_waitstate_and_readmode+0x3e>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
80002088:	e0 68 c3 80 	mov	r8,50048
8000208c:	ea 18 01 c9 	orh	r8,0x1c9
80002090:	10 3c       	cp.w	r12,r8
80002092:	e0 8b 00 0a 	brhi	800020a6 <flashcdw_set_flash_waitstate_and_readmode+0x2e>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
80002096:	30 1c       	mov	r12,1
80002098:	f0 1f 00 0c 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
8000209c:	3f fb       	mov	r11,-1
8000209e:	31 1c       	mov	r12,17
800020a0:	f0 1f 00 0b 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020a4:	d8 02       	popm	pc
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
800020a6:	30 1c       	mov	r12,1
800020a8:	f0 1f 00 08 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
800020ac:	3f fb       	mov	r11,-1
800020ae:	31 0c       	mov	r12,16
800020b0:	f0 1f 00 07 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020b4:	d8 02       	popm	pc
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
800020b6:	30 0c       	mov	r12,0
800020b8:	f0 1f 00 04 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
800020bc:	3f fb       	mov	r11,-1
800020be:	31 1c       	mov	r12,17
800020c0:	f0 1f 00 03 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020c4:	d8 02       	popm	pc
800020c6:	00 00       	add	r0,r0
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	20 04       	sub	r4,0
800020cc:	80 00       	ld.sh	r0,r0[0x0]
800020ce:	20 30       	sub	r0,3

800020d0 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800020d0:	f8 08 16 05 	lsr	r8,r12,0x5
800020d4:	a9 78       	lsl	r8,0x9
800020d6:	e0 28 d8 00 	sub	r8,55296

	/* Enable the correct function. */
	switch (function) {
800020da:	58 7b       	cp.w	r11,7
800020dc:	e0 8b 00 05 	brhi	800020e6 <gpio_enable_module_pin+0x16>
800020e0:	4a 09       	lddpc	r9,80002160 <gpio_enable_module_pin+0x90>
800020e2:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
800020e6:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800020e8:	30 19       	mov	r9,1
800020ea:	f2 0c 09 49 	lsl	r9,r9,r12
800020ee:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020f0:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800020f2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800020f4:	c3 18       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800020f6:	30 19       	mov	r9,1
800020f8:	f2 0c 09 49 	lsl	r9,r9,r12
800020fc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020fe:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002100:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002102:	c2 a8       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002104:	30 19       	mov	r9,1
80002106:	f2 0c 09 49 	lsl	r9,r9,r12
8000210a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000210c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000210e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002110:	c2 38       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002112:	30 19       	mov	r9,1
80002114:	f2 0c 09 49 	lsl	r9,r9,r12
80002118:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000211a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000211c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000211e:	c1 c8       	rjmp	80002156 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002120:	30 19       	mov	r9,1
80002122:	f2 0c 09 49 	lsl	r9,r9,r12
80002126:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002128:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000212a:	91 d9       	st.w	r8[0x34],r9
		break;
8000212c:	c1 58       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000212e:	30 19       	mov	r9,1
80002130:	f2 0c 09 49 	lsl	r9,r9,r12
80002134:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002136:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002138:	91 d9       	st.w	r8[0x34],r9
		break;
8000213a:	c0 e8       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000213c:	30 19       	mov	r9,1
8000213e:	f2 0c 09 49 	lsl	r9,r9,r12
80002142:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002144:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002146:	91 d9       	st.w	r8[0x34],r9
		break;
80002148:	c0 78       	rjmp	80002156 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000214a:	30 19       	mov	r9,1
8000214c:	f2 0c 09 49 	lsl	r9,r9,r12
80002150:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002152:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002154:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002156:	30 19       	mov	r9,1
80002158:	f2 0c 09 4c 	lsl	r12,r9,r12
8000215c:	91 2c       	st.w	r8[0x8],r12
8000215e:	5e fd       	retal	0
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	2e 00       	sub	r0,-32

80002164 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002164:	d4 21       	pushm	r4-r7,lr
80002166:	18 97       	mov	r7,r12
80002168:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000216a:	58 0b       	cp.w	r11,0
8000216c:	c0 31       	brne	80002172 <gpio_enable_module+0xe>
8000216e:	30 05       	mov	r5,0
80002170:	c0 d8       	rjmp	8000218a <gpio_enable_module+0x26>
80002172:	30 06       	mov	r6,0
80002174:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002176:	6e 1b       	ld.w	r11,r7[0x4]
80002178:	6e 0c       	ld.w	r12,r7[0x0]
8000217a:	f0 1f 00 06 	mcall	80002190 <gpio_enable_module+0x2c>
8000217e:	18 45       	or	r5,r12
		gpiomap++;
80002180:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002182:	2f f6       	sub	r6,-1
80002184:	0c 34       	cp.w	r4,r6
80002186:	fe 9b ff f8 	brhi	80002176 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000218a:	0a 9c       	mov	r12,r5
8000218c:	d8 22       	popm	r4-r7,pc
8000218e:	00 00       	add	r0,r0
80002190:	80 00       	ld.sh	r0,r0[0x0]
80002192:	20 d0       	sub	r0,13

80002194 <write_sensor_data>:
	twim_write(TWI_SENS,(uint_fast8_t) _addr, 1, BNO055_TWI_ADDR_SENSOR, false);
	return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
}

status_code_t write_sensor_data(bno055_register_addr_t _addr, uint8_t *values, uint_fast8_t count)
{
80002194:	eb cd 40 c0 	pushm	r6-r7,lr
80002198:	16 97       	mov	r7,r11
8000219a:	14 96       	mov	r6,r10
	//TODO: WRITE START ADDR _addr_t TO SENSOR BEFOR WRITING
	twim_write(TWI_SENS,(uint_fast8_t)  _addr, 1, BNO055_TWI_ADDR_SENSOR, false);
8000219c:	30 08       	mov	r8,0
8000219e:	32 89       	mov	r9,40
800021a0:	30 1a       	mov	r10,1
800021a2:	18 9b       	mov	r11,r12
800021a4:	fe 7c 40 00 	mov	r12,-49152
800021a8:	f0 1f 00 06 	mcall	800021c0 <write_sensor_data+0x2c>
	return twim_write(TWI_SENS, values, count, BNO055_TWI_ADDR_SENSOR, false);
800021ac:	30 08       	mov	r8,0
800021ae:	32 89       	mov	r9,40
800021b0:	0c 9a       	mov	r10,r6
800021b2:	0e 9b       	mov	r11,r7
800021b4:	fe 7c 40 00 	mov	r12,-49152
800021b8:	f0 1f 00 02 	mcall	800021c0 <write_sensor_data+0x2c>
}
800021bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021c0:	80 00       	ld.sh	r0,r0[0x0]
800021c2:	25 cc       	sub	r12,92

800021c4 <read_sensor_data>:
		(BNO055_EULER_UNIT_DEG << BNO055_EULER_UNIT_POS) & \	
		(BNO055_TEMP_UNIT_CELSIUS << BNO055_TEMP_UNIT_POS); 
	write_sensor_data(BNO055_UNIT_SEL_ADDR, _units, 1);					
}

status_code_t read_sensor_data(bno055_register_addr_t _addr, uint8_t *values, uint_fast32_t count){
800021c4:	eb cd 40 c0 	pushm	r6-r7,lr
800021c8:	16 97       	mov	r7,r11
800021ca:	14 96       	mov	r6,r10
	//TODO: WRITE START ADDR _addr_t TO SENSOR BEFOR READIN
	twim_write(TWI_SENS,(uint_fast8_t) _addr, 1, BNO055_TWI_ADDR_SENSOR, false);
800021cc:	30 08       	mov	r8,0
800021ce:	32 89       	mov	r9,40
800021d0:	30 1a       	mov	r10,1
800021d2:	18 9b       	mov	r11,r12
800021d4:	fe 7c 40 00 	mov	r12,-49152
800021d8:	f0 1f 00 06 	mcall	800021f0 <read_sensor_data+0x2c>
	return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
800021dc:	30 08       	mov	r8,0
800021de:	32 89       	mov	r9,40
800021e0:	0c 9a       	mov	r10,r6
800021e2:	0e 9b       	mov	r11,r7
800021e4:	fe 7c 40 00 	mov	r12,-49152
800021e8:	f0 1f 00 03 	mcall	800021f4 <read_sensor_data+0x30>
}
800021ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021f0:	80 00       	ld.sh	r0,r0[0x0]
800021f2:	25 cc       	sub	r12,92
800021f4:	80 00       	ld.sh	r0,r0[0x0]
800021f6:	26 9c       	sub	r12,105

800021f8 <sensor_init>:
 *  Author: Markus
 */ 
#include "asf.h"
#include "sensor.h" 

void sensor_init(void){
800021f8:	d4 01       	pushm	lr
800021fa:	20 4d       	sub	sp,16

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
800021fc:	fe 78 28 00 	mov	r8,-55296
80002200:	e0 7a 00 00 	mov	r10,65536
80002204:	f1 4a 00 44 	st.w	r8[68],r10
80002208:	e0 69 01 00 	mov	r9,256
8000220c:	f1 49 00 44 	st.w	r8[68],r9
				pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->oderc = arch_ioport_pin_to_mask(
80002210:	e0 6b 20 00 	mov	r11,8192
80002214:	f1 4b 00 48 	st.w	r8[72],r11
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002218:	f1 4a 00 58 	st.w	r8[88],r10
8000221c:	f1 49 00 58 	st.w	r8[88],r9
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80002220:	30 bb       	mov	r11,11
80002222:	30 2c       	mov	r12,2
80002224:	f0 1f 00 3f 	mcall	80002320 <sensor_init+0x128>
	ioport_set_pin_level(RST_SENS, LOW);
	
	sysclk_enable_peripheral_clock(TWI_SENS);
	
	static const gpio_map_t TWI_GPIO_MAP =	{{SDA_SENS, 0},{SCL_SENS, 0}};	 //TODO: DEFINE FUNCTION_A 0
	gpio_enable_module(TWI_GPIO_MAP,2);
80002228:	30 2b       	mov	r11,2
8000222a:	4b fc       	lddpc	r12,80002324 <sensor_init+0x12c>
8000222c:	f0 1f 00 3f 	mcall	80002328 <sensor_init+0x130>
		
	twim_options_t _twi_opt;
	_twi_opt.chip = BNO055_TWI_ADDR_SENSOR;
80002230:	32 88       	mov	r8,40
80002232:	50 28       	stdsp	sp[0x8],r8
	_twi_opt.pba_hz = sysclk_get_pba_hz();
80002234:	e0 68 c3 80 	mov	r8,50048
80002238:	ea 18 01 c9 	orh	r8,0x1c9
8000223c:	50 08       	stdsp	sp[0x0],r8
	_twi_opt.smbus = false;
8000223e:	30 08       	mov	r8,0
80002240:	fb 68 00 0c 	st.b	sp[12],r8
	_twi_opt.speed = TWI_SENS_SPEED;
80002244:	e6 68 1a 80 	mov	r8,400000
80002248:	50 18       	stdsp	sp[0x4],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000224a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000224e:	e2 69 49 f0 	mov	r9,150000
80002252:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002256:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000225a:	14 38       	cp.w	r8,r10
8000225c:	e0 88 00 08 	brls	8000226c <sensor_init+0x74>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002260:	12 38       	cp.w	r8,r9
80002262:	fe 98 ff fa 	brls	80002256 <sensor_init+0x5e>
80002266:	12 3a       	cp.w	r10,r9
80002268:	c2 a3       	brcs	800022bc <sensor_init+0xc4>
8000226a:	cf 6b       	rjmp	80002256 <sensor_init+0x5e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000226c:	12 38       	cp.w	r8,r9
8000226e:	e0 8b 00 27 	brhi	800022bc <sensor_init+0xc4>
80002272:	12 3a       	cp.w	r10,r9
80002274:	c2 43       	brcs	800022bc <sensor_init+0xc4>
80002276:	cf 0b       	rjmp	80002256 <sensor_init+0x5e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002278:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000227c:	14 38       	cp.w	r8,r10
8000227e:	e0 88 00 08 	brls	8000228e <sensor_init+0x96>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002282:	12 38       	cp.w	r8,r9
80002284:	fe 98 ff fa 	brls	80002278 <sensor_init+0x80>
80002288:	12 3a       	cp.w	r10,r9
8000228a:	c2 83       	brcs	800022da <sensor_init+0xe2>
8000228c:	cf 6b       	rjmp	80002278 <sensor_init+0x80>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000228e:	12 38       	cp.w	r8,r9
80002290:	e0 8b 00 25 	brhi	800022da <sensor_init+0xe2>
80002294:	12 3a       	cp.w	r10,r9
80002296:	c2 23       	brcs	800022da <sensor_init+0xe2>
80002298:	cf 0b       	rjmp	80002278 <sensor_init+0x80>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000229a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000229e:	14 38       	cp.w	r8,r10
800022a0:	e0 88 00 08 	brls	800022b0 <sensor_init+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022a4:	12 38       	cp.w	r8,r9
800022a6:	fe 98 ff fa 	brls	8000229a <sensor_init+0xa2>
800022aa:	12 3a       	cp.w	r10,r9
800022ac:	c2 83       	brcs	800022fc <sensor_init+0x104>
800022ae:	cf 6b       	rjmp	8000229a <sensor_init+0xa2>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022b0:	12 38       	cp.w	r8,r9
800022b2:	e0 8b 00 25 	brhi	800022fc <sensor_init+0x104>
800022b6:	12 3a       	cp.w	r10,r9
800022b8:	c2 23       	brcs	800022fc <sensor_init+0x104>
800022ba:	cf 0b       	rjmp	8000229a <sensor_init+0xa2>

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
800022bc:	e0 69 01 00 	mov	r9,256
800022c0:	fe 78 28 00 	mov	r8,-55296
800022c4:	f1 49 00 54 	st.w	r8[84],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022c8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022cc:	e0 6a 6f 40 	mov	r10,28480
800022d0:	ea 1a 01 40 	orh	r10,0x140
800022d4:	f0 0a 00 0a 	add	r10,r8,r10
800022d8:	cd 0b       	rjmp	80002278 <sensor_init+0x80>
	
	delay_ms(5);
	ioport_set_pin_level(RST_SENS, HIGH);
	delay_ms(BNO055_STARTUP_TIME_MS);							//SENSOR STARTUP TIME
	twim_master_init(TWI_SENS, &_twi_opt);
800022da:	1a 9b       	mov	r11,sp
800022dc:	fe 7c 40 00 	mov	r12,-49152
800022e0:	f0 1f 00 13 	mcall	8000232c <sensor_init+0x134>
	
	//Konfigurieren des Sensores
	write_sensor_data(BNO055_OPR_MODE_ADDR, BNO055_OPERATION_MODE_NDOF,1);
800022e4:	30 1a       	mov	r10,1
800022e6:	30 cb       	mov	r11,12
800022e8:	33 dc       	mov	r12,61
800022ea:	f0 1f 00 12 	mcall	80002330 <sensor_init+0x138>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022ee:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022f2:	e8 69 b2 90 	mov	r9,570000
800022f6:	f0 09 00 0a 	add	r10,r8,r9
800022fa:	cd 0b       	rjmp	8000229a <sensor_init+0xa2>
	delay_ms(19);												//SENSOR SWITCHING OPERATION MODE TIME
	
	//REMAP X AS Y
	write_sensor_data(BNO055_AXIS_MAP_CONFIG_ADDR, BNO055_REMAP_X_Y,1);											//AXIS REMAPPING
800022fc:	30 1a       	mov	r10,1
800022fe:	32 1b       	mov	r11,33
80002300:	34 1c       	mov	r12,65
80002302:	f0 1f 00 0c 	mcall	80002330 <sensor_init+0x138>
	write_sensor_data(BNO055_AXIS_MAP_SIGN_ADDR, (BNO055_REMAP_AXIS_POSITIVE)&(BNO055_REMAP_AXIS_POSITIVE)&(BNO055_REMAP_AXIS_POSITIVE), 1);														//AXIS REMAPPING SIGN
80002306:	30 1a       	mov	r10,1
80002308:	30 0b       	mov	r11,0
8000230a:	34 2c       	mov	r12,66
8000230c:	f0 1f 00 09 	mcall	80002330 <sensor_init+0x138>
	//Output Data Format
	uint_fast8_t _units = (BNO055_ACCEL_UNIT_MSQ << BNO055_ACCEL_UNIT_POS) & \
		(BNO055_GYRO_UNIT_RPS << BNO055_GYRO_UNIT_POS) & \		
		(BNO055_EULER_UNIT_DEG << BNO055_EULER_UNIT_POS) & \	
		(BNO055_TEMP_UNIT_CELSIUS << BNO055_TEMP_UNIT_POS); 
	write_sensor_data(BNO055_UNIT_SEL_ADDR, _units, 1);					
80002310:	30 1a       	mov	r10,1
80002312:	30 0b       	mov	r11,0
80002314:	33 bc       	mov	r12,59
80002316:	f0 1f 00 07 	mcall	80002330 <sensor_init+0x138>
}
8000231a:	2f cd       	sub	sp,-16
8000231c:	d8 02       	popm	pc
8000231e:	00 00       	add	r0,r0
80002320:	80 00       	ld.sh	r0,r0[0x0]
80002322:	24 24       	sub	r4,66
80002324:	80 00       	ld.sh	r0,r0[0x0]
80002326:	2e 20       	sub	r0,-30
80002328:	80 00       	ld.sh	r0,r0[0x0]
8000232a:	21 64       	sub	r4,22
8000232c:	80 00       	ld.sh	r0,r0[0x0]
8000232e:	27 74       	sub	r4,119
80002330:	80 00       	ld.sh	r0,r0[0x0]
80002332:	21 94       	sub	r4,25

80002334 <osc_priv_enable_rc120m>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC32_HZ */

void osc_priv_enable_rc120m(void)
{
80002334:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002336:	e1 b8 00 00 	mfsr	r8,0x0
8000233a:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
8000233c:	d3 03       	ssrf	0x10

	return flags;
8000233e:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80002340:	fe 78 58 00 	mov	r8,-43008
80002344:	34 4a       	mov	r10,68
80002346:	ea 1a aa 00 	orh	r10,0xaa00
8000234a:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
8000234c:	30 1a       	mov	r10,1
8000234e:	f1 4a 00 44 	st.w	r8[68],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002352:	12 98       	mov	r8,r9
80002354:	e6 18 00 01 	andh	r8,0x1,COH
80002358:	c0 21       	brne	8000235c <osc_priv_enable_rc120m+0x28>
      cpu_irq_enable();
8000235a:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
8000235c:	2f fd       	sub	sp,-4
8000235e:	5e fc       	retal	r12

80002360 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80002360:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002362:	e1 b8 00 00 	mfsr	r8,0x0
80002366:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002368:	d3 03       	ssrf	0x10

	return flags;
8000236a:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL1);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
8000236c:	fe 78 14 00 	mov	r8,-60416
80002370:	fc 1a aa 00 	movh	r10,0xaa00
80002374:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
80002378:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000237a:	12 98       	mov	r8,r9
8000237c:	e6 18 00 01 	andh	r8,0x1,COH
80002380:	c0 21       	brne	80002384 <sysclk_set_source+0x24>
      cpu_irq_enable();
80002382:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002384:	2f fd       	sub	sp,-4
80002386:	5e fc       	retal	r12

80002388 <sysclk_set_prescalers>:
 * \param pba_shift The PBA clock will be divided by \f$2^{pba\_shift}\f$
 * \param pbb_shift The PBB clock will be divided by \f$2^{pbb\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift)
{
80002388:	d4 01       	pushm	lr
8000238a:	20 1d       	sub	sp,4
	uint32_t   pbb_cksel = 0;

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
8000238c:	58 0c       	cp.w	r12,0
8000238e:	c0 30       	breq	80002394 <sysclk_set_prescalers+0xc>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_OFFSET)
80002390:	20 1c       	sub	r12,1
80002392:	a7 bc       	sbr	r12,0x7
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
80002394:	58 0b       	cp.w	r11,0
80002396:	c0 30       	breq	8000239c <sysclk_set_prescalers+0x14>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_OFFSET)
80002398:	20 1b       	sub	r11,1
8000239a:	a7 bb       	sbr	r11,0x7
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
8000239c:	58 0a       	cp.w	r10,0
8000239e:	c0 30       	breq	800023a4 <sysclk_set_prescalers+0x1c>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_OFFSET)
800023a0:	20 1a       	sub	r10,1
800023a2:	a7 ba       	sbr	r10,0x7

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800023a4:	e1 b8 00 00 	mfsr	r8,0x0
800023a8:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800023aa:	d3 03       	ssrf	0x10

	return flags;
800023ac:	40 09       	lddsp	r9,sp[0x0]
				| (1U << AVR32_PM_PBBDIV);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
800023ae:	fe 78 14 00 	mov	r8,-60416
800023b2:	30 4e       	mov	lr,4
800023b4:	ea 1e aa 00 	orh	lr,0xaa00
800023b8:	f1 4e 00 58 	st.w	r8[88],lr
	AVR32_PM.cpusel = cpu_cksel;
800023bc:	91 1c       	st.w	r8[0x4],r12
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
800023be:	30 cc       	mov	r12,12
800023c0:	ea 1c aa 00 	orh	r12,0xaa00
800023c4:	f1 4c 00 58 	st.w	r8[88],r12
	AVR32_PM.pbasel = pba_cksel;
800023c8:	91 3b       	st.w	r8[0xc],r11
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
800023ca:	31 0b       	mov	r11,16
800023cc:	ea 1b aa 00 	orh	r11,0xaa00
800023d0:	f1 4b 00 58 	st.w	r8[88],r11
	AVR32_PM.pbbsel = pbb_cksel;
800023d4:	91 4a       	st.w	r8[0x10],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800023d6:	12 98       	mov	r8,r9
800023d8:	e6 18 00 01 	andh	r8,0x1,COH
800023dc:	c0 21       	brne	800023e0 <sysclk_set_prescalers+0x58>
      cpu_irq_enable();
800023de:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800023e0:	2f fd       	sub	sp,-4
800023e2:	d8 02       	popm	pc

800023e4 <sysclk_init>:
#endif // CONFIG_USBCLK_SOURCE



void sysclk_init(void)
{
800023e4:	d4 01       	pushm	lr
	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
800023e6:	30 2a       	mov	r10,2
800023e8:	14 9b       	mov	r11,r10
800023ea:	14 9c       	mov	r12,r10
800023ec:	f0 1f 00 0a 	mcall	80002414 <sysclk_init+0x30>
		osc_priv_enable_osc32();
		break;
#endif

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
800023f0:	f0 1f 00 0a 	mcall	80002418 <sysclk_init+0x34>
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
800023f4:	fe 78 58 00 	mov	r8,-43008
800023f8:	71 19       	ld.w	r9,r8[0x44]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800023fa:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800023fe:	cf d0       	breq	800023f8 <sysclk_init+0x14>
#endif
	case SYSCLK_SRC_RC120M:
		osc_enable(OSC_ID_RC120M);
		osc_wait_ready(OSC_ID_RC120M);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80002400:	e0 6c c3 80 	mov	r12,50048
80002404:	ea 1c 01 c9 	orh	r12,0x1c9
80002408:	f0 1f 00 05 	mcall	8000241c <sysclk_init+0x38>
		sysclk_set_source(SYSCLK_SRC_RC120M);
8000240c:	30 4c       	mov	r12,4
8000240e:	f0 1f 00 05 	mcall	80002420 <sysclk_init+0x3c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002412:	d8 02       	popm	pc
80002414:	80 00       	ld.sh	r0,r0[0x0]
80002416:	23 88       	sub	r8,56
80002418:	80 00       	ld.sh	r0,r0[0x0]
8000241a:	23 34       	sub	r4,51
8000241c:	80 00       	ld.sh	r0,r0[0x0]
8000241e:	20 78       	sub	r8,7
80002420:	80 00       	ld.sh	r0,r0[0x0]
80002422:	23 60       	sub	r0,54

80002424 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002424:	d4 01       	pushm	lr
80002426:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002428:	e1 b8 00 00 	mfsr	r8,0x0
8000242c:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
8000242e:	d3 03       	ssrf	0x10

	return flags;
80002430:	40 09       	lddsp	r9,sp[0x0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002432:	a3 6c       	lsl	r12,0x2
80002434:	fe 7a 14 20 	mov	r10,-60384
80002438:	f8 0a 00 08 	add	r8,r12,r10
8000243c:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
8000243e:	30 1e       	mov	lr,1
80002440:	fc 0b 09 4b 	lsl	r11,lr,r11
80002444:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002446:	32 0a       	mov	r10,32
80002448:	ea 1a aa 00 	orh	r10,0xaa00
8000244c:	14 0c       	add	r12,r10
8000244e:	fe 7a 14 00 	mov	r10,-60416
80002452:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002456:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002458:	12 98       	mov	r8,r9
8000245a:	e6 18 00 01 	andh	r8,0x1,COH
8000245e:	c0 21       	brne	80002462 <sysclk_priv_enable_module+0x3e>
      cpu_irq_enable();
80002460:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002462:	2f fd       	sub	sp,-4
80002464:	d8 02       	popm	pc
80002466:	d7 03       	nop

80002468 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002468:	4a e8       	lddpc	r8,80002520 <twim_master_interrupt_handler+0xb8>
8000246a:	70 08       	ld.w	r8,r8[0x0]
8000246c:	70 79       	ld.w	r9,r8[0x1c]
8000246e:	4a ea       	lddpc	r10,80002524 <twim_master_interrupt_handler+0xbc>
80002470:	74 0a       	ld.w	r10,r10[0x0]
80002472:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002476:	12 9a       	mov	r10,r9
80002478:	e2 1a 07 00 	andl	r10,0x700,COH
8000247c:	c1 40       	breq	800024a4 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000247e:	e2 19 03 00 	andl	r9,0x300,COH
80002482:	f9 b9 01 fc 	movne	r9,-4
80002486:	f9 b9 00 fe 	moveq	r9,-2
8000248a:	4a 8a       	lddpc	r10,80002528 <twim_master_interrupt_handler+0xc0>
8000248c:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000248e:	70 3a       	ld.w	r10,r8[0xc]
80002490:	30 09       	mov	r9,0
80002492:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002496:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002498:	3f fa       	mov	r10,-1
8000249a:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
8000249c:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000249e:	4a 48       	lddpc	r8,8000252c <twim_master_interrupt_handler+0xc4>
800024a0:	b0 89       	st.b	r8[0x0],r9
800024a2:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
800024a4:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
800024a8:	c1 30       	breq	800024ce <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
800024aa:	4a 2a       	lddpc	r10,80002530 <twim_master_interrupt_handler+0xc8>
800024ac:	70 5b       	ld.w	r11,r8[0x14]
800024ae:	74 09       	ld.w	r9,r10[0x0]
800024b0:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
800024b2:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
800024b4:	4a 09       	lddpc	r9,80002534 <twim_master_interrupt_handler+0xcc>
800024b6:	72 0a       	ld.w	r10,r9[0x0]
800024b8:	20 1a       	sub	r10,1
800024ba:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
800024bc:	72 09       	ld.w	r9,r9[0x0]
800024be:	58 09       	cp.w	r9,0
800024c0:	c2 f1       	brne	8000251e <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
800024c2:	30 19       	mov	r9,1
800024c4:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
800024c6:	30 09       	mov	r9,0
800024c8:	49 98       	lddpc	r8,8000252c <twim_master_interrupt_handler+0xc4>
800024ca:	b0 89       	st.b	r8[0x0],r9
800024cc:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
800024ce:	e2 19 00 02 	andl	r9,0x2,COH
800024d2:	c2 60       	breq	8000251e <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
800024d4:	49 99       	lddpc	r9,80002538 <twim_master_interrupt_handler+0xd0>
800024d6:	72 09       	ld.w	r9,r9[0x0]
800024d8:	58 09       	cp.w	r9,0
800024da:	c0 71       	brne	800024e8 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
800024dc:	30 29       	mov	r9,2
800024de:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
800024e0:	30 09       	mov	r9,0
800024e2:	49 38       	lddpc	r8,8000252c <twim_master_interrupt_handler+0xc4>
800024e4:	b0 89       	st.b	r8[0x0],r9
800024e6:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
800024e8:	49 5a       	lddpc	r10,8000253c <twim_master_interrupt_handler+0xd4>
800024ea:	74 09       	ld.w	r9,r10[0x0]
800024ec:	13 3b       	ld.ub	r11,r9++
800024ee:	91 6b       	st.w	r8[0x18],r11
800024f0:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
800024f2:	49 28       	lddpc	r8,80002538 <twim_master_interrupt_handler+0xd0>
800024f4:	70 09       	ld.w	r9,r8[0x0]
800024f6:	20 19       	sub	r9,1
800024f8:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
800024fa:	70 08       	ld.w	r8,r8[0x0]
800024fc:	58 08       	cp.w	r8,0
800024fe:	c1 01       	brne	8000251e <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
80002500:	48 b8       	lddpc	r8,8000252c <twim_master_interrupt_handler+0xc4>
80002502:	11 88       	ld.ub	r8,r8[0x0]
80002504:	58 08       	cp.w	r8,0
80002506:	c0 c0       	breq	8000251e <twim_master_interrupt_handler+0xb6>
					twim_next = false;
80002508:	30 09       	mov	r9,0
8000250a:	48 98       	lddpc	r8,8000252c <twim_master_interrupt_handler+0xc4>
8000250c:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
8000250e:	48 d8       	lddpc	r8,80002540 <twim_master_interrupt_handler+0xd8>
80002510:	70 08       	ld.w	r8,r8[0x0]
80002512:	70 3a       	ld.w	r10,r8[0xc]
80002514:	48 99       	lddpc	r9,80002538 <twim_master_interrupt_handler+0xd0>
80002516:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
80002518:	70 29       	ld.w	r9,r8[0x8]
8000251a:	48 98       	lddpc	r8,8000253c <twim_master_interrupt_handler+0xd4>
8000251c:	91 09       	st.w	r8[0x0],r9
8000251e:	d6 03       	rete
80002520:	00 00       	add	r0,r0
80002522:	00 0c       	add	r12,r0
80002524:	00 00       	add	r0,r0
80002526:	00 20       	rsub	r0,r0
80002528:	00 00       	add	r0,r0
8000252a:	00 18       	sub	r8,r0
8000252c:	00 00       	add	r0,r0
8000252e:	00 24       	rsub	r4,r0
80002530:	00 00       	add	r0,r0
80002532:	00 10       	sub	r0,r0
80002534:	00 00       	add	r0,r0
80002536:	00 14       	sub	r4,r0
80002538:	00 00       	add	r0,r0
8000253a:	00 2c       	rsub	r12,r0
8000253c:	00 00       	add	r0,r0
8000253e:	00 1c       	sub	r12,r0
80002540:	00 00       	add	r0,r0
80002542:	00 28       	rsub	r8,r0

80002544 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80002544:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80002548:	f4 0b 0d 0a 	divu	r10,r10,r11
8000254c:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002550:	e0 48 00 ff 	cp.w	r8,255
80002554:	e0 8b 00 04 	brhi	8000255c <twim_set_speed+0x18>
80002558:	30 09       	mov	r9,0
8000255a:	c1 a8       	rjmp	8000258e <twim_set_speed+0x4a>
8000255c:	30 09       	mov	r9,0
8000255e:	30 77       	mov	r7,7
80002560:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
80002562:	2f f9       	sub	r9,-1
80002564:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002566:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002568:	e0 48 00 ff 	cp.w	r8,255
8000256c:	5f bb       	srhi	r11
8000256e:	ee 09 18 00 	cp.b	r9,r7
80002572:	5f 8a       	srls	r10
80002574:	f7 ea 00 0a 	and	r10,r11,r10
80002578:	fc 0a 18 00 	cp.b	r10,lr
8000257c:	cf 31       	brne	80002562 <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000257e:	30 7a       	mov	r10,7
80002580:	f4 09 18 00 	cp.b	r9,r10
80002584:	e0 88 00 05 	brls	8000258e <twim_set_speed+0x4a>
80002588:	3f 8c       	mov	r12,-8
8000258a:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000258e:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80002592:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002596:	14 18       	sub	r8,r10
80002598:	f7 e8 10 88 	or	r8,r11,r8<<0x8
8000259c:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
800025a0:	99 19       	st.w	r12[0x4],r9
800025a2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800025a6:	d7 03       	nop

800025a8 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
800025a8:	48 38       	lddpc	r8,800025b4 <twim_status+0xc>
800025aa:	70 08       	ld.w	r8,r8[0x0]
800025ac:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
800025ae:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
800025b2:	5e fc       	retal	r12
800025b4:	00 00       	add	r0,r0
800025b6:	00 0c       	add	r12,r0

800025b8 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
800025b8:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
800025bc:	e6 18 00 01 	andh	r8,0x1,COH
800025c0:	c0 21       	brne	800025c4 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
800025c2:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
800025c4:	3f f8       	mov	r8,-1
800025c6:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
800025c8:	99 b8       	st.w	r12[0x2c],r8
}
800025ca:	5e fc       	retal	r12

800025cc <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
800025cc:	eb cd 40 fe 	pushm	r1-r7,lr
800025d0:	18 97       	mov	r7,r12
800025d2:	16 93       	mov	r3,r11
800025d4:	14 95       	mov	r5,r10
800025d6:	12 92       	mov	r2,r9
800025d8:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800025da:	30 14       	mov	r4,1
800025dc:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800025de:	e0 68 00 80 	mov	r8,128
800025e2:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800025e4:	30 28       	mov	r8,2
800025e6:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800025e8:	49 e6       	lddpc	r6,80002660 <twim_write+0x94>
800025ea:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800025ec:	f0 1f 00 1e 	mcall	80002664 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
800025f0:	49 e8       	lddpc	r8,80002668 <twim_write+0x9c>
800025f2:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
800025f4:	49 e8       	lddpc	r8,8000266c <twim_write+0xa0>
800025f6:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
800025f8:	30 09       	mov	r9,0
800025fa:	49 e8       	lddpc	r8,80002670 <twim_write+0xa4>
800025fc:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800025fe:	49 e9       	lddpc	r9,80002674 <twim_write+0xa8>
80002600:	30 08       	mov	r8,0
80002602:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80002604:	6c 08       	ld.w	r8,r6[0x0]
80002606:	b1 65       	lsl	r5,0x10
80002608:	e8 15 e0 00 	orl	r5,0xe000
8000260c:	eb e2 10 12 	or	r2,r5,r2<<0x1
80002610:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
80002614:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80002616:	49 9a       	lddpc	r10,80002678 <twim_write+0xac>
80002618:	e0 6b 03 02 	mov	r11,770
8000261c:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8000261e:	74 0a       	ld.w	r10,r10[0x0]
80002620:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002622:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
80002624:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002626:	72 08       	ld.w	r8,r9[0x0]
80002628:	58 08       	cp.w	r8,0
8000262a:	c0 80       	breq	8000263a <twim_write+0x6e>
8000262c:	c0 b8       	rjmp	80002642 <twim_write+0x76>
		cpu_relax();
8000262e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002632:	6c 08       	ld.w	r8,r6[0x0]
80002634:	58 08       	cp.w	r8,0
80002636:	c0 30       	breq	8000263c <twim_write+0x70>
80002638:	c0 58       	rjmp	80002642 <twim_write+0x76>
8000263a:	48 f6       	lddpc	r6,80002674 <twim_write+0xa8>
8000263c:	f0 1f 00 10 	mcall	8000267c <twim_write+0xb0>
80002640:	cf 70       	breq	8000262e <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002642:	30 28       	mov	r8,2
80002644:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002646:	48 c8       	lddpc	r8,80002674 <twim_write+0xa8>
80002648:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8000264a:	5b c8       	cp.w	r8,-4
8000264c:	c0 70       	breq	8000265a <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000264e:	48 a8       	lddpc	r8,80002674 <twim_write+0xa8>
80002650:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80002652:	5b e8       	cp.w	r8,-2
80002654:	c0 30       	breq	8000265a <twim_write+0x8e>
80002656:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000265a:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
8000265e:	00 00       	add	r0,r0
80002660:	00 00       	add	r0,r0
80002662:	00 0c       	add	r12,r0
80002664:	80 00       	ld.sh	r0,r0[0x0]
80002666:	25 b8       	sub	r8,91
80002668:	00 00       	add	r0,r0
8000266a:	00 1c       	sub	r12,r0
8000266c:	00 00       	add	r0,r0
8000266e:	00 2c       	rsub	r12,r0
80002670:	00 00       	add	r0,r0
80002672:	00 24       	rsub	r4,r0
80002674:	00 00       	add	r0,r0
80002676:	00 18       	sub	r8,r0
80002678:	00 00       	add	r0,r0
8000267a:	00 20       	rsub	r0,r0
8000267c:	80 00       	ld.sh	r0,r0[0x0]
8000267e:	25 a8       	sub	r8,90

80002680 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002680:	d4 01       	pushm	lr
80002682:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002684:	30 08       	mov	r8,0
80002686:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80002688:	30 08       	mov	r8,0
8000268a:	16 99       	mov	r9,r11
8000268c:	10 9a       	mov	r10,r8
8000268e:	1a 9b       	mov	r11,sp
80002690:	f0 1f 00 02 	mcall	80002698 <twim_probe+0x18>
}
80002694:	2f fd       	sub	sp,-4
80002696:	d8 02       	popm	pc
80002698:	80 00       	ld.sh	r0,r0[0x0]
8000269a:	25 cc       	sub	r12,92

8000269c <twim_read>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read (volatile avr32_twim_t *twim, uint8_t *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8000269c:	eb cd 40 f8 	pushm	r3-r7,lr
800026a0:	18 97       	mov	r7,r12
800026a2:	16 95       	mov	r5,r11
800026a4:	14 96       	mov	r6,r10
800026a6:	12 93       	mov	r3,r9
800026a8:	10 94       	mov	r4,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800026aa:	30 18       	mov	r8,1
800026ac:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800026ae:	e0 68 00 80 	mov	r8,128
800026b2:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800026b4:	30 28       	mov	r8,2
800026b6:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800026b8:	4a 78       	lddpc	r8,80002754 <twim_read+0xb8>
800026ba:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800026bc:	f0 1f 00 27 	mcall	80002758 <twim_read+0xbc>
	// get a pointer to applicative data
	twim_rx_data = buffer;
800026c0:	4a 78       	lddpc	r8,8000275c <twim_read+0xc0>
800026c2:	91 05       	st.w	r8[0x0],r5
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = nbytes;
800026c4:	4a 78       	lddpc	r8,80002760 <twim_read+0xc4>
800026c6:	91 06       	st.w	r8[0x0],r6
	// Set next transfer to false
	twim_next = false;
800026c8:	30 09       	mov	r9,0
800026ca:	4a 78       	lddpc	r8,80002764 <twim_read+0xc8>
800026cc:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800026ce:	30 09       	mov	r9,0
800026d0:	4a 68       	lddpc	r8,80002768 <twim_read+0xcc>
800026d2:	91 09       	st.w	r8[0x0],r9
	//tenbit need special handling
	if (tenbit)	{
800026d4:	58 04       	cp.w	r4,0
800026d6:	c0 f0       	breq	800026f4 <twim_read+0x58>
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800026d8:	49 f8       	lddpc	r8,80002754 <twim_read+0xb8>
800026da:	70 08       	ld.w	r8,r8[0x0]
800026dc:	a1 73       	lsl	r3,0x1
800026de:	06 99       	mov	r9,r3
800026e0:	e8 19 a8 00 	orl	r9,0xa800
800026e4:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800026e6:	b1 66       	lsl	r6,0x10
800026e8:	e8 16 f8 01 	orl	r6,0xf801
800026ec:	ed e3 10 03 	or	r3,r6,r3
800026f0:	91 43       	st.w	r8[0x10],r3
800026f2:	c0 98       	rjmp	80002704 <twim_read+0x68>
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800026f4:	49 88       	lddpc	r8,80002754 <twim_read+0xb8>
800026f6:	70 08       	ld.w	r8,r8[0x0]
800026f8:	b1 66       	lsl	r6,0x10
800026fa:	e8 16 e0 01 	orl	r6,0xe001
800026fe:	ed e3 10 13 	or	r3,r6,r3<<0x1
80002702:	91 33       	st.w	r8[0xc],r3
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// mask NACK and RXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
80002704:	49 a9       	lddpc	r9,8000276c <twim_read+0xd0>
80002706:	e0 68 07 01 	mov	r8,1793
8000270a:	93 08       	st.w	r9[0x0],r8
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8000270c:	49 28       	lddpc	r8,80002754 <twim_read+0xb8>
8000270e:	70 08       	ld.w	r8,r8[0x0]
80002710:	72 09       	ld.w	r9,r9[0x0]
80002712:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002714:	30 19       	mov	r9,1
80002716:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
80002718:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8000271a:	49 48       	lddpc	r8,80002768 <twim_read+0xcc>
8000271c:	70 08       	ld.w	r8,r8[0x0]
8000271e:	58 08       	cp.w	r8,0
80002720:	c0 80       	breq	80002730 <twim_read+0x94>
80002722:	c0 b8       	rjmp	80002738 <twim_read+0x9c>
		cpu_relax();
80002724:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80002728:	6c 08       	ld.w	r8,r6[0x0]
8000272a:	58 08       	cp.w	r8,0
8000272c:	c0 30       	breq	80002732 <twim_read+0x96>
8000272e:	c0 58       	rjmp	80002738 <twim_read+0x9c>
80002730:	48 e6       	lddpc	r6,80002768 <twim_read+0xcc>
80002732:	f0 1f 00 10 	mcall	80002770 <twim_read+0xd4>
80002736:	cf 70       	breq	80002724 <twim_read+0x88>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002738:	30 28       	mov	r8,2
8000273a:	8f 08       	st.w	r7[0x0],r8
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000273c:	48 b8       	lddpc	r8,80002768 <twim_read+0xcc>
8000273e:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80002740:	5b c8       	cp.w	r8,-4
80002742:	c0 70       	breq	80002750 <twim_read+0xb4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002744:	48 98       	lddpc	r8,80002768 <twim_read+0xcc>
80002746:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80002748:	5b e8       	cp.w	r8,-2
8000274a:	c0 30       	breq	80002750 <twim_read+0xb4>
8000274c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80002750:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1
80002754:	00 00       	add	r0,r0
80002756:	00 0c       	add	r12,r0
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	25 b8       	sub	r8,91
8000275c:	00 00       	add	r0,r0
8000275e:	00 10       	sub	r0,r0
80002760:	00 00       	add	r0,r0
80002762:	00 14       	sub	r4,r0
80002764:	00 00       	add	r0,r0
80002766:	00 24       	rsub	r4,r0
80002768:	00 00       	add	r0,r0
8000276a:	00 18       	sub	r8,r0
8000276c:	00 00       	add	r0,r0
8000276e:	00 20       	rsub	r0,r0
80002770:	80 00       	ld.sh	r0,r0[0x0]
80002772:	25 a8       	sub	r8,90

80002774 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002774:	eb cd 40 e0 	pushm	r5-r7,lr
80002778:	20 1d       	sub	sp,4
8000277a:	18 97       	mov	r7,r12
8000277c:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000277e:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002782:	30 0a       	mov	r10,0
80002784:	4a 79       	lddpc	r9,80002820 <twim_master_init+0xac>
80002786:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002788:	e6 18 00 01 	andh	r8,0x1,COH
8000278c:	c0 b1       	brne	800027a2 <twim_master_init+0x2e>
		cpu_irq_disable ();
8000278e:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80002790:	3f f8       	mov	r8,-1
80002792:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002794:	30 18       	mov	r8,1
80002796:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002798:	e0 68 00 80 	mov	r8,128
8000279c:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
8000279e:	d5 03       	csrf	0x10
800027a0:	c0 88       	rjmp	800027b0 <twim_master_init+0x3c>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
800027a2:	3f f8       	mov	r8,-1
800027a4:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800027a6:	30 18       	mov	r8,1
800027a8:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800027aa:	e0 68 00 80 	mov	r8,128
800027ae:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
800027b0:	3f f8       	mov	r8,-1
800027b2:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027b4:	e1 b8 00 00 	mfsr	r8,0x0
800027b8:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800027ba:	d3 03       	ssrf	0x10

	return flags;
800027bc:	40 06       	lddsp	r6,sp[0x0]

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
800027be:	30 1a       	mov	r10,1
800027c0:	e0 6b 01 40 	mov	r11,320
800027c4:	49 8c       	lddpc	r12,80002824 <twim_master_init+0xb0>
800027c6:	f0 1f 00 19 	mcall	80002828 <twim_master_init+0xb4>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800027ca:	e6 16 00 01 	andh	r6,0x1,COH
800027ce:	c0 21       	brne	800027d2 <twim_master_init+0x5e>
      cpu_irq_enable();
800027d0:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
800027d2:	eb 39 00 0c 	ld.ub	r9,r5[12]
800027d6:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
800027d8:	f0 09 18 00 	cp.b	r9,r8
800027dc:	f9 b8 01 10 	movne	r8,16
800027e0:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800027e4:	f9 b8 01 ff 	movne	r8,-1
800027e8:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800027ec:	6a 0a       	ld.w	r10,r5[0x0]
800027ee:	6a 1b       	ld.w	r11,r5[0x4]
800027f0:	0e 9c       	mov	r12,r7
800027f2:	f0 1f 00 0f 	mcall	8000282c <twim_master_init+0xb8>
800027f6:	5b 8c       	cp.w	r12,-8
800027f8:	c1 00       	breq	80002818 <twim_master_init+0xa4>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800027fa:	6a 2b       	ld.w	r11,r5[0x8]
800027fc:	0e 9c       	mov	r12,r7
800027fe:	f0 1f 00 0d 	mcall	80002830 <twim_master_init+0xbc>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002802:	48 88       	lddpc	r8,80002820 <twim_master_init+0xac>
80002804:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80002806:	5b c8       	cp.w	r8,-4
80002808:	c0 70       	breq	80002816 <twim_master_init+0xa2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000280a:	48 68       	lddpc	r8,80002820 <twim_master_init+0xac>
8000280c:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
8000280e:	5b e8       	cp.w	r8,-2
80002810:	c0 30       	breq	80002816 <twim_master_init+0xa2>
80002812:	30 0c       	mov	r12,0
80002814:	c0 28       	rjmp	80002818 <twim_master_init+0xa4>
80002816:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
80002818:	2f fd       	sub	sp,-4
8000281a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000281e:	00 00       	add	r0,r0
80002820:	00 00       	add	r0,r0
80002822:	00 18       	sub	r8,r0
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	24 68       	sub	r8,70
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	28 34       	sub	r4,-125
8000282c:	80 00       	ld.sh	r0,r0[0x0]
8000282e:	25 44       	sub	r4,84
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	26 80       	sub	r0,104

80002834 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002834:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002838:	49 99       	lddpc	r9,8000289c <INTC_register_interrupt+0x68>
8000283a:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000283e:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002842:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002844:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002848:	58 0a       	cp.w	r10,0
8000284a:	c0 91       	brne	8000285c <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000284c:	49 59       	lddpc	r9,800028a0 <INTC_register_interrupt+0x6c>
8000284e:	49 6a       	lddpc	r10,800028a4 <INTC_register_interrupt+0x70>
80002850:	12 1a       	sub	r10,r9
80002852:	fe 79 10 00 	mov	r9,-61440
80002856:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000285a:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
8000285c:	58 1a       	cp.w	r10,1
8000285e:	c0 a1       	brne	80002872 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002860:	49 09       	lddpc	r9,800028a0 <INTC_register_interrupt+0x6c>
80002862:	49 2a       	lddpc	r10,800028a8 <INTC_register_interrupt+0x74>
80002864:	12 1a       	sub	r10,r9
80002866:	bf aa       	sbr	r10,0x1e
80002868:	fe 79 10 00 	mov	r9,-61440
8000286c:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002870:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80002872:	58 2a       	cp.w	r10,2
80002874:	c0 a1       	brne	80002888 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002876:	48 b9       	lddpc	r9,800028a0 <INTC_register_interrupt+0x6c>
80002878:	48 da       	lddpc	r10,800028ac <INTC_register_interrupt+0x78>
8000287a:	12 1a       	sub	r10,r9
8000287c:	bf ba       	sbr	r10,0x1f
8000287e:	fe 79 10 00 	mov	r9,-61440
80002882:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002886:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002888:	48 69       	lddpc	r9,800028a0 <INTC_register_interrupt+0x6c>
8000288a:	48 aa       	lddpc	r10,800028b0 <INTC_register_interrupt+0x7c>
8000288c:	12 1a       	sub	r10,r9
8000288e:	ea 1a c0 00 	orh	r10,0xc000
80002892:	fe 79 10 00 	mov	r9,-61440
80002896:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000289a:	5e fc       	retal	r12
8000289c:	80 00       	ld.sh	r0,r0[0x0]
8000289e:	2e 30       	sub	r0,-29
800028a0:	80 00       	ld.sh	r0,r0[0x0]
800028a2:	2c 00       	sub	r0,-64
800028a4:	80 00       	ld.sh	r0,r0[0x0]
800028a6:	2d 04       	sub	r4,-48
800028a8:	80 00       	ld.sh	r0,r0[0x0]
800028aa:	2d 12       	sub	r2,-47
800028ac:	80 00       	ld.sh	r0,r0[0x0]
800028ae:	2d 20       	sub	r0,-46
800028b0:	80 00       	ld.sh	r0,r0[0x0]
800028b2:	2d 2e       	sub	lr,-46

800028b4 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800028b4:	fe 78 10 00 	mov	r8,-61440
800028b8:	e0 69 00 83 	mov	r9,131
800028bc:	f2 0c 01 0c 	sub	r12,r9,r12
800028c0:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800028c4:	f2 ca ff c0 	sub	r10,r9,-64
800028c8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800028cc:	58 08       	cp.w	r8,0
800028ce:	c0 21       	brne	800028d2 <_get_interrupt_handler+0x1e>
800028d0:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800028d2:	f0 08 12 00 	clz	r8,r8
800028d6:	48 5a       	lddpc	r10,800028e8 <_get_interrupt_handler+0x34>
800028d8:	f4 09 00 39 	add	r9,r10,r9<<0x3
800028dc:	f0 08 11 1f 	rsub	r8,r8,31
800028e0:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800028e2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800028e6:	5e fc       	retal	r12
800028e8:	80 00       	ld.sh	r0,r0[0x0]
800028ea:	2e 30       	sub	r0,-29

800028ec <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800028ec:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800028f0:	fe c0 fc f0 	sub	r0,pc,-784

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800028f4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800028f8:	d5 53       	csrf	0x15
  cp      r0, r1
800028fa:	30 40       	mov	r0,4
  brhs    idata_load_loop_end
800028fc:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
800028fe:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002900:	c0 72       	brcc	8000290e <idata_load_loop_end>
  st.d    r0++, r4
80002902:	fe c2 fa 1a 	sub	r2,pc,-1510

80002906 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
80002906:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002908:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
8000290a:	02 30       	cp.w	r0,r1
  cp      r0, r1
8000290c:	cf d3       	brcs	80002906 <idata_load_loop>

8000290e <idata_load_loop_end>:
  brhs    udata_clear_loop_end
8000290e:	30 80       	mov	r0,8
  mov     r2, 0
80002910:	e0 61 01 00 	mov	r1,256
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002914:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002916:	c0 62       	brcc	80002922 <udata_clear_loop_end>
  brlo    udata_clear_loop
80002918:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000291a:	30 03       	mov	r3,0

8000291c <udata_clear_loop>:
8000291c:	a1 22       	st.d	r0++,r2
8000291e:	02 30       	cp.w	r0,r1
80002920:	cf e3       	brcs	8000291c <udata_clear_loop>

80002922 <udata_clear_loop_end>:
80002922:	fe cf ff ce 	sub	pc,pc,-50
80002926:	d7 03       	nop

80002928 <board_init>:
#include <board.h>
#include <conf_board.h>
#include "sensor.h"

void board_init(void)
{
80002928:	d4 01       	pushm	lr
	sysclk_init();
8000292a:	f0 1f 00 08 	mcall	80002948 <board_init+0x20>
8000292e:	30 6b       	mov	r11,6
80002930:	30 2c       	mov	r12,2
80002932:	f0 1f 00 07 	mcall	8000294c <board_init+0x24>
	ioport_init();
	sensor_init();
80002936:	f0 1f 00 07 	mcall	80002950 <board_init+0x28>

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
8000293a:	fc 19 00 80 	movh	r9,0x80
8000293e:	fe 78 28 00 	mov	r8,-55296
80002942:	f1 49 00 44 	st.w	r8[68],r9
	
	ioport_set_pin_dir(LED_TRANS, IOPORT_DIR_OUTPUT);
	
}
80002946:	d8 02       	popm	pc
80002948:	80 00       	ld.sh	r0,r0[0x0]
8000294a:	23 e4       	sub	r4,62
8000294c:	80 00       	ld.sh	r0,r0[0x0]
8000294e:	24 24       	sub	r4,66
80002950:	80 00       	ld.sh	r0,r0[0x0]
80002952:	21 f8       	sub	r8,31

80002954 <main>:
#include "settings_t.h"
#include "motor_control.h"
#include "sensor.h"

int main (void)
{
80002954:	d4 01       	pushm	lr
80002956:	fa cd 00 90 	sub	sp,sp,144
	board_init();		
8000295a:	f0 1f 00 28 	mcall	800029f8 <main+0xa4>

		uint8_t page_0[106];
		read_sensor_data(BNO055_CHIP_ID_ADDR, &page_0, 106);
8000295e:	36 aa       	mov	r10,106
80002960:	fa cb ff dc 	sub	r11,sp,-36
80002964:	30 0c       	mov	r12,0
80002966:	f0 1f 00 26 	mcall	800029fc <main+0xa8>
		
		uint8_t val[2] = {BNO055_PAGE_ID_ADDR, BNO055_PAGE_ONE}; //CHANGE PAGE
8000296a:	4a 68       	lddpc	r8,80002a00 <main+0xac>
8000296c:	90 08       	ld.sh	r8,r8[0x0]
8000296e:	fb 58 00 20 	st.h	sp[32],r8
		write_sensor_data(BNO055_PAGE_ID_ADDR, &val, 2);
80002972:	30 2a       	mov	r10,2
80002974:	fa cb ff e0 	sub	r11,sp,-32
80002978:	30 7c       	mov	r12,7
8000297a:	f0 1f 00 23 	mcall	80002a04 <main+0xb0>
		
		uint8_t page_1[31];
		read_sensor_data(BNO055_CHIP_ID_ADDR, &page_1, 31);
8000297e:	31 fa       	mov	r10,31
80002980:	1a 9b       	mov	r11,sp
80002982:	30 0c       	mov	r12,0
80002984:	f0 1f 00 1e 	mcall	800029fc <main+0xa8>
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002988:	fe 7e 28 00 	mov	lr,-55296
8000298c:	fc 1c 00 80 	movh	r12,0x80
80002990:	e0 6b e1 c0 	mov	r11,57792
80002994:	ea 1b 00 e4 	orh	r11,0xe4
80002998:	fd 4c 00 58 	st.w	lr[88],r12
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000299c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029a0:	f0 0b 00 0a 	add	r10,r8,r11
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800029a4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800029a8:	14 38       	cp.w	r8,r10
800029aa:	e0 88 00 08 	brls	800029ba <main+0x66>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800029ae:	12 38       	cp.w	r8,r9
800029b0:	fe 98 ff fa 	brls	800029a4 <main+0x50>
800029b4:	12 3a       	cp.w	r10,r9
800029b6:	c1 93       	brcs	800029e8 <main+0x94>
800029b8:	cf 6b       	rjmp	800029a4 <main+0x50>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800029ba:	12 38       	cp.w	r8,r9
800029bc:	e0 8b 00 16 	brhi	800029e8 <main+0x94>
800029c0:	12 3a       	cp.w	r10,r9
800029c2:	c1 33       	brcs	800029e8 <main+0x94>
800029c4:	cf 0b       	rjmp	800029a4 <main+0x50>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800029c6:	e1 ba 00 42 	mfsr	r10,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800029ca:	12 38       	cp.w	r8,r9
800029cc:	e0 88 00 08 	brls	800029dc <main+0x88>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800029d0:	14 38       	cp.w	r8,r10
800029d2:	fe 98 ff fa 	brls	800029c6 <main+0x72>
800029d6:	14 39       	cp.w	r9,r10
800029d8:	ce 03       	brcs	80002998 <main+0x44>
800029da:	cf 6b       	rjmp	800029c6 <main+0x72>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800029dc:	14 38       	cp.w	r8,r10
800029de:	fe 9b ff dd 	brhi	80002998 <main+0x44>
800029e2:	14 39       	cp.w	r9,r10
800029e4:	cd a3       	brcs	80002998 <main+0x44>
800029e6:	cf 0b       	rjmp	800029c6 <main+0x72>

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
800029e8:	fd 4c 00 54 	st.w	lr[84],r12
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800029ec:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029f0:	f0 0b 00 09 	add	r9,r8,r11
800029f4:	ce 9b       	rjmp	800029c6 <main+0x72>
800029f6:	00 00       	add	r0,r0
800029f8:	80 00       	ld.sh	r0,r0[0x0]
800029fa:	29 28       	sub	r8,-110
800029fc:	80 00       	ld.sh	r0,r0[0x0]
800029fe:	21 c4       	sub	r4,28
80002a00:	80 00       	ld.sh	r0,r0[0x0]
80002a02:	2e e0       	sub	r0,-18
80002a04:	80 00       	ld.sh	r0,r0[0x0]
80002a06:	21 94       	sub	r4,25

Disassembly of section .exception:

80002c00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002c00:	c0 08       	rjmp	80002c00 <_evba>
	...

80002c04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002c04:	c0 08       	rjmp	80002c04 <_handle_TLB_Multiple_Hit>
	...

80002c08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002c08:	c0 08       	rjmp	80002c08 <_handle_Bus_Error_Data_Fetch>
	...

80002c0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80002c0c:	c0 08       	rjmp	80002c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80002c10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002c10:	c0 08       	rjmp	80002c10 <_handle_NMI>
	...

80002c14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002c14:	c0 08       	rjmp	80002c14 <_handle_Instruction_Address>
	...

80002c18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002c18:	c0 08       	rjmp	80002c18 <_handle_ITLB_Protection>
	...

80002c1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80002c1c:	c0 08       	rjmp	80002c1c <_handle_Breakpoint>
	...

80002c20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002c20:	c0 08       	rjmp	80002c20 <_handle_Illegal_Opcode>
	...

80002c24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002c24:	c0 08       	rjmp	80002c24 <_handle_Unimplemented_Instruction>
	...

80002c28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002c28:	c0 08       	rjmp	80002c28 <_handle_Privilege_Violation>
	...

80002c2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80002c2c:	c0 08       	rjmp	80002c2c <_handle_Floating_Point>
	...

80002c30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002c30:	c0 08       	rjmp	80002c30 <_handle_Coprocessor_Absent>
	...

80002c34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002c34:	c0 08       	rjmp	80002c34 <_handle_Data_Address_Read>
	...

80002c38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002c38:	c0 08       	rjmp	80002c38 <_handle_Data_Address_Write>
	...

80002c3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80002c3c:	c0 08       	rjmp	80002c3c <_handle_DTLB_Protection_Read>
	...

80002c40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002c40:	c0 08       	rjmp	80002c40 <_handle_DTLB_Protection_Write>
	...

80002c44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002c44:	c0 08       	rjmp	80002c44 <_handle_DTLB_Modified>
	...

80002c50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002c50:	c0 08       	rjmp	80002c50 <_handle_ITLB_Miss>
	...

80002c60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002c60:	c0 08       	rjmp	80002c60 <_handle_DTLB_Miss_Read>
	...

80002c70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002c70:	c0 08       	rjmp	80002c70 <_handle_DTLB_Miss_Write>
	...

80002d00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002d00:	c0 08       	rjmp	80002d00 <_handle_Supervisor_Call>
80002d02:	d7 03       	nop

80002d04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d04:	30 0c       	mov	r12,0
80002d06:	fe b0 fd d7 	rcall	800028b4 <_get_interrupt_handler>
80002d0a:	58 0c       	cp.w	r12,0
80002d0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d10:	d6 03       	rete

80002d12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d12:	30 1c       	mov	r12,1
80002d14:	fe b0 fd d0 	rcall	800028b4 <_get_interrupt_handler>
80002d18:	58 0c       	cp.w	r12,0
80002d1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d1e:	d6 03       	rete

80002d20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d20:	30 2c       	mov	r12,2
80002d22:	fe b0 fd c9 	rcall	800028b4 <_get_interrupt_handler>
80002d26:	58 0c       	cp.w	r12,0
80002d28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d2c:	d6 03       	rete

80002d2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d2e:	30 3c       	mov	r12,3
80002d30:	fe b0 fd c2 	rcall	800028b4 <_get_interrupt_handler>
80002d34:	58 0c       	cp.w	r12,0
80002d36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d3a:	d6 03       	rete
80002d3c:	d7 03       	nop
80002d3e:	d7 03       	nop
80002d40:	d7 03       	nop
80002d42:	d7 03       	nop
80002d44:	d7 03       	nop
80002d46:	d7 03       	nop
80002d48:	d7 03       	nop
80002d4a:	d7 03       	nop
80002d4c:	d7 03       	nop
80002d4e:	d7 03       	nop
80002d50:	d7 03       	nop
80002d52:	d7 03       	nop
80002d54:	d7 03       	nop
80002d56:	d7 03       	nop
80002d58:	d7 03       	nop
80002d5a:	d7 03       	nop
80002d5c:	d7 03       	nop
80002d5e:	d7 03       	nop
80002d60:	d7 03       	nop
80002d62:	d7 03       	nop
80002d64:	d7 03       	nop
80002d66:	d7 03       	nop
80002d68:	d7 03       	nop
80002d6a:	d7 03       	nop
80002d6c:	d7 03       	nop
80002d6e:	d7 03       	nop
80002d70:	d7 03       	nop
80002d72:	d7 03       	nop
80002d74:	d7 03       	nop
80002d76:	d7 03       	nop
80002d78:	d7 03       	nop
80002d7a:	d7 03       	nop
80002d7c:	d7 03       	nop
80002d7e:	d7 03       	nop
80002d80:	d7 03       	nop
80002d82:	d7 03       	nop
80002d84:	d7 03       	nop
80002d86:	d7 03       	nop
80002d88:	d7 03       	nop
80002d8a:	d7 03       	nop
80002d8c:	d7 03       	nop
80002d8e:	d7 03       	nop
80002d90:	d7 03       	nop
80002d92:	d7 03       	nop
80002d94:	d7 03       	nop
80002d96:	d7 03       	nop
80002d98:	d7 03       	nop
80002d9a:	d7 03       	nop
80002d9c:	d7 03       	nop
80002d9e:	d7 03       	nop
80002da0:	d7 03       	nop
80002da2:	d7 03       	nop
80002da4:	d7 03       	nop
80002da6:	d7 03       	nop
80002da8:	d7 03       	nop
80002daa:	d7 03       	nop
80002dac:	d7 03       	nop
80002dae:	d7 03       	nop
80002db0:	d7 03       	nop
80002db2:	d7 03       	nop
80002db4:	d7 03       	nop
80002db6:	d7 03       	nop
80002db8:	d7 03       	nop
80002dba:	d7 03       	nop
80002dbc:	d7 03       	nop
80002dbe:	d7 03       	nop
80002dc0:	d7 03       	nop
80002dc2:	d7 03       	nop
80002dc4:	d7 03       	nop
80002dc6:	d7 03       	nop
80002dc8:	d7 03       	nop
80002dca:	d7 03       	nop
80002dcc:	d7 03       	nop
80002dce:	d7 03       	nop
80002dd0:	d7 03       	nop
80002dd2:	d7 03       	nop
80002dd4:	d7 03       	nop
80002dd6:	d7 03       	nop
80002dd8:	d7 03       	nop
80002dda:	d7 03       	nop
80002ddc:	d7 03       	nop
80002dde:	d7 03       	nop
80002de0:	d7 03       	nop
80002de2:	d7 03       	nop
80002de4:	d7 03       	nop
80002de6:	d7 03       	nop
80002de8:	d7 03       	nop
80002dea:	d7 03       	nop
80002dec:	d7 03       	nop
80002dee:	d7 03       	nop
80002df0:	d7 03       	nop
80002df2:	d7 03       	nop
80002df4:	d7 03       	nop
80002df6:	d7 03       	nop
80002df8:	d7 03       	nop
80002dfa:	d7 03       	nop
80002dfc:	d7 03       	nop
80002dfe:	d7 03       	nop
