
Regler 2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000d58  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002e00  80002e00  00003200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000f8  80003000  80003000  00003400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000005  00000004  800030f8  00003804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .balign       00000007  00000009  800030fd  00003809  2**0
                  ALLOC
  7 .bss          000001a8  00000010  80003100  00003810  2**2
                  ALLOC
  8 .comment      00000030  00000000  00000000  00003809  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000640  00000000  00000000  00003840  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00001180  00000000  00000000  00003e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000fb49  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001c5c  00000000  00000000  00014b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006f63  00000000  00000000  000167a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000eac  00000000  00000000  0001d708  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003e8b  00000000  00000000  0001e5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000240c  00000000  00000000  0002243f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00b18f3b  00000000  00000000  0002484b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 19 .debug_ranges 000007c8  00000000  00000000  00b3d788  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f5 34 	sub	pc,pc,-2764

Disassembly of section .text:

80002004 <flashcdw_set_wait_state>:
80002004:	fe 68 14 00 	mov	r8,-125952
80002008:	70 09       	ld.w	r9,r8[0x0]
8000200a:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
8000200e:	91 09       	st.w	r8[0x0],r9
80002010:	5e fc       	retal	r12

80002012 <flashcdw_is_ready>:
80002012:	fe 68 14 00 	mov	r8,-125952
80002016:	70 2c       	ld.w	r12,r8[0x8]
80002018:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000201c:	5e fc       	retal	r12
8000201e:	d7 03       	nop

80002020 <flashcdw_default_wait_until_ready>:
80002020:	d4 01       	pushm	lr
80002022:	f0 1f 00 03 	mcall	8000202c <flashcdw_default_wait_until_ready+0xc>
80002026:	cf e0       	breq	80002022 <flashcdw_default_wait_until_ready+0x2>
80002028:	d8 02       	popm	pc
8000202a:	00 00       	add	r0,r0
8000202c:	80 00       	ld.sh	r0,r0[0x0]
8000202e:	20 12       	sub	r2,1

80002030 <flashcdw_issue_command>:
80002030:	eb cd 40 c0 	pushm	r6-r7,lr
80002034:	18 96       	mov	r6,r12
80002036:	16 97       	mov	r7,r11
80002038:	48 e8       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
8000203a:	70 08       	ld.w	r8,r8[0x0]
8000203c:	5d 18       	icall	r8
8000203e:	fe 68 14 00 	mov	r8,-125952
80002042:	70 18       	ld.w	r8,r8[0x4]
80002044:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
80002048:	58 07       	cp.w	r7,0
8000204a:	c0 35       	brlt	80002050 <flashcdw_issue_command+0x20>
8000204c:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
80002050:	3a 59       	mov	r9,-91
80002052:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
80002056:	fe 69 14 00 	mov	r9,-125952
8000205a:	93 18       	st.w	r9[0x4],r8
8000205c:	72 29       	ld.w	r9,r9[0x8]
8000205e:	e2 19 00 0c 	andl	r9,0xc,COH
80002062:	48 58       	lddpc	r8,80002074 <flashcdw_issue_command+0x44>
80002064:	91 09       	st.w	r8[0x0],r9
80002066:	48 38       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
80002068:	70 08       	ld.w	r8,r8[0x0]
8000206a:	5d 18       	icall	r8
8000206c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002070:	00 00       	add	r0,r0
80002072:	00 04       	add	r4,r0
80002074:	00 00       	add	r0,r0
80002076:	00 10       	sub	r0,r0

80002078 <flashcdw_set_flash_waitstate_and_readmode>:
80002078:	d4 01       	pushm	lr
8000207a:	e0 68 e1 c0 	mov	r8,57792
8000207e:	ea 18 00 e4 	orh	r8,0xe4
80002082:	10 3c       	cp.w	r12,r8
80002084:	e0 88 00 19 	brls	800020b6 <flashcdw_set_flash_waitstate_and_readmode+0x3e>
80002088:	e0 68 c3 80 	mov	r8,50048
8000208c:	ea 18 01 c9 	orh	r8,0x1c9
80002090:	10 3c       	cp.w	r12,r8
80002092:	e0 8b 00 0a 	brhi	800020a6 <flashcdw_set_flash_waitstate_and_readmode+0x2e>
80002096:	30 1c       	mov	r12,1
80002098:	f0 1f 00 0c 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
8000209c:	3f fb       	mov	r11,-1
8000209e:	31 1c       	mov	r12,17
800020a0:	f0 1f 00 0b 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020a4:	d8 02       	popm	pc
800020a6:	30 1c       	mov	r12,1
800020a8:	f0 1f 00 08 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
800020ac:	3f fb       	mov	r11,-1
800020ae:	31 0c       	mov	r12,16
800020b0:	f0 1f 00 07 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020b4:	d8 02       	popm	pc
800020b6:	30 0c       	mov	r12,0
800020b8:	f0 1f 00 04 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
800020bc:	3f fb       	mov	r11,-1
800020be:	31 1c       	mov	r12,17
800020c0:	f0 1f 00 03 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020c4:	d8 02       	popm	pc
800020c6:	00 00       	add	r0,r0
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	20 04       	sub	r4,0
800020cc:	80 00       	ld.sh	r0,r0[0x0]
800020ce:	20 30       	sub	r0,3

800020d0 <gpio_enable_module_pin>:
800020d0:	f8 08 16 05 	lsr	r8,r12,0x5
800020d4:	a9 78       	lsl	r8,0x9
800020d6:	e0 28 d8 00 	sub	r8,55296
800020da:	58 7b       	cp.w	r11,7
800020dc:	e0 8b 00 05 	brhi	800020e6 <gpio_enable_module_pin+0x16>
800020e0:	4a 09       	lddpc	r9,80002160 <gpio_enable_module_pin+0x90>
800020e2:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
800020e6:	5e ff       	retal	1
800020e8:	30 19       	mov	r9,1
800020ea:	f2 0c 09 49 	lsl	r9,r9,r12
800020ee:	91 69       	st.w	r8[0x18],r9
800020f0:	91 a9       	st.w	r8[0x28],r9
800020f2:	91 e9       	st.w	r8[0x38],r9
800020f4:	c3 18       	rjmp	80002156 <gpio_enable_module_pin+0x86>
800020f6:	30 19       	mov	r9,1
800020f8:	f2 0c 09 49 	lsl	r9,r9,r12
800020fc:	91 59       	st.w	r8[0x14],r9
800020fe:	91 a9       	st.w	r8[0x28],r9
80002100:	91 e9       	st.w	r8[0x38],r9
80002102:	c2 a8       	rjmp	80002156 <gpio_enable_module_pin+0x86>
80002104:	30 19       	mov	r9,1
80002106:	f2 0c 09 49 	lsl	r9,r9,r12
8000210a:	91 69       	st.w	r8[0x18],r9
8000210c:	91 99       	st.w	r8[0x24],r9
8000210e:	91 e9       	st.w	r8[0x38],r9
80002110:	c2 38       	rjmp	80002156 <gpio_enable_module_pin+0x86>
80002112:	30 19       	mov	r9,1
80002114:	f2 0c 09 49 	lsl	r9,r9,r12
80002118:	91 59       	st.w	r8[0x14],r9
8000211a:	91 99       	st.w	r8[0x24],r9
8000211c:	91 e9       	st.w	r8[0x38],r9
8000211e:	c1 c8       	rjmp	80002156 <gpio_enable_module_pin+0x86>
80002120:	30 19       	mov	r9,1
80002122:	f2 0c 09 49 	lsl	r9,r9,r12
80002126:	91 69       	st.w	r8[0x18],r9
80002128:	91 a9       	st.w	r8[0x28],r9
8000212a:	91 d9       	st.w	r8[0x34],r9
8000212c:	c1 58       	rjmp	80002156 <gpio_enable_module_pin+0x86>
8000212e:	30 19       	mov	r9,1
80002130:	f2 0c 09 49 	lsl	r9,r9,r12
80002134:	91 59       	st.w	r8[0x14],r9
80002136:	91 a9       	st.w	r8[0x28],r9
80002138:	91 d9       	st.w	r8[0x34],r9
8000213a:	c0 e8       	rjmp	80002156 <gpio_enable_module_pin+0x86>
8000213c:	30 19       	mov	r9,1
8000213e:	f2 0c 09 49 	lsl	r9,r9,r12
80002142:	91 69       	st.w	r8[0x18],r9
80002144:	91 99       	st.w	r8[0x24],r9
80002146:	91 d9       	st.w	r8[0x34],r9
80002148:	c0 78       	rjmp	80002156 <gpio_enable_module_pin+0x86>
8000214a:	30 19       	mov	r9,1
8000214c:	f2 0c 09 49 	lsl	r9,r9,r12
80002150:	91 59       	st.w	r8[0x14],r9
80002152:	91 99       	st.w	r8[0x24],r9
80002154:	91 d9       	st.w	r8[0x34],r9
80002156:	30 19       	mov	r9,1
80002158:	f2 0c 09 4c 	lsl	r12,r9,r12
8000215c:	91 2c       	st.w	r8[0x8],r12
8000215e:	5e fd       	retal	0
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	30 00       	mov	r0,0

80002164 <gpio_enable_module>:
80002164:	d4 21       	pushm	r4-r7,lr
80002166:	18 97       	mov	r7,r12
80002168:	16 94       	mov	r4,r11
8000216a:	58 0b       	cp.w	r11,0
8000216c:	c0 31       	brne	80002172 <gpio_enable_module+0xe>
8000216e:	30 05       	mov	r5,0
80002170:	c0 d8       	rjmp	8000218a <gpio_enable_module+0x26>
80002172:	30 06       	mov	r6,0
80002174:	0c 95       	mov	r5,r6
80002176:	6e 1b       	ld.w	r11,r7[0x4]
80002178:	6e 0c       	ld.w	r12,r7[0x0]
8000217a:	f0 1f 00 06 	mcall	80002190 <gpio_enable_module+0x2c>
8000217e:	18 45       	or	r5,r12
80002180:	2f 87       	sub	r7,-8
80002182:	2f f6       	sub	r6,-1
80002184:	0c 34       	cp.w	r4,r6
80002186:	fe 9b ff f8 	brhi	80002176 <gpio_enable_module+0x12>
8000218a:	0a 9c       	mov	r12,r5
8000218c:	d8 22       	popm	r4-r7,pc
8000218e:	00 00       	add	r0,r0
80002190:	80 00       	ld.sh	r0,r0[0x0]
80002192:	20 d0       	sub	r0,13

80002194 <com_spi_interrupt_handler>:


ISR(com_spi_interrupt_handler, AVR32_SPI_IRQ_GROUP, SPI_ARDU_IRQ_LEVEL)
{
	static uint8_t count = UINT8_MAX;
	spi_put(TWI_SENS,count);
80002194:	48 89       	lddpc	r9,800021b4 <com_spi_interrupt_handler+0x20>
80002196:	13 88       	ld.ub	r8,r9[0x0]
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002198:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
8000219c:	fe 7a 40 00 	mov	r10,-49152
800021a0:	95 3b       	st.w	r10[0xc],r11
	if(count--) count = UINT8_MAX;
800021a2:	f0 ca 00 01 	sub	r10,r8,1
800021a6:	b2 8a       	st.b	r9[0x0],r10
800021a8:	58 08       	cp.w	r8,0
800021aa:	c0 40       	breq	800021b2 <com_spi_interrupt_handler+0x1e>
800021ac:	3f f9       	mov	r9,-1
800021ae:	48 28       	lddpc	r8,800021b4 <com_spi_interrupt_handler+0x20>
800021b0:	b0 89       	st.b	r8[0x0],r9
800021b2:	d6 03       	rete
800021b4:	00 00       	add	r0,r0
800021b6:	00 08       	add	r8,r0

800021b8 <com_spi_init>:
};

spi_status_t com_spi_init(void)
{
800021b8:	eb cd 40 80 	pushm	r7,lr

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
800021bc:	fe 78 28 00 	mov	r8,-55296
800021c0:	30 19       	mov	r9,1
800021c2:	f1 49 00 44 	st.w	r8[68],r9
				pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->oderc = arch_ioport_pin_to_mask(
800021c6:	30 27       	mov	r7,2
800021c8:	f1 47 00 48 	st.w	r8[72],r7
800021cc:	30 4a       	mov	r10,4
800021ce:	f1 4a 00 48 	st.w	r8[72],r10
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
800021d2:	f1 49 00 58 	st.w	r8[88],r9
	ioport_set_pin_dir(MOSI_REG,IOPORT_DIR_INPUT);
	ioport_set_pin_dir(SCK_REG, IOPORT_DIR_INPUT);
	ioport_set_pin_level(MISO_REG,IOPORT_PIN_LEVEL_LOW);
	
	static const gpio_map_t SPI_GPIO_MAP =	{{MISO_REG, 0},{MOSI_REG, 0},{SCK_REG,0}};	 //TODO: DEFINE FUNCTION_A 0
	gpio_enable_module(SPI_GPIO_MAP,3);
800021d6:	30 3b       	mov	r11,3
800021d8:	49 2c       	lddpc	r12,80002220 <com_spi_init+0x68>
800021da:	f0 1f 00 13 	mcall	80002224 <com_spi_init+0x6c>
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800021de:	30 ab       	mov	r11,10
800021e0:	0e 9c       	mov	r12,r7
800021e2:	f0 1f 00 12 	mcall	80002228 <com_spi_init+0x70>
	
	sysclk_enable_peripheral_clock(SPI_ARDU);
	
	spi_initSlave(SPI_ARDU,8,SPI_MODE_0);
800021e6:	30 0a       	mov	r10,0
800021e8:	30 8b       	mov	r11,8
800021ea:	fe 7c 3c 00 	mov	r12,-50176
800021ee:	f0 1f 00 10 	mcall	8000222c <com_spi_init+0x74>
	spi_enable(SPI_ARDU);
800021f2:	fe 7c 3c 00 	mov	r12,-50176
800021f6:	f0 1f 00 0f 	mcall	80002230 <com_spi_init+0x78>
	
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
800021fa:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
800021fe:	e6 18 00 01 	andh	r8,0x1,COH
80002202:	c0 21       	brne	80002206 <com_spi_init+0x4e>
		cpu_irq_disable();
80002204:	d3 03       	ssrf	0x10
	}	
	irq_register_handler(com_spi_interrupt_handler, AVR32_SPI_IRQ, SPI_ARDU_IRQ_LEVEL);
80002206:	30 1a       	mov	r10,1
80002208:	e0 6b 01 20 	mov	r11,288
8000220c:	48 ac       	lddpc	r12,80002234 <com_spi_init+0x7c>
8000220e:	f0 1f 00 0b 	mcall	80002238 <com_spi_init+0x80>
	(*SPI_ARDU).ier = AVR32_SPI_IER_TDRE_MASK; //enable Interrupt
80002212:	30 29       	mov	r9,2
80002214:	fe 78 3c 00 	mov	r8,-50176
80002218:	91 59       	st.w	r8[0x14],r9
	cpu_irq_enable();
8000221a:	d5 03       	csrf	0x10
	
	return SPI_OK;
}
8000221c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002220:	80 00       	ld.sh	r0,r0[0x0]
80002222:	30 20       	mov	r0,2
80002224:	80 00       	ld.sh	r0,r0[0x0]
80002226:	21 64       	sub	r4,22
80002228:	80 00       	ld.sh	r0,r0[0x0]
8000222a:	25 28       	sub	r8,82
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	25 6a       	sub	r10,86
80002230:	80 00       	ld.sh	r0,r0[0x0]
80002232:	25 b0       	sub	r0,91
80002234:	80 00       	ld.sh	r0,r0[0x0]
80002236:	21 94       	sub	r4,25
80002238:	80 00       	ld.sh	r0,r0[0x0]
8000223a:	29 c0       	sub	r0,-100

8000223c <sensor_led_init>:

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
8000223c:	fe 78 28 00 	mov	r8,-55296
80002240:	e0 69 40 00 	mov	r9,16384
80002244:	f1 49 00 54 	st.w	r8[84],r9
80002248:	e2 6a 00 00 	mov	r10,131072
8000224c:	f1 4a 00 54 	st.w	r8[84],r10
80002250:	e0 6b 80 00 	mov	r11,32768
80002254:	f1 4b 00 54 	st.w	r8[84],r11

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
80002258:	f1 4b 00 44 	st.w	r8[68],r11
8000225c:	f1 4a 00 44 	st.w	r8[68],r10
80002260:	f1 49 00 44 	st.w	r8[68],r9
	ioport_set_pin_level(LED_G_SENS, LED_SENS_OFF);
	ioport_set_pin_level(LED_R_SENS, LED_SENS_OFF);
	ioport_set_pin_dir(LED_R_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_G_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_B_SENS, IOPORT_DIR_OUTPUT);
}
80002264:	5e fc       	retal	r12
80002266:	d7 03       	nop

80002268 <write_sensor_data>:
	return twim_read_packet(TWI_SENS, &pack);
	//return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
}

status_code_t write_sensor_data(bno055_register_addr_t _addr, uint8_t *values, uint_fast8_t count)
{
80002268:	eb cd 40 c0 	pushm	r6-r7,lr
8000226c:	1a 97       	mov	r7,sp
8000226e:	14 98       	mov	r8,r10
	uint8_t volatile _values[count + 1];
	_values[0] = _addr;
	for (uint_fast8_t i = 0; i< count; i++) _values[i+1] = values[i];
	
	return twim_write(TWI_SENS, &_values, count + 1, BNO055_TWI_ADDR_SENSOR, false);
}
80002270:	1a 96       	mov	r6,sp
	//return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
}

status_code_t write_sensor_data(bno055_register_addr_t _addr, uint8_t *values, uint_fast8_t count)
{
	uint8_t volatile _values[count + 1];
80002272:	2f fa       	sub	r10,-1
80002274:	f0 c9 ff f9 	sub	r9,r8,-7
80002278:	e0 19 ff fc 	andl	r9,0xfffc
8000227c:	12 1d       	sub	sp,r9
8000227e:	1a 9e       	mov	lr,sp
	_values[0] = _addr;
80002280:	ba 8c       	st.b	sp[0x0],r12
	for (uint_fast8_t i = 0; i< count; i++) _values[i+1] = values[i];
80002282:	58 08       	cp.w	r8,0
80002284:	c0 90       	breq	80002296 <write_sensor_data+0x2e>
80002286:	30 09       	mov	r9,0
80002288:	2f f9       	sub	r9,-1
8000228a:	17 3c       	ld.ub	r12,r11++
8000228c:	fc 09 0b 0c 	st.b	lr[r9],r12
80002290:	12 38       	cp.w	r8,r9
80002292:	fe 9b ff fb 	brhi	80002288 <write_sensor_data+0x20>
	
	return twim_write(TWI_SENS, &_values, count + 1, BNO055_TWI_ADDR_SENSOR, false);
80002296:	30 08       	mov	r8,0
80002298:	32 89       	mov	r9,40
8000229a:	1c 9b       	mov	r11,lr
8000229c:	fe 7c 40 00 	mov	r12,-49152
800022a0:	f0 1f 00 03 	mcall	800022ac <write_sensor_data+0x44>
}
800022a4:	0c 9d       	mov	sp,r6
800022a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022aa:	00 00       	add	r0,r0
800022ac:	80 00       	ld.sh	r0,r0[0x0]
800022ae:	27 1c       	sub	r12,113

800022b0 <read_sensor_data>:
	ioport_set_pin_dir(LED_R_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_G_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_B_SENS, IOPORT_DIR_OUTPUT);
}

status_code_t read_sensor_data(bno055_register_addr_t _addr, const uint8_t *values, uint32_t count){
800022b0:	d4 01       	pushm	lr
800022b2:	20 5d       	sub	sp,20
	twim_package_t pack;
	pack.addr[0] = _addr;
800022b4:	ba cc       	st.b	sp[0x4],r12
	pack.addr_length = 1;
800022b6:	30 18       	mov	r8,1
800022b8:	ba f8       	st.b	sp[0x7],r8
	pack.buffer = values;
800022ba:	50 2b       	stdsp	sp[0x8],r11
	pack.chip = BNO055_TWI_ADDR_SENSOR;
800022bc:	32 88       	mov	r8,40
800022be:	50 08       	stdsp	sp[0x0],r8
	pack.length = count;
800022c0:	50 3a       	stdsp	sp[0xc],r10
	pack.no_wait = false;
800022c2:	30 08       	mov	r8,0
800022c4:	fb 68 00 10 	st.b	sp[16],r8
	
	return twim_read_packet(TWI_SENS, &pack);
800022c8:	1a 9b       	mov	r11,sp
800022ca:	fe 7c 40 00 	mov	r12,-49152
800022ce:	f0 1f 00 03 	mcall	800022d8 <read_sensor_data+0x28>
	//return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
}
800022d2:	2f bd       	sub	sp,-20
800022d4:	d8 02       	popm	pc
800022d6:	00 00       	add	r0,r0
800022d8:	80 00       	ld.sh	r0,r0[0x0]
800022da:	27 ec       	sub	r12,126

800022dc <sensor_init>:
 *  Author: Markus
 */ 
#include "asf.h"
#include "sensor.h" 

void sensor_init(void){
800022dc:	eb cd 40 e0 	pushm	r5-r7,lr
800022e0:	20 5d       	sub	sp,20
800022e2:	fe 77 28 00 	mov	r7,-55296
800022e6:	e0 76 00 00 	mov	r6,65536
800022ea:	ef 46 00 44 	st.w	r7[68],r6
800022ee:	e0 65 01 00 	mov	r5,256
800022f2:	ef 45 00 44 	st.w	r7[68],r5
				pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->oderc = arch_ioport_pin_to_mask(
800022f6:	e0 68 20 00 	mov	r8,8192
800022fa:	ef 48 00 48 	st.w	r7[72],r8
	//ioport_set_pin_dir(BOOT_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(ADDR0_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(RST_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(INT_SENS, IOPORT_DIR_INPUT);
	
	sensor_led_init();
800022fe:	f0 1f 00 49 	mcall	80002420 <sensor_init+0x144>
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002302:	ef 46 00 58 	st.w	r7[88],r6
80002306:	ef 45 00 58 	st.w	r7[88],r5
8000230a:	30 bb       	mov	r11,11
8000230c:	30 2c       	mov	r12,2
8000230e:	f0 1f 00 46 	mcall	80002424 <sensor_init+0x148>
	ioport_set_pin_level(RST_SENS, LOW);
	
	sysclk_enable_peripheral_clock(TWI_SENS);
	
	static const gpio_map_t TWI_GPIO_MAP =	{{SDA_SENS, 0},{SCL_SENS, 0}};	 //TODO: DEFINE FUNCTION_A 0
	gpio_enable_module(TWI_GPIO_MAP,2);
80002312:	30 2b       	mov	r11,2
80002314:	4c 5c       	lddpc	r12,80002428 <sensor_init+0x14c>
80002316:	f0 1f 00 46 	mcall	8000242c <sensor_init+0x150>
		
	twim_options_t _twi_opt;
	_twi_opt.chip = BNO055_TWI_ADDR_SENSOR;
8000231a:	32 88       	mov	r8,40
8000231c:	50 38       	stdsp	sp[0xc],r8
	_twi_opt.pba_hz = sysclk_get_pba_hz();
8000231e:	e0 68 c3 80 	mov	r8,50048
80002322:	ea 18 01 c9 	orh	r8,0x1c9
80002326:	50 18       	stdsp	sp[0x4],r8
	_twi_opt.smbus = false;
80002328:	30 08       	mov	r8,0
8000232a:	fb 68 00 10 	st.b	sp[16],r8
	_twi_opt.speed = TWI_SENS_SPEED;
8000232e:	e6 68 1a 80 	mov	r8,400000
80002332:	50 28       	stdsp	sp[0x8],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002334:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002338:	e2 69 49 f0 	mov	r9,150000
8000233c:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002340:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002344:	14 38       	cp.w	r8,r10
80002346:	e0 88 00 08 	brls	80002356 <sensor_init+0x7a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000234a:	12 38       	cp.w	r8,r9
8000234c:	fe 98 ff fa 	brls	80002340 <sensor_init+0x64>
80002350:	12 3a       	cp.w	r10,r9
80002352:	c2 a3       	brcs	800023a6 <sensor_init+0xca>
80002354:	cf 6b       	rjmp	80002340 <sensor_init+0x64>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002356:	12 38       	cp.w	r8,r9
80002358:	e0 8b 00 27 	brhi	800023a6 <sensor_init+0xca>
8000235c:	12 3a       	cp.w	r10,r9
8000235e:	c2 43       	brcs	800023a6 <sensor_init+0xca>
80002360:	cf 0b       	rjmp	80002340 <sensor_init+0x64>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002362:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002366:	14 38       	cp.w	r8,r10
80002368:	e0 88 00 08 	brls	80002378 <sensor_init+0x9c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000236c:	12 38       	cp.w	r8,r9
8000236e:	fe 98 ff fa 	brls	80002362 <sensor_init+0x86>
80002372:	12 3a       	cp.w	r10,r9
80002374:	c2 83       	brcs	800023c4 <sensor_init+0xe8>
80002376:	cf 6b       	rjmp	80002362 <sensor_init+0x86>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002378:	12 38       	cp.w	r8,r9
8000237a:	e0 8b 00 25 	brhi	800023c4 <sensor_init+0xe8>
8000237e:	12 3a       	cp.w	r10,r9
80002380:	c2 23       	brcs	800023c4 <sensor_init+0xe8>
80002382:	cf 0b       	rjmp	80002362 <sensor_init+0x86>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002384:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002388:	14 38       	cp.w	r8,r10
8000238a:	e0 88 00 08 	brls	8000239a <sensor_init+0xbe>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000238e:	12 38       	cp.w	r8,r9
80002390:	fe 98 ff fa 	brls	80002384 <sensor_init+0xa8>
80002394:	12 3a       	cp.w	r10,r9
80002396:	c4 13       	brcs	80002418 <sensor_init+0x13c>
80002398:	cf 6b       	rjmp	80002384 <sensor_init+0xa8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000239a:	12 38       	cp.w	r8,r9
8000239c:	e0 8b 00 3e 	brhi	80002418 <sensor_init+0x13c>
800023a0:	12 3a       	cp.w	r10,r9
800023a2:	c3 b3       	brcs	80002418 <sensor_init+0x13c>
800023a4:	cf 0b       	rjmp	80002384 <sensor_init+0xa8>

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
800023a6:	e0 69 01 00 	mov	r9,256
800023aa:	fe 78 28 00 	mov	r8,-55296
800023ae:	f1 49 00 54 	st.w	r8[84],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023b2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023b6:	e0 6a 6f 40 	mov	r10,28480
800023ba:	ea 1a 01 40 	orh	r10,0x140
800023be:	f0 0a 00 0a 	add	r10,r8,r10
800023c2:	cd 0b       	rjmp	80002362 <sensor_init+0x86>
	
	delay_ms(5);
	ioport_set_pin_level(RST_SENS, HIGH);
	delay_ms(BNO055_STARTUP_TIME_MS);							//SENSOR STARTUP TIME
	twim_master_init(TWI_SENS, &_twi_opt);
800023c4:	fa cb ff fc 	sub	r11,sp,-4
800023c8:	fe 7c 40 00 	mov	r12,-49152
800023cc:	f0 1f 00 19 	mcall	80002430 <sensor_init+0x154>
	
	//Konfigurieren des Sensores
	
	//REMAP X AS Y
	uint8_t val;
	val = BNO055_REMAP_X_Y;
800023d0:	32 18       	mov	r8,33
800023d2:	ba b8       	st.b	sp[0x3],r8
	write_sensor_data(BNO055_AXIS_MAP_CONFIG_ADDR, &val,1);											//AXIS REMAPPING
800023d4:	fa c7 ff fd 	sub	r7,sp,-3
800023d8:	30 1a       	mov	r10,1
800023da:	0e 9b       	mov	r11,r7
800023dc:	34 1c       	mov	r12,65
800023de:	f0 1f 00 16 	mcall	80002434 <sensor_init+0x158>
	val = (BNO055_REMAP_AXIS_POSITIVE)&(BNO055_REMAP_AXIS_POSITIVE)&(BNO055_REMAP_AXIS_POSITIVE);
800023e2:	30 06       	mov	r6,0
800023e4:	ba b6       	st.b	sp[0x3],r6
	write_sensor_data(BNO055_AXIS_MAP_SIGN_ADDR, &val, 1);														//AXIS REMAPPING SIGN
800023e6:	30 1a       	mov	r10,1
800023e8:	0e 9b       	mov	r11,r7
800023ea:	34 2c       	mov	r12,66
800023ec:	f0 1f 00 12 	mcall	80002434 <sensor_init+0x158>
	
	//Output Data Format
	val = (BNO055_ACCEL_UNIT_MSQ << BNO055_ACCEL_UNIT_POS) & \
800023f0:	ba b6       	st.b	sp[0x3],r6
		(BNO055_GYRO_UNIT_RPS << BNO055_GYRO_UNIT_POS) & \
		(BNO055_EULER_UNIT_DEG << BNO055_EULER_UNIT_POS) & \
		(BNO055_TEMP_UNIT_CELSIUS << BNO055_TEMP_UNIT_POS); 
	write_sensor_data(BNO055_UNIT_SEL_ADDR, &val, 1);
800023f2:	30 1a       	mov	r10,1
800023f4:	0e 9b       	mov	r11,r7
800023f6:	33 bc       	mov	r12,59
800023f8:	f0 1f 00 0f 	mcall	80002434 <sensor_init+0x158>
	
	val = BNO055_OPERATION_MODE_NDOF;
800023fc:	30 c8       	mov	r8,12
800023fe:	ba b8       	st.b	sp[0x3],r8
	write_sensor_data(BNO055_OPR_MODE_ADDR, &val,1);
80002400:	30 1a       	mov	r10,1
80002402:	0e 9b       	mov	r11,r7
80002404:	33 dc       	mov	r12,61
80002406:	f0 1f 00 0c 	mcall	80002434 <sensor_init+0x158>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000240a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000240e:	e8 79 27 c0 	mov	r9,600000
80002412:	f0 09 00 0a 	add	r10,r8,r9
80002416:	cb 7b       	rjmp	80002384 <sensor_init+0xa8>
	delay_ms(BNO055_SWITCH_OP_TIME_MS);												//SENSOR SWITCHING OPERATION MODE TIME
}
80002418:	2f bd       	sub	sp,-20
8000241a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000241e:	00 00       	add	r0,r0
80002420:	80 00       	ld.sh	r0,r0[0x0]
80002422:	22 3c       	sub	r12,35
80002424:	80 00       	ld.sh	r0,r0[0x0]
80002426:	25 28       	sub	r8,82
80002428:	80 00       	ld.sh	r0,r0[0x0]
8000242a:	30 38       	mov	r8,3
8000242c:	80 00       	ld.sh	r0,r0[0x0]
8000242e:	21 64       	sub	r4,22
80002430:	80 00       	ld.sh	r0,r0[0x0]
80002432:	28 fc       	sub	r12,-113
80002434:	80 00       	ld.sh	r0,r0[0x0]
80002436:	22 68       	sub	r8,38

80002438 <osc_priv_enable_rc120m>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC32_HZ */

void osc_priv_enable_rc120m(void)
{
80002438:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000243a:	e1 b8 00 00 	mfsr	r8,0x0
8000243e:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002440:	d3 03       	ssrf	0x10

	return flags;
80002442:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80002444:	fe 78 58 00 	mov	r8,-43008
80002448:	34 4a       	mov	r10,68
8000244a:	ea 1a aa 00 	orh	r10,0xaa00
8000244e:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80002450:	30 1a       	mov	r10,1
80002452:	f1 4a 00 44 	st.w	r8[68],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002456:	12 98       	mov	r8,r9
80002458:	e6 18 00 01 	andh	r8,0x1,COH
8000245c:	c0 21       	brne	80002460 <osc_priv_enable_rc120m+0x28>
      cpu_irq_enable();
8000245e:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002460:	2f fd       	sub	sp,-4
80002462:	5e fc       	retal	r12

80002464 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80002464:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002466:	e1 b8 00 00 	mfsr	r8,0x0
8000246a:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
8000246c:	d3 03       	ssrf	0x10

	return flags;
8000246e:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL1);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80002470:	fe 78 14 00 	mov	r8,-60416
80002474:	fc 1a aa 00 	movh	r10,0xaa00
80002478:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
8000247c:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000247e:	12 98       	mov	r8,r9
80002480:	e6 18 00 01 	andh	r8,0x1,COH
80002484:	c0 21       	brne	80002488 <sysclk_set_source+0x24>
      cpu_irq_enable();
80002486:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002488:	2f fd       	sub	sp,-4
8000248a:	5e fc       	retal	r12

8000248c <sysclk_set_prescalers>:
 * \param pba_shift The PBA clock will be divided by \f$2^{pba\_shift}\f$
 * \param pbb_shift The PBB clock will be divided by \f$2^{pbb\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift)
{
8000248c:	d4 01       	pushm	lr
8000248e:	20 1d       	sub	sp,4
	uint32_t   pbb_cksel = 0;

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
80002490:	58 0c       	cp.w	r12,0
80002492:	c0 30       	breq	80002498 <sysclk_set_prescalers+0xc>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_OFFSET)
80002494:	20 1c       	sub	r12,1
80002496:	a7 bc       	sbr	r12,0x7
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
80002498:	58 0b       	cp.w	r11,0
8000249a:	c0 30       	breq	800024a0 <sysclk_set_prescalers+0x14>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_OFFSET)
8000249c:	20 1b       	sub	r11,1
8000249e:	a7 bb       	sbr	r11,0x7
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
800024a0:	58 0a       	cp.w	r10,0
800024a2:	c0 30       	breq	800024a8 <sysclk_set_prescalers+0x1c>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_OFFSET)
800024a4:	20 1a       	sub	r10,1
800024a6:	a7 ba       	sbr	r10,0x7

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024a8:	e1 b8 00 00 	mfsr	r8,0x0
800024ac:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800024ae:	d3 03       	ssrf	0x10

	return flags;
800024b0:	40 09       	lddsp	r9,sp[0x0]
				| (1U << AVR32_PM_PBBDIV);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
800024b2:	fe 78 14 00 	mov	r8,-60416
800024b6:	30 4e       	mov	lr,4
800024b8:	ea 1e aa 00 	orh	lr,0xaa00
800024bc:	f1 4e 00 58 	st.w	r8[88],lr
	AVR32_PM.cpusel = cpu_cksel;
800024c0:	91 1c       	st.w	r8[0x4],r12
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
800024c2:	30 cc       	mov	r12,12
800024c4:	ea 1c aa 00 	orh	r12,0xaa00
800024c8:	f1 4c 00 58 	st.w	r8[88],r12
	AVR32_PM.pbasel = pba_cksel;
800024cc:	91 3b       	st.w	r8[0xc],r11
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
800024ce:	31 0b       	mov	r11,16
800024d0:	ea 1b aa 00 	orh	r11,0xaa00
800024d4:	f1 4b 00 58 	st.w	r8[88],r11
	AVR32_PM.pbbsel = pbb_cksel;
800024d8:	91 4a       	st.w	r8[0x10],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024da:	12 98       	mov	r8,r9
800024dc:	e6 18 00 01 	andh	r8,0x1,COH
800024e0:	c0 21       	brne	800024e4 <sysclk_set_prescalers+0x58>
      cpu_irq_enable();
800024e2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800024e4:	2f fd       	sub	sp,-4
800024e6:	d8 02       	popm	pc

800024e8 <sysclk_init>:
#endif // CONFIG_USBCLK_SOURCE



void sysclk_init(void)
{
800024e8:	d4 01       	pushm	lr
	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
800024ea:	30 2a       	mov	r10,2
800024ec:	14 9b       	mov	r11,r10
800024ee:	14 9c       	mov	r12,r10
800024f0:	f0 1f 00 0a 	mcall	80002518 <sysclk_init+0x30>
		osc_priv_enable_osc32();
		break;
#endif

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
800024f4:	f0 1f 00 0a 	mcall	8000251c <sysclk_init+0x34>
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
800024f8:	fe 78 58 00 	mov	r8,-43008
800024fc:	71 19       	ld.w	r9,r8[0x44]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800024fe:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80002502:	cf d0       	breq	800024fc <sysclk_init+0x14>
#endif
	case SYSCLK_SRC_RC120M:
		osc_enable(OSC_ID_RC120M);
		osc_wait_ready(OSC_ID_RC120M);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80002504:	e0 6c c3 80 	mov	r12,50048
80002508:	ea 1c 01 c9 	orh	r12,0x1c9
8000250c:	f0 1f 00 05 	mcall	80002520 <sysclk_init+0x38>
		sysclk_set_source(SYSCLK_SRC_RC120M);
80002510:	30 4c       	mov	r12,4
80002512:	f0 1f 00 05 	mcall	80002524 <sysclk_init+0x3c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002516:	d8 02       	popm	pc
80002518:	80 00       	ld.sh	r0,r0[0x0]
8000251a:	24 8c       	sub	r12,72
8000251c:	80 00       	ld.sh	r0,r0[0x0]
8000251e:	24 38       	sub	r8,67
80002520:	80 00       	ld.sh	r0,r0[0x0]
80002522:	20 78       	sub	r8,7
80002524:	80 00       	ld.sh	r0,r0[0x0]
80002526:	24 64       	sub	r4,70

80002528 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002528:	d4 01       	pushm	lr
8000252a:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000252c:	e1 b8 00 00 	mfsr	r8,0x0
80002530:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002532:	d3 03       	ssrf	0x10

	return flags;
80002534:	40 09       	lddsp	r9,sp[0x0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002536:	a3 6c       	lsl	r12,0x2
80002538:	fe 7a 14 20 	mov	r10,-60384
8000253c:	f8 0a 00 08 	add	r8,r12,r10
80002540:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002542:	30 1e       	mov	lr,1
80002544:	fc 0b 09 4b 	lsl	r11,lr,r11
80002548:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8000254a:	32 0a       	mov	r10,32
8000254c:	ea 1a aa 00 	orh	r10,0xaa00
80002550:	14 0c       	add	r12,r10
80002552:	fe 7a 14 00 	mov	r10,-60416
80002556:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000255a:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000255c:	12 98       	mov	r8,r9
8000255e:	e6 18 00 01 	andh	r8,0x1,COH
80002562:	c0 21       	brne	80002566 <sysclk_priv_enable_module+0x3e>
      cpu_irq_enable();
80002564:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002566:	2f fd       	sub	sp,-4
80002568:	d8 02       	popm	pc

8000256a <spi_initSlave>:
8000256a:	30 38       	mov	r8,3
8000256c:	f0 0a 18 00 	cp.b	r10,r8
80002570:	5f b9       	srhi	r9
80002572:	30 78       	mov	r8,7
80002574:	f0 0b 18 00 	cp.b	r11,r8
80002578:	5f 88       	srls	r8
8000257a:	f3 e8 10 08 	or	r8,r9,r8
8000257e:	c1 71       	brne	800025ac <spi_initSlave+0x42>
80002580:	31 08       	mov	r8,16
80002582:	f0 0b 18 00 	cp.b	r11,r8
80002586:	e0 8b 00 13 	brhi	800025ac <spi_initSlave+0x42>
8000258a:	e0 68 00 80 	mov	r8,128
8000258e:	99 08       	st.w	r12[0x0],r8
80002590:	f1 da c0 01 	bfextu	r8,r10,0x0,0x1
80002594:	f9 b8 00 02 	moveq	r8,2
80002598:	f9 b8 01 00 	movne	r8,0
8000259c:	20 8b       	sub	r11,8
8000259e:	a1 9a       	lsr	r10,0x1
800025a0:	f5 eb 10 4a 	or	r10,r10,r11<<0x4
800025a4:	f5 e8 10 08 	or	r8,r10,r8
800025a8:	99 c8       	st.w	r12[0x30],r8
800025aa:	5e fd       	retal	0
800025ac:	30 2c       	mov	r12,2
800025ae:	5e fc       	retal	r12

800025b0 <spi_enable>:
800025b0:	30 18       	mov	r8,1
800025b2:	99 08       	st.w	r12[0x0],r8
800025b4:	5e fc       	retal	r12
800025b6:	d7 03       	nop

800025b8 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
800025b8:	4a e8       	lddpc	r8,80002670 <twim_master_interrupt_handler+0xb8>
800025ba:	70 08       	ld.w	r8,r8[0x0]
800025bc:	70 79       	ld.w	r9,r8[0x1c]
800025be:	4a ea       	lddpc	r10,80002674 <twim_master_interrupt_handler+0xbc>
800025c0:	74 0a       	ld.w	r10,r10[0x0]
800025c2:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
800025c6:	12 9a       	mov	r10,r9
800025c8:	e2 1a 07 00 	andl	r10,0x700,COH
800025cc:	c1 40       	breq	800025f4 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
800025ce:	e2 19 03 00 	andl	r9,0x300,COH
800025d2:	f9 b9 01 fc 	movne	r9,-4
800025d6:	f9 b9 00 fe 	moveq	r9,-2
800025da:	4a 8a       	lddpc	r10,80002678 <twim_master_interrupt_handler+0xc0>
800025dc:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
800025de:	70 3a       	ld.w	r10,r8[0xc]
800025e0:	30 09       	mov	r9,0
800025e2:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
800025e6:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
800025e8:	3f fa       	mov	r10,-1
800025ea:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
800025ec:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
800025ee:	4a 48       	lddpc	r8,8000267c <twim_master_interrupt_handler+0xc4>
800025f0:	b0 89       	st.b	r8[0x0],r9
800025f2:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
800025f4:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
800025f8:	c1 30       	breq	8000261e <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
800025fa:	4a 2a       	lddpc	r10,80002680 <twim_master_interrupt_handler+0xc8>
800025fc:	70 5b       	ld.w	r11,r8[0x14]
800025fe:	74 09       	ld.w	r9,r10[0x0]
80002600:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80002602:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002604:	4a 09       	lddpc	r9,80002684 <twim_master_interrupt_handler+0xcc>
80002606:	72 0a       	ld.w	r10,r9[0x0]
80002608:	20 1a       	sub	r10,1
8000260a:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8000260c:	72 09       	ld.w	r9,r9[0x0]
8000260e:	58 09       	cp.w	r9,0
80002610:	c2 f1       	brne	8000266e <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80002612:	30 19       	mov	r9,1
80002614:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002616:	30 09       	mov	r9,0
80002618:	49 98       	lddpc	r8,8000267c <twim_master_interrupt_handler+0xc4>
8000261a:	b0 89       	st.b	r8[0x0],r9
8000261c:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000261e:	e2 19 00 02 	andl	r9,0x2,COH
80002622:	c2 60       	breq	8000266e <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002624:	49 99       	lddpc	r9,80002688 <twim_master_interrupt_handler+0xd0>
80002626:	72 09       	ld.w	r9,r9[0x0]
80002628:	58 09       	cp.w	r9,0
8000262a:	c0 71       	brne	80002638 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8000262c:	30 29       	mov	r9,2
8000262e:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002630:	30 09       	mov	r9,0
80002632:	49 38       	lddpc	r8,8000267c <twim_master_interrupt_handler+0xc4>
80002634:	b0 89       	st.b	r8[0x0],r9
80002636:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002638:	49 5a       	lddpc	r10,8000268c <twim_master_interrupt_handler+0xd4>
8000263a:	74 09       	ld.w	r9,r10[0x0]
8000263c:	13 3b       	ld.ub	r11,r9++
8000263e:	91 6b       	st.w	r8[0x18],r11
80002640:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80002642:	49 28       	lddpc	r8,80002688 <twim_master_interrupt_handler+0xd0>
80002644:	70 09       	ld.w	r9,r8[0x0]
80002646:	20 19       	sub	r9,1
80002648:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8000264a:	70 08       	ld.w	r8,r8[0x0]
8000264c:	58 08       	cp.w	r8,0
8000264e:	c1 01       	brne	8000266e <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
80002650:	48 b8       	lddpc	r8,8000267c <twim_master_interrupt_handler+0xc4>
80002652:	11 88       	ld.ub	r8,r8[0x0]
80002654:	58 08       	cp.w	r8,0
80002656:	c0 c0       	breq	8000266e <twim_master_interrupt_handler+0xb6>
					twim_next = false;
80002658:	30 09       	mov	r9,0
8000265a:	48 98       	lddpc	r8,8000267c <twim_master_interrupt_handler+0xc4>
8000265c:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
8000265e:	48 d8       	lddpc	r8,80002690 <twim_master_interrupt_handler+0xd8>
80002660:	70 08       	ld.w	r8,r8[0x0]
80002662:	70 3a       	ld.w	r10,r8[0xc]
80002664:	48 99       	lddpc	r9,80002688 <twim_master_interrupt_handler+0xd0>
80002666:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
80002668:	70 29       	ld.w	r9,r8[0x8]
8000266a:	48 98       	lddpc	r8,8000268c <twim_master_interrupt_handler+0xd4>
8000266c:	91 09       	st.w	r8[0x0],r9
8000266e:	d6 03       	rete
80002670:	00 00       	add	r0,r0
80002672:	00 14       	sub	r4,r0
80002674:	00 00       	add	r0,r0
80002676:	00 28       	rsub	r8,r0
80002678:	00 00       	add	r0,r0
8000267a:	00 20       	rsub	r0,r0
8000267c:	00 00       	add	r0,r0
8000267e:	00 2c       	rsub	r12,r0
80002680:	00 00       	add	r0,r0
80002682:	00 18       	sub	r8,r0
80002684:	00 00       	add	r0,r0
80002686:	00 1c       	sub	r12,r0
80002688:	00 00       	add	r0,r0
8000268a:	00 34       	cp.w	r4,r0
8000268c:	00 00       	add	r0,r0
8000268e:	00 24       	rsub	r4,r0
80002690:	00 00       	add	r0,r0
80002692:	00 30       	cp.w	r0,r0

80002694 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80002694:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80002698:	f4 0b 0d 0a 	divu	r10,r10,r11
8000269c:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800026a0:	e0 48 00 ff 	cp.w	r8,255
800026a4:	e0 8b 00 04 	brhi	800026ac <twim_set_speed+0x18>
800026a8:	30 09       	mov	r9,0
800026aa:	c1 a8       	rjmp	800026de <twim_set_speed+0x4a>
800026ac:	30 09       	mov	r9,0
800026ae:	30 77       	mov	r7,7
800026b0:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
800026b2:	2f f9       	sub	r9,-1
800026b4:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
800026b6:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800026b8:	e0 48 00 ff 	cp.w	r8,255
800026bc:	5f bb       	srhi	r11
800026be:	ee 09 18 00 	cp.b	r9,r7
800026c2:	5f 8a       	srls	r10
800026c4:	f7 ea 00 0a 	and	r10,r11,r10
800026c8:	fc 0a 18 00 	cp.b	r10,lr
800026cc:	cf 31       	brne	800026b2 <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
800026ce:	30 7a       	mov	r10,7
800026d0:	f4 09 18 00 	cp.b	r9,r10
800026d4:	e0 88 00 05 	brls	800026de <twim_set_speed+0x4a>
800026d8:	3f 8c       	mov	r12,-8
800026da:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
800026de:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
800026e2:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
800026e6:	14 18       	sub	r8,r10
800026e8:	f7 e8 10 88 	or	r8,r11,r8<<0x8
800026ec:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
800026f0:	99 19       	st.w	r12[0x4],r9
800026f2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800026f6:	d7 03       	nop

800026f8 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
800026f8:	48 38       	lddpc	r8,80002704 <twim_status+0xc>
800026fa:	70 08       	ld.w	r8,r8[0x0]
800026fc:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
800026fe:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002702:	5e fc       	retal	r12
80002704:	00 00       	add	r0,r0
80002706:	00 14       	sub	r4,r0

80002708 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002708:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
8000270c:	e6 18 00 01 	andh	r8,0x1,COH
80002710:	c0 21       	brne	80002714 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
80002712:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002714:	3f f8       	mov	r8,-1
80002716:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002718:	99 b8       	st.w	r12[0x2c],r8
}
8000271a:	5e fc       	retal	r12

8000271c <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8000271c:	eb cd 40 fe 	pushm	r1-r7,lr
80002720:	18 97       	mov	r7,r12
80002722:	16 93       	mov	r3,r11
80002724:	14 95       	mov	r5,r10
80002726:	12 92       	mov	r2,r9
80002728:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000272a:	30 14       	mov	r4,1
8000272c:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000272e:	e0 68 00 80 	mov	r8,128
80002732:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002734:	30 28       	mov	r8,2
80002736:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002738:	49 e6       	lddpc	r6,800027b0 <twim_write+0x94>
8000273a:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000273c:	f0 1f 00 1e 	mcall	800027b4 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80002740:	49 e8       	lddpc	r8,800027b8 <twim_write+0x9c>
80002742:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80002744:	49 e8       	lddpc	r8,800027bc <twim_write+0xa0>
80002746:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
80002748:	30 09       	mov	r9,0
8000274a:	49 e8       	lddpc	r8,800027c0 <twim_write+0xa4>
8000274c:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000274e:	49 e9       	lddpc	r9,800027c4 <twim_write+0xa8>
80002750:	30 08       	mov	r8,0
80002752:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80002754:	6c 08       	ld.w	r8,r6[0x0]
80002756:	b1 65       	lsl	r5,0x10
80002758:	e8 15 e0 00 	orl	r5,0xe000
8000275c:	eb e2 10 12 	or	r2,r5,r2<<0x1
80002760:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
80002764:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80002766:	49 9a       	lddpc	r10,800027c8 <twim_write+0xac>
80002768:	e0 6b 03 02 	mov	r11,770
8000276c:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8000276e:	74 0a       	ld.w	r10,r10[0x0]
80002770:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002772:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
80002774:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002776:	72 08       	ld.w	r8,r9[0x0]
80002778:	58 08       	cp.w	r8,0
8000277a:	c0 80       	breq	8000278a <twim_write+0x6e>
8000277c:	c0 b8       	rjmp	80002792 <twim_write+0x76>
		cpu_relax();
8000277e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002782:	6c 08       	ld.w	r8,r6[0x0]
80002784:	58 08       	cp.w	r8,0
80002786:	c0 30       	breq	8000278c <twim_write+0x70>
80002788:	c0 58       	rjmp	80002792 <twim_write+0x76>
8000278a:	48 f6       	lddpc	r6,800027c4 <twim_write+0xa8>
8000278c:	f0 1f 00 10 	mcall	800027cc <twim_write+0xb0>
80002790:	cf 70       	breq	8000277e <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002792:	30 28       	mov	r8,2
80002794:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002796:	48 c8       	lddpc	r8,800027c4 <twim_write+0xa8>
80002798:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8000279a:	5b c8       	cp.w	r8,-4
8000279c:	c0 70       	breq	800027aa <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000279e:	48 a8       	lddpc	r8,800027c4 <twim_write+0xa8>
800027a0:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800027a2:	5b e8       	cp.w	r8,-2
800027a4:	c0 30       	breq	800027aa <twim_write+0x8e>
800027a6:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800027aa:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
800027ae:	00 00       	add	r0,r0
800027b0:	00 00       	add	r0,r0
800027b2:	00 14       	sub	r4,r0
800027b4:	80 00       	ld.sh	r0,r0[0x0]
800027b6:	27 08       	sub	r8,112
800027b8:	00 00       	add	r0,r0
800027ba:	00 24       	rsub	r4,r0
800027bc:	00 00       	add	r0,r0
800027be:	00 34       	cp.w	r4,r0
800027c0:	00 00       	add	r0,r0
800027c2:	00 2c       	rsub	r12,r0
800027c4:	00 00       	add	r0,r0
800027c6:	00 20       	rsub	r0,r0
800027c8:	00 00       	add	r0,r0
800027ca:	00 28       	rsub	r8,r0
800027cc:	80 00       	ld.sh	r0,r0[0x0]
800027ce:	26 f8       	sub	r8,111

800027d0 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
800027d0:	d4 01       	pushm	lr
800027d2:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
800027d4:	30 08       	mov	r8,0
800027d6:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
800027d8:	30 08       	mov	r8,0
800027da:	16 99       	mov	r9,r11
800027dc:	10 9a       	mov	r10,r8
800027de:	1a 9b       	mov	r11,sp
800027e0:	f0 1f 00 02 	mcall	800027e8 <twim_probe+0x18>
}
800027e4:	2f fd       	sub	sp,-4
800027e6:	d8 02       	popm	pc
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	27 1c       	sub	r12,113

800027ec <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
800027ec:	eb cd 40 c0 	pushm	r6-r7,lr
800027f0:	18 96       	mov	r6,r12
800027f2:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800027f4:	30 28       	mov	r8,2
800027f6:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800027f8:	4b 78       	lddpc	r8,800028d4 <twim_read_packet+0xe8>
800027fa:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800027fc:	f0 1f 00 37 	mcall	800028d8 <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002800:	6e 29       	ld.w	r9,r7[0x8]
80002802:	4b 78       	lddpc	r8,800028dc <twim_read_packet+0xf0>
80002804:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
80002806:	6e 39       	ld.w	r9,r7[0xc]
80002808:	4b 68       	lddpc	r8,800028e0 <twim_read_packet+0xf4>
8000280a:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
8000280c:	30 08       	mov	r8,0
8000280e:	4b 6a       	lddpc	r10,800028e4 <twim_read_packet+0xf8>
80002810:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002812:	30 0b       	mov	r11,0
80002814:	4b 5a       	lddpc	r10,800028e8 <twim_read_packet+0xfc>
80002816:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
80002818:	0f fa       	ld.ub	r10,r7[0x7]
8000281a:	f0 0a 18 00 	cp.b	r10,r8
8000281e:	c2 50       	breq	80002868 <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002820:	4a d8       	lddpc	r8,800028d4 <twim_read_packet+0xe8>
80002822:	70 08       	ld.w	r8,r8[0x0]
80002824:	30 19       	mov	r9,1
80002826:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80002828:	e0 69 00 80 	mov	r9,128
8000282c:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
8000282e:	30 29       	mov	r9,2
80002830:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80002832:	ee ca ff fc 	sub	r10,r7,-4
80002836:	4a e9       	lddpc	r9,800028ec <twim_read_packet+0x100>
80002838:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000283a:	0f f9       	ld.ub	r9,r7[0x7]
8000283c:	4a da       	lddpc	r10,800028f0 <twim_read_packet+0x104>
8000283e:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002840:	e0 6b 07 03 	mov	r11,1795
80002844:	4a ca       	lddpc	r10,800028f4 <twim_read_packet+0x108>
80002846:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002848:	6e 0a       	ld.w	r10,r7[0x0]
8000284a:	a1 7a       	lsl	r10,0x1
8000284c:	e8 1a a0 00 	orl	r10,0xa000
80002850:	f5 e9 11 09 	or	r9,r10,r9<<0x10
80002854:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80002856:	6e 0a       	ld.w	r10,r7[0x0]
80002858:	6e 39       	ld.w	r9,r7[0xc]
8000285a:	b1 69       	lsl	r9,0x10
8000285c:	f3 ea 10 19 	or	r9,r9,r10<<0x1
80002860:	e8 19 e0 01 	orl	r9,0xe001
80002864:	91 49       	st.w	r8[0x10],r9
80002866:	c1 18       	rjmp	80002888 <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
80002868:	30 0a       	mov	r10,0
8000286a:	4a 28       	lddpc	r8,800028f0 <twim_read_packet+0x104>
8000286c:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8000286e:	e0 6a 07 01 	mov	r10,1793
80002872:	4a 18       	lddpc	r8,800028f4 <twim_read_packet+0x108>
80002874:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002876:	49 88       	lddpc	r8,800028d4 <twim_read_packet+0xe8>
80002878:	70 08       	ld.w	r8,r8[0x0]
8000287a:	6e 0a       	ld.w	r10,r7[0x0]
8000287c:	b1 69       	lsl	r9,0x10
8000287e:	f3 ea 10 19 	or	r9,r9,r10<<0x1
80002882:	e8 19 e0 01 	orl	r9,0xe001
80002886:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80002888:	49 38       	lddpc	r8,800028d4 <twim_read_packet+0xe8>
8000288a:	70 08       	ld.w	r8,r8[0x0]
8000288c:	49 a9       	lddpc	r9,800028f4 <twim_read_packet+0x108>
8000288e:	72 09       	ld.w	r9,r9[0x0]
80002890:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002892:	30 18       	mov	r8,1
80002894:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
80002896:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80002898:	49 48       	lddpc	r8,800028e8 <twim_read_packet+0xfc>
8000289a:	70 08       	ld.w	r8,r8[0x0]
8000289c:	58 08       	cp.w	r8,0
8000289e:	c0 80       	breq	800028ae <twim_read_packet+0xc2>
800028a0:	c0 b8       	rjmp	800028b6 <twim_read_packet+0xca>
		cpu_relax();
800028a2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800028a6:	6e 08       	ld.w	r8,r7[0x0]
800028a8:	58 08       	cp.w	r8,0
800028aa:	c0 30       	breq	800028b0 <twim_read_packet+0xc4>
800028ac:	c0 58       	rjmp	800028b6 <twim_read_packet+0xca>
800028ae:	48 f7       	lddpc	r7,800028e8 <twim_read_packet+0xfc>
800028b0:	f0 1f 00 12 	mcall	800028f8 <twim_read_packet+0x10c>
800028b4:	cf 70       	breq	800028a2 <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800028b6:	30 28       	mov	r8,2
800028b8:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800028ba:	48 c8       	lddpc	r8,800028e8 <twim_read_packet+0xfc>
800028bc:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800028be:	5b c8       	cp.w	r8,-4
800028c0:	c0 70       	breq	800028ce <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800028c2:	48 a8       	lddpc	r8,800028e8 <twim_read_packet+0xfc>
800028c4:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800028c6:	5b e8       	cp.w	r8,-2
800028c8:	c0 30       	breq	800028ce <twim_read_packet+0xe2>
800028ca:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800028ce:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
800028d2:	00 00       	add	r0,r0
800028d4:	00 00       	add	r0,r0
800028d6:	00 14       	sub	r4,r0
800028d8:	80 00       	ld.sh	r0,r0[0x0]
800028da:	27 08       	sub	r8,112
800028dc:	00 00       	add	r0,r0
800028de:	00 18       	sub	r8,r0
800028e0:	00 00       	add	r0,r0
800028e2:	00 1c       	sub	r12,r0
800028e4:	00 00       	add	r0,r0
800028e6:	00 2c       	rsub	r12,r0
800028e8:	00 00       	add	r0,r0
800028ea:	00 20       	rsub	r0,r0
800028ec:	00 00       	add	r0,r0
800028ee:	00 24       	rsub	r4,r0
800028f0:	00 00       	add	r0,r0
800028f2:	00 34       	cp.w	r4,r0
800028f4:	00 00       	add	r0,r0
800028f6:	00 28       	rsub	r8,r0
800028f8:	80 00       	ld.sh	r0,r0[0x0]
800028fa:	26 f8       	sub	r8,111

800028fc <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
800028fc:	eb cd 40 e0 	pushm	r5-r7,lr
80002900:	20 1d       	sub	sp,4
80002902:	18 97       	mov	r7,r12
80002904:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002906:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000290a:	30 0a       	mov	r10,0
8000290c:	4a 79       	lddpc	r9,800029a8 <twim_master_init+0xac>
8000290e:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002910:	e6 18 00 01 	andh	r8,0x1,COH
80002914:	c0 b1       	brne	8000292a <twim_master_init+0x2e>
		cpu_irq_disable ();
80002916:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80002918:	3f f8       	mov	r8,-1
8000291a:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000291c:	30 18       	mov	r8,1
8000291e:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002920:	e0 68 00 80 	mov	r8,128
80002924:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002926:	d5 03       	csrf	0x10
80002928:	c0 88       	rjmp	80002938 <twim_master_init+0x3c>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
8000292a:	3f f8       	mov	r8,-1
8000292c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000292e:	30 18       	mov	r8,1
80002930:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002932:	e0 68 00 80 	mov	r8,128
80002936:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80002938:	3f f8       	mov	r8,-1
8000293a:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000293c:	e1 b8 00 00 	mfsr	r8,0x0
80002940:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002942:	d3 03       	ssrf	0x10

	return flags;
80002944:	40 06       	lddsp	r6,sp[0x0]

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002946:	30 1a       	mov	r10,1
80002948:	e0 6b 01 40 	mov	r11,320
8000294c:	49 8c       	lddpc	r12,800029ac <twim_master_init+0xb0>
8000294e:	f0 1f 00 19 	mcall	800029b0 <twim_master_init+0xb4>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002952:	e6 16 00 01 	andh	r6,0x1,COH
80002956:	c0 21       	brne	8000295a <twim_master_init+0x5e>
      cpu_irq_enable();
80002958:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
8000295a:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000295e:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80002960:	f0 09 18 00 	cp.b	r9,r8
80002964:	f9 b8 01 10 	movne	r8,16
80002968:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
8000296c:	f9 b8 01 ff 	movne	r8,-1
80002970:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80002974:	6a 0a       	ld.w	r10,r5[0x0]
80002976:	6a 1b       	ld.w	r11,r5[0x4]
80002978:	0e 9c       	mov	r12,r7
8000297a:	f0 1f 00 0f 	mcall	800029b4 <twim_master_init+0xb8>
8000297e:	5b 8c       	cp.w	r12,-8
80002980:	c1 00       	breq	800029a0 <twim_master_init+0xa4>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80002982:	6a 2b       	ld.w	r11,r5[0x8]
80002984:	0e 9c       	mov	r12,r7
80002986:	f0 1f 00 0d 	mcall	800029b8 <twim_master_init+0xbc>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000298a:	48 88       	lddpc	r8,800029a8 <twim_master_init+0xac>
8000298c:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
8000298e:	5b c8       	cp.w	r8,-4
80002990:	c0 70       	breq	8000299e <twim_master_init+0xa2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002992:	48 68       	lddpc	r8,800029a8 <twim_master_init+0xac>
80002994:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80002996:	5b e8       	cp.w	r8,-2
80002998:	c0 30       	breq	8000299e <twim_master_init+0xa2>
8000299a:	30 0c       	mov	r12,0
8000299c:	c0 28       	rjmp	800029a0 <twim_master_init+0xa4>
8000299e:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800029a0:	2f fd       	sub	sp,-4
800029a2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800029a6:	00 00       	add	r0,r0
800029a8:	00 00       	add	r0,r0
800029aa:	00 20       	rsub	r0,r0
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	25 b8       	sub	r8,91
800029b0:	80 00       	ld.sh	r0,r0[0x0]
800029b2:	29 c0       	sub	r0,-100
800029b4:	80 00       	ld.sh	r0,r0[0x0]
800029b6:	26 94       	sub	r4,105
800029b8:	80 00       	ld.sh	r0,r0[0x0]
800029ba:	27 d0       	sub	r0,125

800029bc <_unhandled_interrupt>:
800029bc:	c0 08       	rjmp	800029bc <_unhandled_interrupt>
800029be:	d7 03       	nop

800029c0 <INTC_register_interrupt>:
800029c0:	f6 08 16 05 	lsr	r8,r11,0x5
800029c4:	49 99       	lddpc	r9,80002a28 <INTC_register_interrupt+0x68>
800029c6:	f2 08 00 39 	add	r9,r9,r8<<0x3
800029ca:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800029ce:	72 19       	ld.w	r9,r9[0x4]
800029d0:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
800029d4:	58 0a       	cp.w	r10,0
800029d6:	c0 91       	brne	800029e8 <INTC_register_interrupt+0x28>
800029d8:	49 59       	lddpc	r9,80002a2c <INTC_register_interrupt+0x6c>
800029da:	49 6a       	lddpc	r10,80002a30 <INTC_register_interrupt+0x70>
800029dc:	12 1a       	sub	r10,r9
800029de:	fe 79 10 00 	mov	r9,-61440
800029e2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800029e6:	5e fc       	retal	r12
800029e8:	58 1a       	cp.w	r10,1
800029ea:	c0 a1       	brne	800029fe <INTC_register_interrupt+0x3e>
800029ec:	49 09       	lddpc	r9,80002a2c <INTC_register_interrupt+0x6c>
800029ee:	49 2a       	lddpc	r10,80002a34 <INTC_register_interrupt+0x74>
800029f0:	12 1a       	sub	r10,r9
800029f2:	bf aa       	sbr	r10,0x1e
800029f4:	fe 79 10 00 	mov	r9,-61440
800029f8:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800029fc:	5e fc       	retal	r12
800029fe:	58 2a       	cp.w	r10,2
80002a00:	c0 a1       	brne	80002a14 <INTC_register_interrupt+0x54>
80002a02:	48 b9       	lddpc	r9,80002a2c <INTC_register_interrupt+0x6c>
80002a04:	48 da       	lddpc	r10,80002a38 <INTC_register_interrupt+0x78>
80002a06:	12 1a       	sub	r10,r9
80002a08:	bf ba       	sbr	r10,0x1f
80002a0a:	fe 79 10 00 	mov	r9,-61440
80002a0e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002a12:	5e fc       	retal	r12
80002a14:	48 69       	lddpc	r9,80002a2c <INTC_register_interrupt+0x6c>
80002a16:	48 aa       	lddpc	r10,80002a3c <INTC_register_interrupt+0x7c>
80002a18:	12 1a       	sub	r10,r9
80002a1a:	ea 1a c0 00 	orh	r10,0xc000
80002a1e:	fe 79 10 00 	mov	r9,-61440
80002a22:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002a26:	5e fc       	retal	r12
80002a28:	80 00       	ld.sh	r0,r0[0x0]
80002a2a:	30 48       	mov	r8,4
80002a2c:	80 00       	ld.sh	r0,r0[0x0]
80002a2e:	2e 00       	sub	r0,-32
80002a30:	80 00       	ld.sh	r0,r0[0x0]
80002a32:	2f 04       	sub	r4,-16
80002a34:	80 00       	ld.sh	r0,r0[0x0]
80002a36:	2f 12       	sub	r2,-15
80002a38:	80 00       	ld.sh	r0,r0[0x0]
80002a3a:	2f 20       	sub	r0,-14
80002a3c:	80 00       	ld.sh	r0,r0[0x0]
80002a3e:	2f 2e       	sub	lr,-14

80002a40 <INTC_init_interrupts>:
80002a40:	d4 21       	pushm	r4-r7,lr
80002a42:	49 18       	lddpc	r8,80002a84 <INTC_init_interrupts+0x44>
80002a44:	e3 b8 00 01 	mtsr	0x4,r8
80002a48:	49 0e       	lddpc	lr,80002a88 <INTC_init_interrupts+0x48>
80002a4a:	30 07       	mov	r7,0
80002a4c:	0e 94       	mov	r4,r7
80002a4e:	49 0c       	lddpc	r12,80002a8c <INTC_init_interrupts+0x4c>
80002a50:	49 05       	lddpc	r5,80002a90 <INTC_init_interrupts+0x50>
80002a52:	10 15       	sub	r5,r8
80002a54:	fe 76 10 00 	mov	r6,-61440
80002a58:	c1 08       	rjmp	80002a78 <INTC_init_interrupts+0x38>
80002a5a:	08 98       	mov	r8,r4
80002a5c:	7c 1b       	ld.w	r11,lr[0x4]
80002a5e:	7c 0a       	ld.w	r10,lr[0x0]
80002a60:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
80002a64:	2f f8       	sub	r8,-1
80002a66:	10 3a       	cp.w	r10,r8
80002a68:	fe 9b ff fc 	brhi	80002a60 <INTC_init_interrupts+0x20>
80002a6c:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
80002a70:	2f f7       	sub	r7,-1
80002a72:	2f 8e       	sub	lr,-8
80002a74:	59 67       	cp.w	r7,22
80002a76:	c0 50       	breq	80002a80 <INTC_init_interrupts+0x40>
80002a78:	7c 08       	ld.w	r8,lr[0x0]
80002a7a:	58 08       	cp.w	r8,0
80002a7c:	ce f1       	brne	80002a5a <INTC_init_interrupts+0x1a>
80002a7e:	cf 7b       	rjmp	80002a6c <INTC_init_interrupts+0x2c>
80002a80:	d8 22       	popm	r4-r7,pc
80002a82:	00 00       	add	r0,r0
80002a84:	80 00       	ld.sh	r0,r0[0x0]
80002a86:	2e 00       	sub	r0,-32
80002a88:	80 00       	ld.sh	r0,r0[0x0]
80002a8a:	30 48       	mov	r8,4
80002a8c:	80 00       	ld.sh	r0,r0[0x0]
80002a8e:	29 bc       	sub	r12,-101
80002a90:	80 00       	ld.sh	r0,r0[0x0]
80002a92:	2f 04       	sub	r4,-16

80002a94 <_get_interrupt_handler>:
80002a94:	fe 78 10 00 	mov	r8,-61440
80002a98:	e0 69 00 83 	mov	r9,131
80002a9c:	f2 0c 01 0c 	sub	r12,r9,r12
80002aa0:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
80002aa4:	f2 ca ff c0 	sub	r10,r9,-64
80002aa8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002aac:	58 08       	cp.w	r8,0
80002aae:	c0 21       	brne	80002ab2 <_get_interrupt_handler+0x1e>
80002ab0:	5e fd       	retal	0
80002ab2:	f0 08 12 00 	clz	r8,r8
80002ab6:	48 5a       	lddpc	r10,80002ac8 <_get_interrupt_handler+0x34>
80002ab8:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002abc:	f0 08 11 1f 	rsub	r8,r8,31
80002ac0:	72 19       	ld.w	r9,r9[0x4]
80002ac2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
80002ac6:	5e fc       	retal	r12
80002ac8:	80 00       	ld.sh	r0,r0[0x0]
80002aca:	30 48       	mov	r8,4

80002acc <_stext>:
80002acc:	e0 6d 40 00 	mov	sp,16384
80002ad0:	fe c0 fc d0 	sub	r0,pc,-816
80002ad4:	e3 b0 00 01 	mtsr	0x4,r0
80002ad8:	d5 53       	csrf	0x15
80002ada:	30 40       	mov	r0,4
80002adc:	31 01       	mov	r1,16
80002ade:	02 30       	cp.w	r0,r1
80002ae0:	c0 72       	brcc	80002aee <idata_load_loop_end>
80002ae2:	fe c2 f9 ea 	sub	r2,pc,-1558

80002ae6 <idata_load_loop>:
80002ae6:	a5 05       	ld.d	r4,r2++
80002ae8:	a1 24       	st.d	r0++,r4
80002aea:	02 30       	cp.w	r0,r1
80002aec:	cf d3       	brcs	80002ae6 <idata_load_loop>

80002aee <idata_load_loop_end>:
80002aee:	31 00       	mov	r0,16
80002af0:	e0 61 01 b8 	mov	r1,440
80002af4:	02 30       	cp.w	r0,r1
80002af6:	c0 62       	brcc	80002b02 <udata_clear_loop_end>
80002af8:	30 02       	mov	r2,0
80002afa:	30 03       	mov	r3,0

80002afc <udata_clear_loop>:
80002afc:	a1 22       	st.d	r0++,r2
80002afe:	02 30       	cp.w	r0,r1
80002b00:	cf e3       	brcs	80002afc <udata_clear_loop>

80002b02 <udata_clear_loop_end>:
80002b02:	fe cf fe da 	sub	pc,pc,-294
80002b06:	d7 03       	nop

80002b08 <board_init>:
#include <conf_board.h>
#include "sensor.h"
#include "com_spi.h"

void board_init(void)
{
80002b08:	d4 01       	pushm	lr
	sysclk_init();
80002b0a:	f0 1f 00 0a 	mcall	80002b30 <board_init+0x28>
	INTC_init_interrupts();
80002b0e:	f0 1f 00 0a 	mcall	80002b34 <board_init+0x2c>
80002b12:	30 6b       	mov	r11,6
80002b14:	30 2c       	mov	r12,2
80002b16:	f0 1f 00 09 	mcall	80002b38 <board_init+0x30>
	ioport_init();
	sensor_init();
80002b1a:	f0 1f 00 09 	mcall	80002b3c <board_init+0x34>
	com_spi_init();
80002b1e:	f0 1f 00 09 	mcall	80002b40 <board_init+0x38>

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
80002b22:	fc 19 00 80 	movh	r9,0x80
80002b26:	fe 78 28 00 	mov	r8,-55296
80002b2a:	f1 49 00 44 	st.w	r8[68],r9
	//ioport_set_pin_dir(RST_ARDU_REG, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_TRANS, IOPORT_DIR_OUTPUT);
	
}
80002b2e:	d8 02       	popm	pc
80002b30:	80 00       	ld.sh	r0,r0[0x0]
80002b32:	24 e8       	sub	r8,78
80002b34:	80 00       	ld.sh	r0,r0[0x0]
80002b36:	2a 40       	sub	r0,-92
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	25 28       	sub	r8,82
80002b3c:	80 00       	ld.sh	r0,r0[0x0]
80002b3e:	22 dc       	sub	r12,45
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	21 b8       	sub	r8,27

80002b44 <read_sensor>:
struct bno055_accel_t acc;
struct bno055_gyro_t gyr;
struct bno055_euler_t eul;

void read_sensor(void)
{
80002b44:	eb cd 40 c0 	pushm	r6-r7,lr
80002b48:	20 1d       	sub	sp,4
		//TODO: Works only if start Adresse for read is 0
		uint8_t val = BNO055_PAGE_ZERO; //CHANGE PAGE
80002b4a:	fa c7 ff fc 	sub	r7,sp,-4
80002b4e:	30 08       	mov	r8,0
80002b50:	0e f8       	st.b	--r7,r8
		write_sensor_data(BNO055_PAGE_ID_ADDR, &val, 1);
80002b52:	30 1a       	mov	r10,1
80002b54:	0e 9b       	mov	r11,r7
80002b56:	30 7c       	mov	r12,7
80002b58:	f0 1f 00 2d 	mcall	80002c0c <read_sensor+0xc8>
		
		
		read_sensor_data(BNO055_CHIP_ID_ADDR, &page_0, 106);
80002b5c:	4a d6       	lddpc	r6,80002c10 <read_sensor+0xcc>
80002b5e:	36 aa       	mov	r10,106
80002b60:	0c 9b       	mov	r11,r6
80002b62:	30 0c       	mov	r12,0
80002b64:	f0 1f 00 2c 	mcall	80002c14 <read_sensor+0xd0>
		
		acc.x = ((int16_t) page_0[BNO055_ACCEL_DATA_X_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_ACCEL_DATA_X_LSB_ADDR];
80002b68:	4a c8       	lddpc	r8,80002c18 <read_sensor+0xd4>
80002b6a:	ed 39 00 09 	ld.ub	r9,r6[9]
80002b6e:	a9 69       	lsl	r9,0x8
80002b70:	ed 3a 00 08 	ld.ub	r10,r6[8]
80002b74:	14 09       	add	r9,r10
80002b76:	91 09       	st.w	r8[0x0],r9
		acc.y = ((int16_t) page_0[BNO055_ACCEL_DATA_Y_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_ACCEL_DATA_Y_LSB_ADDR];
80002b78:	ed 39 00 0b 	ld.ub	r9,r6[11]
80002b7c:	a9 69       	lsl	r9,0x8
80002b7e:	ed 3a 00 0a 	ld.ub	r10,r6[10]
80002b82:	14 09       	add	r9,r10
80002b84:	91 19       	st.w	r8[0x4],r9
		acc.z = ((int16_t) page_0[BNO055_ACCEL_DATA_Z_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_ACCEL_DATA_Z_LSB_ADDR];
80002b86:	ed 39 00 0d 	ld.ub	r9,r6[13]
80002b8a:	a9 69       	lsl	r9,0x8
80002b8c:	ed 3a 00 0c 	ld.ub	r10,r6[12]
80002b90:	14 09       	add	r9,r10
80002b92:	91 29       	st.w	r8[0x8],r9
		
		eul.h = ((int16_t) page_0[BNO055_EULER_H_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_EULER_H_LSB_ADDR];
80002b94:	4a 28       	lddpc	r8,80002c1c <read_sensor+0xd8>
80002b96:	ed 39 00 1b 	ld.ub	r9,r6[27]
80002b9a:	a9 69       	lsl	r9,0x8
80002b9c:	ed 3a 00 1a 	ld.ub	r10,r6[26]
80002ba0:	14 09       	add	r9,r10
80002ba2:	91 09       	st.w	r8[0x0],r9
		eul.p = ((int16_t) page_0[BNO055_EULER_P_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_EULER_P_LSB_ADDR];
80002ba4:	ed 39 00 1f 	ld.ub	r9,r6[31]
80002ba8:	a9 69       	lsl	r9,0x8
80002baa:	ed 3a 00 1e 	ld.ub	r10,r6[30]
80002bae:	14 09       	add	r9,r10
80002bb0:	91 29       	st.w	r8[0x8],r9
		eul.r = ((int16_t) page_0[BNO055_EULER_R_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_EULER_R_LSB_ADDR];
80002bb2:	ed 39 00 1d 	ld.ub	r9,r6[29]
80002bb6:	a9 69       	lsl	r9,0x8
80002bb8:	ed 3a 00 1c 	ld.ub	r10,r6[28]
80002bbc:	14 09       	add	r9,r10
80002bbe:	91 19       	st.w	r8[0x4],r9
		
		gyr.x = ((int16_t) page_0[BNO055_GYRO_DATA_X_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_GYRO_DATA_X_LSB_ADDR];
80002bc0:	49 88       	lddpc	r8,80002c20 <read_sensor+0xdc>
80002bc2:	ed 39 00 15 	ld.ub	r9,r6[21]
80002bc6:	a9 69       	lsl	r9,0x8
80002bc8:	ed 3a 00 14 	ld.ub	r10,r6[20]
80002bcc:	14 09       	add	r9,r10
80002bce:	91 09       	st.w	r8[0x0],r9
		gyr.y = ((int16_t) page_0[BNO055_GYRO_DATA_Y_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_GYRO_DATA_Y_LSB_ADDR];
80002bd0:	ed 39 00 17 	ld.ub	r9,r6[23]
80002bd4:	a9 69       	lsl	r9,0x8
80002bd6:	ed 3a 00 16 	ld.ub	r10,r6[22]
80002bda:	14 09       	add	r9,r10
80002bdc:	91 19       	st.w	r8[0x4],r9
		gyr.z = ((int16_t) page_0[BNO055_GYRO_DATA_Z_MSB_ADDR] << 8) + (int16_t) page_0[BNO055_GYRO_DATA_Z_LSB_ADDR];
80002bde:	ed 39 00 19 	ld.ub	r9,r6[25]
80002be2:	a9 69       	lsl	r9,0x8
80002be4:	ed 3a 00 18 	ld.ub	r10,r6[24]
80002be8:	14 09       	add	r9,r10
80002bea:	91 29       	st.w	r8[0x8],r9
		
		val = BNO055_PAGE_ONE; //CHANGE PAGE
80002bec:	30 18       	mov	r8,1
80002bee:	ba b8       	st.b	sp[0x3],r8
		write_sensor_data(BNO055_PAGE_ID_ADDR, &val, 1);
80002bf0:	30 1a       	mov	r10,1
80002bf2:	0e 9b       	mov	r11,r7
80002bf4:	30 7c       	mov	r12,7
80002bf6:	f0 1f 00 06 	mcall	80002c0c <read_sensor+0xc8>
		
		read_sensor_data(BNO055_CHIP_ID_ADDR, &page_1, 20);
80002bfa:	31 4a       	mov	r10,20
80002bfc:	48 ab       	lddpc	r11,80002c24 <read_sensor+0xe0>
80002bfe:	30 0c       	mov	r12,0
80002c00:	f0 1f 00 05 	mcall	80002c14 <read_sensor+0xd0>
}
80002c04:	2f fd       	sub	sp,-4
80002c06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c0a:	00 00       	add	r0,r0
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	22 68       	sub	r8,38
80002c10:	00 00       	add	r0,r0
80002c12:	01 3c       	ld.ub	r12,r0++
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	22 b0       	sub	r0,43
80002c18:	00 00       	add	r0,r0
80002c1a:	01 04       	ld.w	r4,r0++
80002c1c:	00 00       	add	r0,r0
80002c1e:	01 10       	ld.sh	r0,r0++
80002c20:	00 00       	add	r0,r0
80002c22:	01 a8       	ld.ub	r8,r0[0x2]
80002c24:	00 00       	add	r0,r0
80002c26:	01 1c       	ld.sh	r12,r0++

80002c28 <main>:

int main (void)
{
80002c28:	d4 31       	pushm	r0-r7,lr
	board_init();		
80002c2a:	f0 1f 00 4a 	mcall	80002d50 <main+0x128>


	while (1)
	{
		read_sensor();
		spi_put(SPI_ARDU,(uint8_t) eul.h);
80002c2e:	4c a0       	lddpc	r0,80002d54 <main+0x12c>
80002c30:	fe 72 3c 00 	mov	r2,-50176
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002c34:	fe 77 28 00 	mov	r7,-55296
80002c38:	fc 11 00 80 	movh	r1,0x80

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002c3c:	e0 66 40 00 	mov	r6,16384
80002c40:	e0 65 80 00 	mov	r5,32768
80002c44:	e2 64 00 00 	mov	r4,131072
80002c48:	e0 63 70 e0 	mov	r3,28896
80002c4c:	ea 13 00 72 	orh	r3,0x72
	board_init();		


	while (1)
	{
		read_sensor();
80002c50:	f0 1f 00 42 	mcall	80002d58 <main+0x130>
		spi_put(SPI_ARDU,(uint8_t) eul.h);
80002c54:	60 09       	ld.w	r9,r0[0x0]
80002c56:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80002c5a:	85 38       	st.w	r2[0xc],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002c5c:	64 48       	ld.w	r8,r2[0x10]
		while (!spi_is_tx_ready(SPI_ARDU));
80002c5e:	e2 18 00 02 	andl	r8,0x2,COH
80002c62:	cf d0       	breq	80002c5c <main+0x34>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002c64:	f3 d9 c1 08 	bfextu	r9,r9,0x8,0x8
80002c68:	85 39       	st.w	r2[0xc],r9
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002c6a:	ef 41 00 58 	st.w	r7[88],r1

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002c6e:	ef 46 00 54 	st.w	r7[84],r6
80002c72:	ef 45 00 54 	st.w	r7[84],r5
80002c76:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c7a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c7e:	f0 03 00 0a 	add	r10,r8,r3
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c82:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c86:	14 38       	cp.w	r8,r10
80002c88:	e0 88 00 08 	brls	80002c98 <main+0x70>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c8c:	12 38       	cp.w	r8,r9
80002c8e:	fe 98 ff fa 	brls	80002c82 <main+0x5a>
80002c92:	12 3a       	cp.w	r10,r9
80002c94:	c3 b3       	brcs	80002d0a <main+0xe2>
80002c96:	cf 6b       	rjmp	80002c82 <main+0x5a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c98:	12 38       	cp.w	r8,r9
80002c9a:	e0 8b 00 38 	brhi	80002d0a <main+0xe2>
80002c9e:	12 3a       	cp.w	r10,r9
80002ca0:	c3 53       	brcs	80002d0a <main+0xe2>
80002ca2:	cf 0b       	rjmp	80002c82 <main+0x5a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ca4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ca8:	14 38       	cp.w	r8,r10
80002caa:	e0 88 00 08 	brls	80002cba <main+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002cae:	12 38       	cp.w	r8,r9
80002cb0:	fe 98 ff fa 	brls	80002ca4 <main+0x7c>
80002cb4:	12 3a       	cp.w	r10,r9
80002cb6:	c3 53       	brcs	80002d20 <main+0xf8>
80002cb8:	cf 6b       	rjmp	80002ca4 <main+0x7c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cba:	12 38       	cp.w	r8,r9
80002cbc:	e0 8b 00 32 	brhi	80002d20 <main+0xf8>
80002cc0:	12 3a       	cp.w	r10,r9
80002cc2:	c2 f3       	brcs	80002d20 <main+0xf8>
80002cc4:	cf 0b       	rjmp	80002ca4 <main+0x7c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002cc6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002cca:	14 38       	cp.w	r8,r10
80002ccc:	e0 88 00 08 	brls	80002cdc <main+0xb4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002cd0:	12 38       	cp.w	r8,r9
80002cd2:	fe 98 ff fa 	brls	80002cc6 <main+0x9e>
80002cd6:	12 3a       	cp.w	r10,r9
80002cd8:	c3 13       	brcs	80002d3a <main+0x112>
80002cda:	cf 6b       	rjmp	80002cc6 <main+0x9e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cdc:	12 38       	cp.w	r8,r9
80002cde:	e0 8b 00 2e 	brhi	80002d3a <main+0x112>
80002ce2:	12 3a       	cp.w	r10,r9
80002ce4:	c2 b3       	brcs	80002d3a <main+0x112>
80002ce6:	cf 0b       	rjmp	80002cc6 <main+0x9e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ce8:	e1 ba 00 42 	mfsr	r10,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002cec:	12 38       	cp.w	r8,r9
80002cee:	e0 88 00 08 	brls	80002cfe <main+0xd6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002cf2:	14 38       	cp.w	r8,r10
80002cf4:	fe 98 ff fa 	brls	80002ce8 <main+0xc0>
80002cf8:	14 39       	cp.w	r9,r10
80002cfa:	ca b3       	brcs	80002c50 <main+0x28>
80002cfc:	cf 6b       	rjmp	80002ce8 <main+0xc0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cfe:	14 38       	cp.w	r8,r10
80002d00:	fe 9b ff a8 	brhi	80002c50 <main+0x28>
80002d04:	14 39       	cp.w	r9,r10
80002d06:	ca 53       	brcs	80002c50 <main+0x28>
80002d08:	cf 0b       	rjmp	80002ce8 <main+0xc0>
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002d0a:	ef 46 00 58 	st.w	r7[88],r6

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002d0e:	ef 45 00 54 	st.w	r7[84],r5
80002d12:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d16:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d1a:	f0 03 00 0a 	add	r10,r8,r3
80002d1e:	cc 3b       	rjmp	80002ca4 <main+0x7c>
80002d20:	ef 41 00 54 	st.w	r7[84],r1
80002d24:	ef 46 00 54 	st.w	r7[84],r6
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002d28:	ef 45 00 58 	st.w	r7[88],r5

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80002d2c:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d30:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d34:	f0 03 00 0a 	add	r10,r8,r3
80002d38:	cc 7b       	rjmp	80002cc6 <main+0x9e>
80002d3a:	ef 46 00 54 	st.w	r7[84],r6
80002d3e:	ef 45 00 54 	st.w	r7[84],r5
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002d42:	ef 44 00 58 	st.w	r7[88],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d46:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d4a:	f0 03 00 09 	add	r9,r8,r3
80002d4e:	cc db       	rjmp	80002ce8 <main+0xc0>
80002d50:	80 00       	ld.sh	r0,r0[0x0]
80002d52:	2b 08       	sub	r8,-80
80002d54:	00 00       	add	r0,r0
80002d56:	01 10       	ld.sh	r0,r0++
80002d58:	80 00       	ld.sh	r0,r0[0x0]
80002d5a:	2b 44       	sub	r4,-76

Disassembly of section .exception:

80002e00 <_evba>:
80002e00:	c0 08       	rjmp	80002e00 <_evba>
	...

80002e04 <_handle_TLB_Multiple_Hit>:
80002e04:	c0 08       	rjmp	80002e04 <_handle_TLB_Multiple_Hit>
	...

80002e08 <_handle_Bus_Error_Data_Fetch>:
80002e08:	c0 08       	rjmp	80002e08 <_handle_Bus_Error_Data_Fetch>
	...

80002e0c <_handle_Bus_Error_Instruction_Fetch>:
80002e0c:	c0 08       	rjmp	80002e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80002e10 <_handle_NMI>:
80002e10:	c0 08       	rjmp	80002e10 <_handle_NMI>
	...

80002e14 <_handle_Instruction_Address>:
80002e14:	c0 08       	rjmp	80002e14 <_handle_Instruction_Address>
	...

80002e18 <_handle_ITLB_Protection>:
80002e18:	c0 08       	rjmp	80002e18 <_handle_ITLB_Protection>
	...

80002e1c <_handle_Breakpoint>:
80002e1c:	c0 08       	rjmp	80002e1c <_handle_Breakpoint>
	...

80002e20 <_handle_Illegal_Opcode>:
80002e20:	c0 08       	rjmp	80002e20 <_handle_Illegal_Opcode>
	...

80002e24 <_handle_Unimplemented_Instruction>:
80002e24:	c0 08       	rjmp	80002e24 <_handle_Unimplemented_Instruction>
	...

80002e28 <_handle_Privilege_Violation>:
80002e28:	c0 08       	rjmp	80002e28 <_handle_Privilege_Violation>
	...

80002e2c <_handle_Floating_Point>:
80002e2c:	c0 08       	rjmp	80002e2c <_handle_Floating_Point>
	...

80002e30 <_handle_Coprocessor_Absent>:
80002e30:	c0 08       	rjmp	80002e30 <_handle_Coprocessor_Absent>
	...

80002e34 <_handle_Data_Address_Read>:
80002e34:	c0 08       	rjmp	80002e34 <_handle_Data_Address_Read>
	...

80002e38 <_handle_Data_Address_Write>:
80002e38:	c0 08       	rjmp	80002e38 <_handle_Data_Address_Write>
	...

80002e3c <_handle_DTLB_Protection_Read>:
80002e3c:	c0 08       	rjmp	80002e3c <_handle_DTLB_Protection_Read>
	...

80002e40 <_handle_DTLB_Protection_Write>:
80002e40:	c0 08       	rjmp	80002e40 <_handle_DTLB_Protection_Write>
	...

80002e44 <_handle_DTLB_Modified>:
80002e44:	c0 08       	rjmp	80002e44 <_handle_DTLB_Modified>
	...

80002e50 <_handle_ITLB_Miss>:
80002e50:	c0 08       	rjmp	80002e50 <_handle_ITLB_Miss>
	...

80002e60 <_handle_DTLB_Miss_Read>:
80002e60:	c0 08       	rjmp	80002e60 <_handle_DTLB_Miss_Read>
	...

80002e70 <_handle_DTLB_Miss_Write>:
80002e70:	c0 08       	rjmp	80002e70 <_handle_DTLB_Miss_Write>
	...

80002f00 <_handle_Supervisor_Call>:
80002f00:	c0 08       	rjmp	80002f00 <_handle_Supervisor_Call>
80002f02:	d7 03       	nop

80002f04 <_int0>:
80002f04:	30 0c       	mov	r12,0
80002f06:	fe b0 fd c7 	rcall	80002a94 <_get_interrupt_handler>
80002f0a:	58 0c       	cp.w	r12,0
80002f0c:	f8 0f 17 10 	movne	pc,r12
80002f10:	d6 03       	rete

80002f12 <_int1>:
80002f12:	30 1c       	mov	r12,1
80002f14:	fe b0 fd c0 	rcall	80002a94 <_get_interrupt_handler>
80002f18:	58 0c       	cp.w	r12,0
80002f1a:	f8 0f 17 10 	movne	pc,r12
80002f1e:	d6 03       	rete

80002f20 <_int2>:
80002f20:	30 2c       	mov	r12,2
80002f22:	fe b0 fd b9 	rcall	80002a94 <_get_interrupt_handler>
80002f26:	58 0c       	cp.w	r12,0
80002f28:	f8 0f 17 10 	movne	pc,r12
80002f2c:	d6 03       	rete

80002f2e <_int3>:
80002f2e:	30 3c       	mov	r12,3
80002f30:	fe b0 fd b2 	rcall	80002a94 <_get_interrupt_handler>
80002f34:	58 0c       	cp.w	r12,0
80002f36:	f8 0f 17 10 	movne	pc,r12
80002f3a:	d6 03       	rete
80002f3c:	d7 03       	nop
80002f3e:	d7 03       	nop
80002f40:	d7 03       	nop
80002f42:	d7 03       	nop
80002f44:	d7 03       	nop
80002f46:	d7 03       	nop
80002f48:	d7 03       	nop
80002f4a:	d7 03       	nop
80002f4c:	d7 03       	nop
80002f4e:	d7 03       	nop
80002f50:	d7 03       	nop
80002f52:	d7 03       	nop
80002f54:	d7 03       	nop
80002f56:	d7 03       	nop
80002f58:	d7 03       	nop
80002f5a:	d7 03       	nop
80002f5c:	d7 03       	nop
80002f5e:	d7 03       	nop
80002f60:	d7 03       	nop
80002f62:	d7 03       	nop
80002f64:	d7 03       	nop
80002f66:	d7 03       	nop
80002f68:	d7 03       	nop
80002f6a:	d7 03       	nop
80002f6c:	d7 03       	nop
80002f6e:	d7 03       	nop
80002f70:	d7 03       	nop
80002f72:	d7 03       	nop
80002f74:	d7 03       	nop
80002f76:	d7 03       	nop
80002f78:	d7 03       	nop
80002f7a:	d7 03       	nop
80002f7c:	d7 03       	nop
80002f7e:	d7 03       	nop
80002f80:	d7 03       	nop
80002f82:	d7 03       	nop
80002f84:	d7 03       	nop
80002f86:	d7 03       	nop
80002f88:	d7 03       	nop
80002f8a:	d7 03       	nop
80002f8c:	d7 03       	nop
80002f8e:	d7 03       	nop
80002f90:	d7 03       	nop
80002f92:	d7 03       	nop
80002f94:	d7 03       	nop
80002f96:	d7 03       	nop
80002f98:	d7 03       	nop
80002f9a:	d7 03       	nop
80002f9c:	d7 03       	nop
80002f9e:	d7 03       	nop
80002fa0:	d7 03       	nop
80002fa2:	d7 03       	nop
80002fa4:	d7 03       	nop
80002fa6:	d7 03       	nop
80002fa8:	d7 03       	nop
80002faa:	d7 03       	nop
80002fac:	d7 03       	nop
80002fae:	d7 03       	nop
80002fb0:	d7 03       	nop
80002fb2:	d7 03       	nop
80002fb4:	d7 03       	nop
80002fb6:	d7 03       	nop
80002fb8:	d7 03       	nop
80002fba:	d7 03       	nop
80002fbc:	d7 03       	nop
80002fbe:	d7 03       	nop
80002fc0:	d7 03       	nop
80002fc2:	d7 03       	nop
80002fc4:	d7 03       	nop
80002fc6:	d7 03       	nop
80002fc8:	d7 03       	nop
80002fca:	d7 03       	nop
80002fcc:	d7 03       	nop
80002fce:	d7 03       	nop
80002fd0:	d7 03       	nop
80002fd2:	d7 03       	nop
80002fd4:	d7 03       	nop
80002fd6:	d7 03       	nop
80002fd8:	d7 03       	nop
80002fda:	d7 03       	nop
80002fdc:	d7 03       	nop
80002fde:	d7 03       	nop
80002fe0:	d7 03       	nop
80002fe2:	d7 03       	nop
80002fe4:	d7 03       	nop
80002fe6:	d7 03       	nop
80002fe8:	d7 03       	nop
80002fea:	d7 03       	nop
80002fec:	d7 03       	nop
80002fee:	d7 03       	nop
80002ff0:	d7 03       	nop
80002ff2:	d7 03       	nop
80002ff4:	d7 03       	nop
80002ff6:	d7 03       	nop
80002ff8:	d7 03       	nop
80002ffa:	d7 03       	nop
80002ffc:	d7 03       	nop
80002ffe:	d7 03       	nop
