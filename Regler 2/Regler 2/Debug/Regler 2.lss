
Regler 2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000012cc  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80003400  80003400  00003800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000118  80003600  80003600  00003a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000004  00000004  80003718  00003c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000160  00000008  8000371c  00003c08  2**2
                  ALLOC
  7 .comment      00000030  00000000  00000000  00003c08  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000770  00000000  00000000  00003c38  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00001470  00000000  00000000  000043a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00010c4d  00000000  00000000  00005818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002243  00000000  00000000  00016465  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008ef9  00000000  00000000  000186a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001140  00000000  00000000  000215a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000043d0  00000000  00000000  000226e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000299b  00000000  00000000  00026ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 00e1bbc9  00000000  00000000  0002944f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 18 .debug_ranges 000008c8  00000000  00000000  00e45018  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ee e4 	sub	pc,pc,-4380

Disassembly of section .text:

80002004 <flashcdw_set_wait_state>:
80002004:	fe 68 14 00 	mov	r8,-125952
80002008:	70 09       	ld.w	r9,r8[0x0]
8000200a:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
8000200e:	91 09       	st.w	r8[0x0],r9
80002010:	5e fc       	retal	r12

80002012 <flashcdw_is_ready>:
80002012:	fe 68 14 00 	mov	r8,-125952
80002016:	70 2c       	ld.w	r12,r8[0x8]
80002018:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000201c:	5e fc       	retal	r12
8000201e:	d7 03       	nop

80002020 <flashcdw_default_wait_until_ready>:
80002020:	d4 01       	pushm	lr
80002022:	f0 1f 00 03 	mcall	8000202c <flashcdw_default_wait_until_ready+0xc>
80002026:	cf e0       	breq	80002022 <flashcdw_default_wait_until_ready+0x2>
80002028:	d8 02       	popm	pc
8000202a:	00 00       	add	r0,r0
8000202c:	80 00       	ld.sh	r0,r0[0x0]
8000202e:	20 12       	sub	r2,1

80002030 <flashcdw_issue_command>:
80002030:	eb cd 40 c0 	pushm	r6-r7,lr
80002034:	18 96       	mov	r6,r12
80002036:	16 97       	mov	r7,r11
80002038:	48 e8       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
8000203a:	70 08       	ld.w	r8,r8[0x0]
8000203c:	5d 18       	icall	r8
8000203e:	fe 68 14 00 	mov	r8,-125952
80002042:	70 18       	ld.w	r8,r8[0x4]
80002044:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
80002048:	58 07       	cp.w	r7,0
8000204a:	c0 35       	brlt	80002050 <flashcdw_issue_command+0x20>
8000204c:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
80002050:	3a 59       	mov	r9,-91
80002052:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
80002056:	fe 69 14 00 	mov	r9,-125952
8000205a:	93 18       	st.w	r9[0x4],r8
8000205c:	72 29       	ld.w	r9,r9[0x8]
8000205e:	e2 19 00 0c 	andl	r9,0xc,COH
80002062:	48 58       	lddpc	r8,80002074 <flashcdw_issue_command+0x44>
80002064:	91 09       	st.w	r8[0x0],r9
80002066:	48 38       	lddpc	r8,80002070 <flashcdw_issue_command+0x40>
80002068:	70 08       	ld.w	r8,r8[0x0]
8000206a:	5d 18       	icall	r8
8000206c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002070:	00 00       	add	r0,r0
80002072:	00 04       	add	r4,r0
80002074:	00 00       	add	r0,r0
80002076:	00 08       	add	r8,r0

80002078 <flashcdw_set_flash_waitstate_and_readmode>:
80002078:	d4 01       	pushm	lr
8000207a:	e0 68 e1 c0 	mov	r8,57792
8000207e:	ea 18 00 e4 	orh	r8,0xe4
80002082:	10 3c       	cp.w	r12,r8
80002084:	e0 88 00 19 	brls	800020b6 <flashcdw_set_flash_waitstate_and_readmode+0x3e>
80002088:	e0 68 c3 80 	mov	r8,50048
8000208c:	ea 18 01 c9 	orh	r8,0x1c9
80002090:	10 3c       	cp.w	r12,r8
80002092:	e0 8b 00 0a 	brhi	800020a6 <flashcdw_set_flash_waitstate_and_readmode+0x2e>
80002096:	30 1c       	mov	r12,1
80002098:	f0 1f 00 0c 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
8000209c:	3f fb       	mov	r11,-1
8000209e:	31 1c       	mov	r12,17
800020a0:	f0 1f 00 0b 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020a4:	d8 02       	popm	pc
800020a6:	30 1c       	mov	r12,1
800020a8:	f0 1f 00 08 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
800020ac:	3f fb       	mov	r11,-1
800020ae:	31 0c       	mov	r12,16
800020b0:	f0 1f 00 07 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020b4:	d8 02       	popm	pc
800020b6:	30 0c       	mov	r12,0
800020b8:	f0 1f 00 04 	mcall	800020c8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
800020bc:	3f fb       	mov	r11,-1
800020be:	31 1c       	mov	r12,17
800020c0:	f0 1f 00 03 	mcall	800020cc <flashcdw_set_flash_waitstate_and_readmode+0x54>
800020c4:	d8 02       	popm	pc
800020c6:	00 00       	add	r0,r0
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	20 04       	sub	r4,0
800020cc:	80 00       	ld.sh	r0,r0[0x0]
800020ce:	20 30       	sub	r0,3

800020d0 <flashcdw_clear_page_buffer>:
800020d0:	d4 01       	pushm	lr
800020d2:	3f fb       	mov	r11,-1
800020d4:	30 3c       	mov	r12,3
800020d6:	f0 1f 00 02 	mcall	800020dc <flashcdw_clear_page_buffer+0xc>
800020da:	d8 02       	popm	pc
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	20 30       	sub	r0,3

800020e0 <flashcdw_is_page_erased>:
800020e0:	fe 68 14 00 	mov	r8,-125952
800020e4:	70 2c       	ld.w	r12,r8[0x8]
800020e6:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1
800020ea:	5e fc       	retal	r12

800020ec <flashcdw_quick_page_read>:
800020ec:	d4 01       	pushm	lr
800020ee:	18 9b       	mov	r11,r12
800020f0:	30 cc       	mov	r12,12
800020f2:	f0 1f 00 03 	mcall	800020fc <flashcdw_quick_page_read+0x10>
800020f6:	f0 1f 00 03 	mcall	80002100 <flashcdw_quick_page_read+0x14>
800020fa:	d8 02       	popm	pc
800020fc:	80 00       	ld.sh	r0,r0[0x0]
800020fe:	20 30       	sub	r0,3
80002100:	80 00       	ld.sh	r0,r0[0x0]
80002102:	20 e0       	sub	r0,14

80002104 <flashcdw_erase_page>:
80002104:	eb cd 40 c0 	pushm	r6-r7,lr
80002108:	16 97       	mov	r7,r11
8000210a:	18 9b       	mov	r11,r12
8000210c:	30 2c       	mov	r12,2
8000210e:	f0 1f 00 09 	mcall	80002130 <flashcdw_erase_page+0x2c>
80002112:	58 07       	cp.w	r7,0
80002114:	c0 31       	brne	8000211a <flashcdw_erase_page+0x16>
80002116:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
8000211a:	48 77       	lddpc	r7,80002134 <flashcdw_erase_page+0x30>
8000211c:	6e 06       	ld.w	r6,r7[0x0]
8000211e:	3f fc       	mov	r12,-1
80002120:	f0 1f 00 06 	mcall	80002138 <flashcdw_erase_page+0x34>
80002124:	6e 08       	ld.w	r8,r7[0x0]
80002126:	f1 e6 10 06 	or	r6,r8,r6
8000212a:	8f 06       	st.w	r7[0x0],r6
8000212c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002130:	80 00       	ld.sh	r0,r0[0x0]
80002132:	20 30       	sub	r0,3
80002134:	00 00       	add	r0,r0
80002136:	00 08       	add	r8,r0
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	20 ec       	sub	r12,14

8000213c <flashcdw_write_page>:
8000213c:	d4 01       	pushm	lr
8000213e:	18 9b       	mov	r11,r12
80002140:	30 1c       	mov	r12,1
80002142:	f0 1f 00 02 	mcall	80002148 <flashcdw_write_page+0xc>
80002146:	d8 02       	popm	pc
80002148:	80 00       	ld.sh	r0,r0[0x0]
8000214a:	20 30       	sub	r0,3

8000214c <flashcdw_quick_user_page_read>:
8000214c:	d4 01       	pushm	lr
8000214e:	3f fb       	mov	r11,-1
80002150:	30 fc       	mov	r12,15
80002152:	f0 1f 00 03 	mcall	8000215c <flashcdw_quick_user_page_read+0x10>
80002156:	f0 1f 00 03 	mcall	80002160 <flashcdw_quick_user_page_read+0x14>
8000215a:	d8 02       	popm	pc
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	20 30       	sub	r0,3
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	20 e0       	sub	r0,14

80002164 <flashcdw_erase_user_page>:
80002164:	eb cd 40 80 	pushm	r7,lr
80002168:	18 97       	mov	r7,r12
8000216a:	3f fb       	mov	r11,-1
8000216c:	30 ec       	mov	r12,14
8000216e:	f0 1f 00 06 	mcall	80002184 <flashcdw_erase_user_page+0x20>
80002172:	58 07       	cp.w	r7,0
80002174:	c0 31       	brne	8000217a <flashcdw_erase_user_page+0x16>
80002176:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
8000217a:	f0 1f 00 04 	mcall	80002188 <flashcdw_erase_user_page+0x24>
8000217e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002182:	00 00       	add	r0,r0
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	20 30       	sub	r0,3
80002188:	80 00       	ld.sh	r0,r0[0x0]
8000218a:	21 4c       	sub	r12,20

8000218c <flashcdw_write_user_page>:
8000218c:	d4 01       	pushm	lr
8000218e:	3f fb       	mov	r11,-1
80002190:	30 dc       	mov	r12,13
80002192:	f0 1f 00 02 	mcall	80002198 <flashcdw_write_user_page+0xc>
80002196:	d8 02       	popm	pc
80002198:	80 00       	ld.sh	r0,r0[0x0]
8000219a:	20 30       	sub	r0,3

8000219c <flashcdw_memcpy>:
8000219c:	d4 31       	pushm	r0-r7,lr
8000219e:	20 7d       	sub	sp,28
800021a0:	50 3c       	stdsp	sp[0xc],r12
800021a2:	14 97       	mov	r7,r10
800021a4:	50 49       	stdsp	sp[0x10],r9
800021a6:	e0 69 ff ff 	mov	r9,65535
800021aa:	ea 19 80 7f 	orh	r9,0x807f
800021ae:	12 3c       	cp.w	r12,r9
800021b0:	5f b8       	srhi	r8
800021b2:	50 28       	stdsp	sp[0x8],r8
800021b4:	58 0a       	cp.w	r10,0
800021b6:	c0 41       	brne	800021be <flashcdw_memcpy+0x22>
800021b8:	30 09       	mov	r9,0
800021ba:	50 09       	stdsp	sp[0x0],r9
800021bc:	c5 b8       	rjmp	80002272 <flashcdw_memcpy+0xd6>
800021be:	40 36       	lddsp	r6,sp[0xc]
800021c0:	16 94       	mov	r4,r11
800021c2:	0c 90       	mov	r0,r6
800021c4:	e0 10 ff 00 	andl	r0,0xff00
800021c8:	30 08       	mov	r8,0
800021ca:	50 08       	stdsp	sp[0x0],r8
800021cc:	4a d1       	lddpc	r1,80002280 <flashcdw_memcpy+0xe4>
800021ce:	30 05       	mov	r5,0
800021d0:	fa c3 ff ec 	sub	r3,sp,-20
800021d4:	10 92       	mov	r2,r8
800021d6:	f0 1f 00 2c 	mcall	80002284 <flashcdw_memcpy+0xe8>
800021da:	62 08       	ld.w	r8,r1[0x0]
800021dc:	40 09       	lddsp	r9,sp[0x0]
800021de:	10 49       	or	r9,r8
800021e0:	50 09       	stdsp	sp[0x0],r9
800021e2:	00 9b       	mov	r11,r0
800021e4:	e0 ce ff 00 	sub	lr,r0,-256
800021e8:	16 9c       	mov	r12,r11
800021ea:	f6 e8 00 00 	ld.d	r8,r11[0]
800021ee:	fa e9 00 14 	st.d	sp[20],r8
800021f2:	04 98       	mov	r8,r2
800021f4:	58 07       	cp.w	r7,0
800021f6:	5f 1a       	srne	r10
800021f8:	f0 0b 00 09 	add	r9,r8,r11
800021fc:	12 36       	cp.w	r6,r9
800021fe:	5f 09       	sreq	r9
80002200:	f5 e9 00 09 	and	r9,r10,r9
80002204:	ea 09 18 00 	cp.b	r9,r5
80002208:	c0 60       	breq	80002214 <flashcdw_memcpy+0x78>
8000220a:	09 39       	ld.ub	r9,r4++
8000220c:	e6 08 0b 09 	st.b	r3[r8],r9
80002210:	2f f6       	sub	r6,-1
80002212:	20 17       	sub	r7,1
80002214:	2f f8       	sub	r8,-1
80002216:	58 88       	cp.w	r8,8
80002218:	ce e1       	brne	800021f4 <flashcdw_memcpy+0x58>
8000221a:	fa e8 00 14 	ld.d	r8,sp[20]
8000221e:	f8 e9 00 00 	st.d	r12[0],r8
80002222:	2f 8b       	sub	r11,-8
80002224:	1c 3b       	cp.w	r11,lr
80002226:	ce 11       	brne	800021e8 <flashcdw_memcpy+0x4c>
80002228:	50 17       	stdsp	sp[0x4],r7
8000222a:	e0 c0 ff 00 	sub	r0,r0,-256
8000222e:	40 48       	lddsp	r8,sp[0x10]
80002230:	58 08       	cp.w	r8,0
80002232:	c1 00       	breq	80002252 <flashcdw_memcpy+0xb6>
80002234:	40 29       	lddsp	r9,sp[0x8]
80002236:	58 09       	cp.w	r9,0
80002238:	c0 50       	breq	80002242 <flashcdw_memcpy+0xa6>
8000223a:	30 0c       	mov	r12,0
8000223c:	f0 1f 00 13 	mcall	80002288 <flashcdw_memcpy+0xec>
80002240:	c0 58       	rjmp	8000224a <flashcdw_memcpy+0xae>
80002242:	30 0b       	mov	r11,0
80002244:	3f fc       	mov	r12,-1
80002246:	f0 1f 00 12 	mcall	8000228c <flashcdw_memcpy+0xf0>
8000224a:	62 08       	ld.w	r8,r1[0x0]
8000224c:	40 09       	lddsp	r9,sp[0x0]
8000224e:	10 49       	or	r9,r8
80002250:	50 09       	stdsp	sp[0x0],r9
80002252:	40 28       	lddsp	r8,sp[0x8]
80002254:	58 08       	cp.w	r8,0
80002256:	c0 40       	breq	8000225e <flashcdw_memcpy+0xc2>
80002258:	f0 1f 00 0e 	mcall	80002290 <flashcdw_memcpy+0xf4>
8000225c:	c0 48       	rjmp	80002264 <flashcdw_memcpy+0xc8>
8000225e:	3f fc       	mov	r12,-1
80002260:	f0 1f 00 0d 	mcall	80002294 <flashcdw_memcpy+0xf8>
80002264:	62 08       	ld.w	r8,r1[0x0]
80002266:	40 09       	lddsp	r9,sp[0x0]
80002268:	10 49       	or	r9,r8
8000226a:	50 09       	stdsp	sp[0x0],r9
8000226c:	40 18       	lddsp	r8,sp[0x4]
8000226e:	58 08       	cp.w	r8,0
80002270:	cb 31       	brne	800021d6 <flashcdw_memcpy+0x3a>
80002272:	48 48       	lddpc	r8,80002280 <flashcdw_memcpy+0xe4>
80002274:	40 09       	lddsp	r9,sp[0x0]
80002276:	91 09       	st.w	r8[0x0],r9
80002278:	40 3c       	lddsp	r12,sp[0xc]
8000227a:	2f 9d       	sub	sp,-28
8000227c:	d8 32       	popm	r0-r7,pc
8000227e:	00 00       	add	r0,r0
80002280:	00 00       	add	r0,r0
80002282:	00 08       	add	r8,r0
80002284:	80 00       	ld.sh	r0,r0[0x0]
80002286:	20 d0       	sub	r0,13
80002288:	80 00       	ld.sh	r0,r0[0x0]
8000228a:	21 64       	sub	r4,22
8000228c:	80 00       	ld.sh	r0,r0[0x0]
8000228e:	21 04       	sub	r4,16
80002290:	80 00       	ld.sh	r0,r0[0x0]
80002292:	21 8c       	sub	r12,24
80002294:	80 00       	ld.sh	r0,r0[0x0]
80002296:	21 3c       	sub	r12,19

80002298 <gpio_enable_module_pin>:
80002298:	f8 08 16 05 	lsr	r8,r12,0x5
8000229c:	a9 78       	lsl	r8,0x9
8000229e:	e0 28 d8 00 	sub	r8,55296
800022a2:	58 7b       	cp.w	r11,7
800022a4:	e0 8b 00 05 	brhi	800022ae <gpio_enable_module_pin+0x16>
800022a8:	4a 09       	lddpc	r9,80002328 <gpio_enable_module_pin+0x90>
800022aa:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
800022ae:	5e ff       	retal	1
800022b0:	30 19       	mov	r9,1
800022b2:	f2 0c 09 49 	lsl	r9,r9,r12
800022b6:	91 69       	st.w	r8[0x18],r9
800022b8:	91 a9       	st.w	r8[0x28],r9
800022ba:	91 e9       	st.w	r8[0x38],r9
800022bc:	c3 18       	rjmp	8000231e <gpio_enable_module_pin+0x86>
800022be:	30 19       	mov	r9,1
800022c0:	f2 0c 09 49 	lsl	r9,r9,r12
800022c4:	91 59       	st.w	r8[0x14],r9
800022c6:	91 a9       	st.w	r8[0x28],r9
800022c8:	91 e9       	st.w	r8[0x38],r9
800022ca:	c2 a8       	rjmp	8000231e <gpio_enable_module_pin+0x86>
800022cc:	30 19       	mov	r9,1
800022ce:	f2 0c 09 49 	lsl	r9,r9,r12
800022d2:	91 69       	st.w	r8[0x18],r9
800022d4:	91 99       	st.w	r8[0x24],r9
800022d6:	91 e9       	st.w	r8[0x38],r9
800022d8:	c2 38       	rjmp	8000231e <gpio_enable_module_pin+0x86>
800022da:	30 19       	mov	r9,1
800022dc:	f2 0c 09 49 	lsl	r9,r9,r12
800022e0:	91 59       	st.w	r8[0x14],r9
800022e2:	91 99       	st.w	r8[0x24],r9
800022e4:	91 e9       	st.w	r8[0x38],r9
800022e6:	c1 c8       	rjmp	8000231e <gpio_enable_module_pin+0x86>
800022e8:	30 19       	mov	r9,1
800022ea:	f2 0c 09 49 	lsl	r9,r9,r12
800022ee:	91 69       	st.w	r8[0x18],r9
800022f0:	91 a9       	st.w	r8[0x28],r9
800022f2:	91 d9       	st.w	r8[0x34],r9
800022f4:	c1 58       	rjmp	8000231e <gpio_enable_module_pin+0x86>
800022f6:	30 19       	mov	r9,1
800022f8:	f2 0c 09 49 	lsl	r9,r9,r12
800022fc:	91 59       	st.w	r8[0x14],r9
800022fe:	91 a9       	st.w	r8[0x28],r9
80002300:	91 d9       	st.w	r8[0x34],r9
80002302:	c0 e8       	rjmp	8000231e <gpio_enable_module_pin+0x86>
80002304:	30 19       	mov	r9,1
80002306:	f2 0c 09 49 	lsl	r9,r9,r12
8000230a:	91 69       	st.w	r8[0x18],r9
8000230c:	91 99       	st.w	r8[0x24],r9
8000230e:	91 d9       	st.w	r8[0x34],r9
80002310:	c0 78       	rjmp	8000231e <gpio_enable_module_pin+0x86>
80002312:	30 19       	mov	r9,1
80002314:	f2 0c 09 49 	lsl	r9,r9,r12
80002318:	91 59       	st.w	r8[0x14],r9
8000231a:	91 99       	st.w	r8[0x24],r9
8000231c:	91 d9       	st.w	r8[0x34],r9
8000231e:	30 19       	mov	r9,1
80002320:	f2 0c 09 4c 	lsl	r12,r9,r12
80002324:	91 2c       	st.w	r8[0x8],r12
80002326:	5e fd       	retal	0
80002328:	80 00       	ld.sh	r0,r0[0x0]
8000232a:	36 00       	mov	r0,96

8000232c <gpio_enable_module>:
8000232c:	d4 21       	pushm	r4-r7,lr
8000232e:	18 97       	mov	r7,r12
80002330:	16 94       	mov	r4,r11
80002332:	58 0b       	cp.w	r11,0
80002334:	c0 31       	brne	8000233a <gpio_enable_module+0xe>
80002336:	30 05       	mov	r5,0
80002338:	c0 d8       	rjmp	80002352 <gpio_enable_module+0x26>
8000233a:	30 06       	mov	r6,0
8000233c:	0c 95       	mov	r5,r6
8000233e:	6e 1b       	ld.w	r11,r7[0x4]
80002340:	6e 0c       	ld.w	r12,r7[0x0]
80002342:	f0 1f 00 06 	mcall	80002358 <gpio_enable_module+0x2c>
80002346:	18 45       	or	r5,r12
80002348:	2f 87       	sub	r7,-8
8000234a:	2f f6       	sub	r6,-1
8000234c:	0c 34       	cp.w	r4,r6
8000234e:	fe 9b ff f8 	brhi	8000233e <gpio_enable_module+0x12>
80002352:	0a 9c       	mov	r12,r5
80002354:	d8 22       	popm	r4-r7,pc
80002356:	00 00       	add	r0,r0
80002358:	80 00       	ld.sh	r0,r0[0x0]
8000235a:	22 98       	sub	r8,41

8000235c <com_spi_init>:
	spi_put(TWI_SENS,count);
	if(count--) count = UINT8_MAX;
};

spi_status_t com_spi_init(void)
{
8000235c:	eb cd 40 80 	pushm	r7,lr

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
80002360:	fe 78 28 00 	mov	r8,-55296
80002364:	30 19       	mov	r9,1
80002366:	f1 49 00 44 	st.w	r8[68],r9
				pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->oderc = arch_ioport_pin_to_mask(
8000236a:	30 27       	mov	r7,2
8000236c:	f1 47 00 48 	st.w	r8[72],r7
80002370:	30 4a       	mov	r10,4
80002372:	f1 4a 00 48 	st.w	r8[72],r10
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
80002376:	f1 49 00 58 	st.w	r8[88],r9
	ioport_set_pin_dir(MOSI_REG,IOPORT_DIR_INPUT);
	ioport_set_pin_dir(SCK_REG, IOPORT_DIR_INPUT);
	ioport_set_pin_level(MISO_REG,IOPORT_PIN_LEVEL_LOW);
	
	static const gpio_map_t SPI_GPIO_MAP =	{{MISO_REG, 0},{MOSI_REG, 0},{SCK_REG,0}};	 //TODO: DEFINE FUNCTION_A 0
	gpio_enable_module(SPI_GPIO_MAP,3);
8000237a:	30 3b       	mov	r11,3
8000237c:	48 ac       	lddpc	r12,800023a4 <com_spi_init+0x48>
8000237e:	f0 1f 00 0b 	mcall	800023a8 <com_spi_init+0x4c>
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80002382:	30 ab       	mov	r11,10
80002384:	0e 9c       	mov	r12,r7
80002386:	f0 1f 00 0a 	mcall	800023ac <com_spi_init+0x50>
	
	sysclk_enable_peripheral_clock(SPI_ARDU);
	
	spi_initSlave(SPI_ARDU,8,SPI_MODE_0);
8000238a:	30 0a       	mov	r10,0
8000238c:	30 8b       	mov	r11,8
8000238e:	fe 7c 3c 00 	mov	r12,-50176
80002392:	f0 1f 00 08 	mcall	800023b0 <com_spi_init+0x54>
	spi_enable(SPI_ARDU);
80002396:	fe 7c 3c 00 	mov	r12,-50176
8000239a:	f0 1f 00 07 	mcall	800023b4 <com_spi_init+0x58>
	//irq_register_handler(com_spi_interrupt_handler, AVR32_SPI_IRQ, SPI_ARDU_IRQ_LEVEL);
	//(*SPI_ARDU).ier = AVR32_SPI_IER_TDRE_MASK; //enable Interrupt
	//cpu_irq_enable();
	
	return SPI_OK;
}
8000239e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800023a2:	00 00       	add	r0,r0
800023a4:	80 00       	ld.sh	r0,r0[0x0]
800023a6:	36 20       	mov	r0,98
800023a8:	80 00       	ld.sh	r0,r0[0x0]
800023aa:	23 2c       	sub	r12,50
800023ac:	80 00       	ld.sh	r0,r0[0x0]
800023ae:	2b 78       	sub	r8,-73
800023b0:	80 00       	ld.sh	r0,r0[0x0]
800023b2:	2b ba       	sub	r10,-69
800023b4:	80 00       	ld.sh	r0,r0[0x0]
800023b6:	2c 00       	sub	r0,-64

800023b8 <t_c2_rc_isr>:
//#elif __ICCAVR32__
//#pragma handler = AVR32_TC_IRQ_GROUP, 1
	//__interrupt
#endif
void t_c2_rc_isr(void)
{
800023b8:	eb cd 40 80 	pushm	r7,lr
	tc_write_ra(TIMER_ESC, ESC_TIMER_USED_CHANNEL2, esc_timer_compare_values[MOTOR_POS_T_C2_A]);
800023bc:	48 c7       	lddpc	r7,800023ec <t_c2_rc_isr+0x34>
800023be:	6e 2a       	ld.w	r10,r7[0x8]
800023c0:	5c 7a       	castu.h	r10
800023c2:	30 1b       	mov	r11,1
800023c4:	fe 7c 50 00 	mov	r12,-45056
800023c8:	f0 1f 00 0a 	mcall	800023f0 <t_c2_rc_isr+0x38>
	tc_write_rb(TIMER_ESC, ESC_TIMER_USED_CHANNEL2, esc_timer_compare_values[MOTOR_POS_T_C2_B]);
800023cc:	6e 3a       	ld.w	r10,r7[0xc]
800023ce:	5c 7a       	castu.h	r10
800023d0:	30 1b       	mov	r11,1
800023d2:	fe 7c 50 00 	mov	r12,-45056
800023d6:	f0 1f 00 08 	mcall	800023f4 <t_c2_rc_isr+0x3c>
	tc_read_sr(TIMER_ESC, ESC_TIMER_USED_CHANNEL2);
800023da:	30 1b       	mov	r11,1
800023dc:	fe 7c 50 00 	mov	r12,-45056
800023e0:	f0 1f 00 06 	mcall	800023f8 <t_c2_rc_isr+0x40>
}
800023e4:	e3 cd 40 80 	ldm	sp++,r7,lr
800023e8:	d6 03       	rete
800023ea:	00 00       	add	r0,r0
800023ec:	00 00       	add	r0,r0
800023ee:	01 0c       	ld.w	r12,r0++
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	28 e4       	sub	r4,-114
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	29 18       	sub	r8,-111
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	28 d2       	sub	r2,-115

800023fc <t_c1_rc_isr>:
//#elif __ICCAVR32__
//#pragma handler = AVR32_TC_IRQ_GROUP, 1
	//__interrupt
#endif
void t_c1_rc_isr(void)
{
800023fc:	eb cd 40 80 	pushm	r7,lr
	tc_write_ra(TIMER_ESC, ESC_TIMER_USED_CHANNEL1, esc_timer_compare_values[MOTOR_POS_T_C1_A]);
80002400:	48 c7       	lddpc	r7,80002430 <t_c1_rc_isr+0x34>
80002402:	6e 0a       	ld.w	r10,r7[0x0]
80002404:	5c 7a       	castu.h	r10
80002406:	30 0b       	mov	r11,0
80002408:	fe 7c 50 00 	mov	r12,-45056
8000240c:	f0 1f 00 0a 	mcall	80002434 <t_c1_rc_isr+0x38>
	tc_write_rb(TIMER_ESC, ESC_TIMER_USED_CHANNEL1, esc_timer_compare_values[MOTOR_POS_T_C1_B]);
80002410:	6e 1a       	ld.w	r10,r7[0x4]
80002412:	5c 7a       	castu.h	r10
80002414:	30 0b       	mov	r11,0
80002416:	fe 7c 50 00 	mov	r12,-45056
8000241a:	f0 1f 00 08 	mcall	80002438 <t_c1_rc_isr+0x3c>
	tc_read_sr(TIMER_ESC, ESC_TIMER_USED_CHANNEL1);
8000241e:	30 0b       	mov	r11,0
80002420:	fe 7c 50 00 	mov	r12,-45056
80002424:	f0 1f 00 06 	mcall	8000243c <t_c1_rc_isr+0x40>
}
80002428:	e3 cd 40 80 	ldm	sp++,r7,lr
8000242c:	d6 03       	rete
8000242e:	00 00       	add	r0,r0
80002430:	00 00       	add	r0,r0
80002432:	01 0c       	ld.w	r12,r0++
80002434:	80 00       	ld.sh	r0,r0[0x0]
80002436:	28 e4       	sub	r4,-114
80002438:	80 00       	ld.sh	r0,r0[0x0]
8000243a:	29 18       	sub	r8,-111
8000243c:	80 00       	ld.sh	r0,r0[0x0]
8000243e:	28 d2       	sub	r2,-115

80002440 <motor_init>:
#include "asf.h"
#include "settings_t.h"
#include "motor_control.h"

void motor_init(void) //TODO: static?
{
80002440:	d4 21       	pushm	r4-r7,lr
80002442:	20 3d       	sub	sp,12

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
80002444:	fe 78 28 00 	mov	r8,-55296
80002448:	fc 19 00 20 	movh	r9,0x20
8000244c:	f1 49 00 44 	st.w	r8[68],r9
80002450:	fc 19 00 40 	movh	r9,0x40
80002454:	f1 49 00 44 	st.w	r8[68],r9
80002458:	fc 19 04 00 	movh	r9,0x400
8000245c:	f1 49 00 44 	st.w	r8[68],r9
80002460:	fc 19 08 00 	movh	r9,0x800
80002464:	f1 49 00 44 	st.w	r8[68],r9
80002468:	30 fb       	mov	r11,15
8000246a:	30 2c       	mov	r12,2
8000246c:	f0 1f 00 49 	mcall	80002590 <motor_init+0x150>
		{ESC_FL__SIGNAL_PIN, ESC_FL__SIGNAL_PER_FUNC},
		{ESC_FR__SIGNAL_PIN, ESC_FR__SIGNAL_PER_FUNC},
		{ESC_BL__SIGNAL_PIN, ESC_BL__SIGNAL_PER_FUNC},
		{ESC_BR__SIGNAL_PIN, ESC_BR__SIGNAL_PER_FUNC}
												};
	gpio_enable_module(TIMER_GPIO_MAP,4);
80002470:	30 4b       	mov	r11,4
80002472:	4c 9c       	lddpc	r12,80002594 <motor_init+0x154>
80002474:	f0 1f 00 49 	mcall	80002598 <motor_init+0x158>

	
	//timer-channel ESC__TIMER_USED_CHANNEL1 (x = channel = [0/1/2])
	tc_waveform_opt_t wf_opt;
	wf_opt.acpa = TC_EVT_EFFECT_CLEAR; //clear TIOAx on RA-Compare [Duty-Cycle]
80002478:	40 29       	lddsp	r9,sp[0x8]
8000247a:	30 28       	mov	r8,2
8000247c:	f3 d8 d2 02 	bfins	r9,r8,0x10,0x2
	wf_opt.acpc = TC_EVT_EFFECT_SET; //set TIOAx on RC-Compare [Frequency]
80002480:	30 15       	mov	r5,1
80002482:	f3 d5 d2 42 	bfins	r9,r5,0x12,0x2
	wf_opt.aeevt = TC_EVT_EFFECT_NOOP; //external event: no effect on TIOAx
80002486:	30 04       	mov	r4,0
	wf_opt.aswtrg = TC_EVT_EFFECT_NOOP; //software-trigger: no effect on TIOAx
	
	wf_opt.bcpb = TC_EVT_EFFECT_CLEAR; //set TIOBx on RB-Compare [Duty-Cycle]
80002488:	e4 19 ff 0f 	andh	r9,0xff0f
8000248c:	f3 d8 d3 02 	bfins	r9,r8,0x18,0x2
	wf_opt.bcpc = TC_EVT_EFFECT_SET; //clear TIOBx on RC-Compare [Frequency]
80002490:	f3 d5 d3 42 	bfins	r9,r5,0x1a,0x2
	wf_opt.beevt = TC_EVT_EFFECT_NOOP; //external event: no effect on TIOBx
	wf_opt.bswtrg = TC_EVT_EFFECT_NOOP; //software-trigger: no effect on TIOBx
	
	wf_opt.burst = TC_BURST_NOT_GATED; //no burst
	wf_opt.channel = ESC_TIMER_USED_CHANNEL1; //timer-channel
80002494:	50 14       	stdsp	sp[0x4],r4
	wf_opt.clki = TC_CLOCK_RISING_EDGE; //count on rising-edge
	wf_opt.cpcdis = false; //counter clock disable on RC-Compare: false
	wf_opt.cpcstop = false; //counter clock stop on RC-Compare: false
	wf_opt.eevt = TC_EXT_EVENT_SEL_XC0_OUTPUT; //TIOBx not as Input
80002496:	e4 19 0f ff 	andh	r9,0xfff
8000249a:	e0 19 ff 07 	andl	r9,0xff07
8000249e:	f3 d5 d1 42 	bfins	r9,r5,0xa,0x2
	//TIMER_CLOCK1 32 KHz oscillator clock (CLK_32K)
	//TIMER_CLOCK2 PBA Clock / 2
	//TIMER_CLOCK3 PBA Clock / 8
	//TIMER_CLOCK4 PBA Clock / 32
	//TIMER_CLOCK5 PBA Clock / 128
	wf_opt.tcclks = TC_CLOCK_SOURCE_TC3; // --> prescaler = 8
800024a2:	e0 19 ec f8 	andl	r9,0xecf8
	
	
	//timer-values are calculated on base of (variable) pba-clock (pba_c)
	esc_timer_values.period =  sysclk_get_pba_hz()/2000; //ticks for one (periode=4ms): pba_c/2000 = pba_c/(8/4*1000) = pba_c/(prescaler/periode)
800024a6:	4b e7       	lddpc	r7,8000259c <motor_init+0x15c>
800024a8:	e0 6a 3a 98 	mov	r10,15000
800024ac:	8f 0a       	st.w	r7[0x0],r10
	esc_timer_values.max = esc_timer_values.period/2; //ticks for fastest-signal (2ms)
800024ae:	e0 6a 1d 4c 	mov	r10,7500
800024b2:	8f 2a       	st.w	r7[0x8],r10
	esc_timer_values.min = esc_timer_values.period/4; //ticks for slowest-signal (1ms)
800024b4:	e0 6a 0e a6 	mov	r10,3750
800024b8:	8f 1a       	st.w	r7[0x4],r10
	esc_timer_values.max_motorspeed = esc_timer_values.max - esc_timer_values.min; //[0; max_motorspeed] = interval for controller
800024ba:	8f 3a       	st.w	r7[0xc],r10
	
	
	
	
	
	wf_opt.wavsel = TC_WAVEFORM_SEL_UP_MODE_RC_TRIGGER;
800024bc:	10 49       	or	r9,r8
800024be:	f3 d8 d1 a2 	bfins	r9,r8,0xd,0x2
800024c2:	50 29       	stdsp	sp[0x8],r9
	tc_init_waveform(TIMER_ESC, &wf_opt); //init waveform, timer-channel=ESC__TIMER_USED_CHANNEL1
800024c4:	fa c6 ff fc 	sub	r6,sp,-4
800024c8:	0c 9b       	mov	r11,r6
800024ca:	fe 7c 50 00 	mov	r12,-45056
800024ce:	f0 1f 00 35 	mcall	800025a0 <motor_init+0x160>
	
	
	//edit for channel 1
	wf_opt.channel = ESC_TIMER_USED_CHANNEL2; //timer-channel=ESC__TIMER_USED_CHANNEL2
800024d2:	50 15       	stdsp	sp[0x4],r5
	tc_init_waveform(TIMER_ESC, &wf_opt);
800024d4:	0c 9b       	mov	r11,r6
800024d6:	fe 7c 50 00 	mov	r12,-45056
800024da:	f0 1f 00 32 	mcall	800025a0 <motor_init+0x160>
	
	
	//set esc_timer_compare for motor-speed minimal/off
	for (uint_fast8_t i=0; i<4; ++i)
	{
		esc_timer_compare_values[i] = esc_timer_values.min;
800024de:	6e 19       	ld.w	r9,r7[0x4]
800024e0:	4b 18       	lddpc	r8,800025a4 <motor_init+0x164>
800024e2:	91 09       	st.w	r8[0x0],r9
800024e4:	91 19       	st.w	r8[0x4],r9
800024e6:	91 29       	st.w	r8[0x8],r9
800024e8:	91 39       	st.w	r8[0xc],r9
	}
	
	
	//set pwm-frequency
	tc_write_rc(TIMER_ESC, ESC_TIMER_USED_CHANNEL1, esc_timer_values.period);
800024ea:	8e 9a       	ld.uh	r10,r7[0x2]
800024ec:	08 9b       	mov	r11,r4
800024ee:	fe 7c 50 00 	mov	r12,-45056
800024f2:	f0 1f 00 2e 	mcall	800025a8 <motor_init+0x168>
	tc_write_rc(TIMER_ESC, ESC_TIMER_USED_CHANNEL2, esc_timer_values.period);
800024f6:	8e 9a       	ld.uh	r10,r7[0x2]
800024f8:	0a 9b       	mov	r11,r5
800024fa:	fe 7c 50 00 	mov	r12,-45056
800024fe:	f0 1f 00 2b 	mcall	800025a8 <motor_init+0x168>
	
	//pre-fill
	tc_write_ra(TIMER_ESC, ESC_TIMER_USED_CHANNEL1, esc_timer_values.min);
80002502:	8e ba       	ld.uh	r10,r7[0x6]
80002504:	08 9b       	mov	r11,r4
80002506:	fe 7c 50 00 	mov	r12,-45056
8000250a:	f0 1f 00 29 	mcall	800025ac <motor_init+0x16c>
	tc_write_ra(TIMER_ESC, ESC_TIMER_USED_CHANNEL2, esc_timer_values.min);
8000250e:	8e ba       	ld.uh	r10,r7[0x6]
80002510:	0a 9b       	mov	r11,r5
80002512:	fe 7c 50 00 	mov	r12,-45056
80002516:	f0 1f 00 26 	mcall	800025ac <motor_init+0x16c>
	tc_write_rb(TIMER_ESC, ESC_TIMER_USED_CHANNEL1, esc_timer_values.min);
8000251a:	8e ba       	ld.uh	r10,r7[0x6]
8000251c:	08 9b       	mov	r11,r4
8000251e:	fe 7c 50 00 	mov	r12,-45056
80002522:	f0 1f 00 24 	mcall	800025b0 <motor_init+0x170>
	tc_write_rb(TIMER_ESC, ESC_TIMER_USED_CHANNEL2, esc_timer_values.min);
80002526:	8e ba       	ld.uh	r10,r7[0x6]
80002528:	0a 9b       	mov	r11,r5
8000252a:	fe 7c 50 00 	mov	r12,-45056
8000252e:	f0 1f 00 21 	mcall	800025b0 <motor_init+0x170>

	tc_start (TIMER_ESC, ESC_TIMER_USED_CHANNEL1); //starting timer-channel
80002532:	08 9b       	mov	r11,r4
80002534:	fe 7c 50 00 	mov	r12,-45056
80002538:	f0 1f 00 1f 	mcall	800025b4 <motor_init+0x174>
	tc_start (TIMER_ESC, ESC_TIMER_USED_CHANNEL2);
8000253c:	0a 9b       	mov	r11,r5
8000253e:	fe 7c 50 00 	mov	r12,-45056
80002542:	f0 1f 00 1d 	mcall	800025b4 <motor_init+0x174>
	
	tc_interrupt_t ir_conf;
	ir_conf.covfs = 0; // counter-overflow-interrupt
	ir_conf.cpas = 0; // RA-compare-interrupt
	ir_conf.cpbs = 0; // RB-compare-interrupt
	ir_conf.cpcs = 1; // RC-compare-interrupt
80002546:	40 08       	lddsp	r8,sp[0x0]
80002548:	e0 18 ff f2 	andl	r8,0xfff2
8000254c:	f1 d5 d0 81 	bfins	r8,r5,0x4,0x1
	ir_conf.etrgs = 0; // external-trigger-interrupt
	//ir_conf.int // function?
	ir_conf.ldras = 0; // RA-load-interrupt
	ir_conf.ldrbs = 0; // RB-load-interrupt
	ir_conf.lovrs = 0; // load-overrun-interrupt
80002550:	e0 18 ff 1f 	andl	r8,0xff1f
80002554:	f1 d4 d0 21 	bfins	r8,r4,0x1,0x1
80002558:	50 08       	stdsp	sp[0x0],r8
	
	tc_configure_interrupts(TIMER_ESC, ESC_TIMER_USED_CHANNEL1, &ir_conf);
8000255a:	1a 97       	mov	r7,sp
8000255c:	1a 9a       	mov	r10,sp
8000255e:	08 9b       	mov	r11,r4
80002560:	fe 7c 50 00 	mov	r12,-45056
80002564:	f0 1f 00 15 	mcall	800025b8 <motor_init+0x178>
	tc_configure_interrupts(TIMER_ESC, ESC_TIMER_USED_CHANNEL2, &ir_conf);
80002568:	1a 9a       	mov	r10,sp
8000256a:	0a 9b       	mov	r11,r5
8000256c:	fe 7c 50 00 	mov	r12,-45056
80002570:	f0 1f 00 12 	mcall	800025b8 <motor_init+0x178>
	
	//Disable_global_interrupt(); //was done previously --> in board_init() (init.c)
	//INTC_init_interrupts(); //initializing hardware-interrupt-controller
	
	//Register the RTC interrupt handler to the interrupt controller
	INTC_register_interrupt(&t_c1_rc_isr, AVR32_TC_IRQ0, AVR32_INTC_INT0);
80002574:	08 9a       	mov	r10,r4
80002576:	e0 6b 01 c0 	mov	r11,448
8000257a:	49 1c       	lddpc	r12,800025bc <motor_init+0x17c>
8000257c:	f0 1f 00 11 	mcall	800025c0 <motor_init+0x180>
	INTC_register_interrupt(&t_c2_rc_isr, AVR32_TC_IRQ1, AVR32_INTC_INT0);
80002580:	08 9a       	mov	r10,r4
80002582:	e0 6b 01 c1 	mov	r11,449
80002586:	49 0c       	lddpc	r12,800025c4 <motor_init+0x184>
80002588:	f0 1f 00 0e 	mcall	800025c0 <motor_init+0x180>
};
8000258c:	2f dd       	sub	sp,-12
8000258e:	d8 22       	popm	r4-r7,pc
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	2b 78       	sub	r8,-73
80002594:	80 00       	ld.sh	r0,r0[0x0]
80002596:	36 38       	mov	r8,99
80002598:	80 00       	ld.sh	r0,r0[0x0]
8000259a:	23 2c       	sub	r12,50
8000259c:	00 00       	add	r0,r0
8000259e:	00 fc       	st.b	--r0,r12
800025a0:	80 00       	ld.sh	r0,r0[0x0]
800025a2:	28 24       	sub	r4,-126
800025a4:	00 00       	add	r0,r0
800025a6:	01 0c       	ld.w	r12,r0++
800025a8:	80 00       	ld.sh	r0,r0[0x0]
800025aa:	29 4c       	sub	r12,-108
800025ac:	80 00       	ld.sh	r0,r0[0x0]
800025ae:	28 e4       	sub	r4,-114
800025b0:	80 00       	ld.sh	r0,r0[0x0]
800025b2:	29 18       	sub	r8,-111
800025b4:	80 00       	ld.sh	r0,r0[0x0]
800025b6:	28 c0       	sub	r0,-116
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	29 80       	sub	r0,-104
800025bc:	80 00       	ld.sh	r0,r0[0x0]
800025be:	23 fc       	sub	r12,63
800025c0:	80 00       	ld.sh	r0,r0[0x0]
800025c2:	30 10       	mov	r0,1
800025c4:	80 00       	ld.sh	r0,r0[0x0]
800025c6:	23 b8       	sub	r8,59

800025c8 <sensor_led_init>:

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
800025c8:	fe 78 28 00 	mov	r8,-55296
800025cc:	e0 69 40 00 	mov	r9,16384
800025d0:	f1 49 00 54 	st.w	r8[84],r9
800025d4:	e2 6a 00 00 	mov	r10,131072
800025d8:	f1 4a 00 54 	st.w	r8[84],r10
800025dc:	e0 6b 80 00 	mov	r11,32768
800025e0:	f1 4b 00 54 	st.w	r8[84],r11

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
800025e4:	f1 4b 00 44 	st.w	r8[68],r11
800025e8:	f1 4a 00 44 	st.w	r8[68],r10
800025ec:	f1 49 00 44 	st.w	r8[68],r9
	ioport_set_pin_level(LED_G_SENS, LED_SENS_OFF);
	ioport_set_pin_level(LED_R_SENS, LED_SENS_OFF);
	ioport_set_pin_dir(LED_R_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_G_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_B_SENS, IOPORT_DIR_OUTPUT);
}
800025f0:	5e fc       	retal	r12
800025f2:	d7 03       	nop

800025f4 <write_sensor_data>:
	return twim_read_packet(TWI_SENS, &pack);
	//return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
}

status_code_t write_sensor_data(bno055_register_addr_t _addr, uint8_t *values, uint_fast8_t count)
{
800025f4:	eb cd 40 c0 	pushm	r6-r7,lr
800025f8:	1a 97       	mov	r7,sp
800025fa:	14 98       	mov	r8,r10
	uint8_t volatile _values[count + 1];
	_values[0] = _addr;
	for (uint_fast8_t i = 0; i< count; i++) _values[i+1] = values[i];
	
	return twim_write(TWI_SENS, &_values, count + 1, BNO055_TWI_ADDR_SENSOR, false);
};
800025fc:	1a 96       	mov	r6,sp
	//return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
}

status_code_t write_sensor_data(bno055_register_addr_t _addr, uint8_t *values, uint_fast8_t count)
{
	uint8_t volatile _values[count + 1];
800025fe:	2f fa       	sub	r10,-1
80002600:	f0 c9 ff f9 	sub	r9,r8,-7
80002604:	e0 19 ff fc 	andl	r9,0xfffc
80002608:	12 1d       	sub	sp,r9
8000260a:	1a 9e       	mov	lr,sp
	_values[0] = _addr;
8000260c:	ba 8c       	st.b	sp[0x0],r12
	for (uint_fast8_t i = 0; i< count; i++) _values[i+1] = values[i];
8000260e:	58 08       	cp.w	r8,0
80002610:	c0 90       	breq	80002622 <write_sensor_data+0x2e>
80002612:	30 09       	mov	r9,0
80002614:	2f f9       	sub	r9,-1
80002616:	17 3c       	ld.ub	r12,r11++
80002618:	fc 09 0b 0c 	st.b	lr[r9],r12
8000261c:	12 38       	cp.w	r8,r9
8000261e:	fe 9b ff fb 	brhi	80002614 <write_sensor_data+0x20>
	
	return twim_write(TWI_SENS, &_values, count + 1, BNO055_TWI_ADDR_SENSOR, false);
80002622:	30 08       	mov	r8,0
80002624:	32 89       	mov	r9,40
80002626:	1c 9b       	mov	r11,lr
80002628:	fe 7c 40 00 	mov	r12,-49152
8000262c:	f0 1f 00 03 	mcall	80002638 <write_sensor_data+0x44>
};
80002630:	0c 9d       	mov	sp,r6
80002632:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002636:	00 00       	add	r0,r0
80002638:	80 00       	ld.sh	r0,r0[0x0]
8000263a:	2d 6c       	sub	r12,-42

8000263c <read_sensor_data>:
	ioport_set_pin_dir(LED_R_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_G_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_B_SENS, IOPORT_DIR_OUTPUT);
}

status_code_t read_sensor_data(bno055_register_addr_t _addr, const uint8_t *values, uint32_t count){
8000263c:	d4 01       	pushm	lr
8000263e:	20 5d       	sub	sp,20
	twim_package_t pack;
	pack.addr[0] = _addr;
80002640:	ba cc       	st.b	sp[0x4],r12
	pack.addr_length = 1;
80002642:	30 18       	mov	r8,1
80002644:	ba f8       	st.b	sp[0x7],r8
	pack.buffer = values;
80002646:	50 2b       	stdsp	sp[0x8],r11
	pack.chip = BNO055_TWI_ADDR_SENSOR;
80002648:	32 88       	mov	r8,40
8000264a:	50 08       	stdsp	sp[0x0],r8
	pack.length = count;
8000264c:	50 3a       	stdsp	sp[0xc],r10
	pack.no_wait = false;
8000264e:	30 08       	mov	r8,0
80002650:	fb 68 00 10 	st.b	sp[16],r8
	
	return twim_read_packet(TWI_SENS, &pack);
80002654:	1a 9b       	mov	r11,sp
80002656:	fe 7c 40 00 	mov	r12,-49152
8000265a:	f0 1f 00 03 	mcall	80002664 <read_sensor_data+0x28>
	//return twim_read(TWI_SENS, values, count,BNO055_TWI_ADDR_SENSOR,false);
}
8000265e:	2f bd       	sub	sp,-20
80002660:	d8 02       	popm	pc
80002662:	00 00       	add	r0,r0
80002664:	80 00       	ld.sh	r0,r0[0x0]
80002666:	2e 3c       	sub	r12,-29

80002668 <read_sensor_euler>:
	_mag.z = (((int16_t) buf[5]) << 8) + ((int16_t) buf[4]);
	return _mag;
};

struct bno055_euler_t read_sensor_euler(void)
{
80002668:	eb cd 40 80 	pushm	r7,lr
8000266c:	20 2d       	sub	sp,8
8000266e:	18 97       	mov	r7,r12
	uint8_t buf[6];
	struct bno055_euler_t _eul;
	read_sensor_data(BNO055_EULER_H_LSB_ADDR, &buf,6);
80002670:	30 6a       	mov	r10,6
80002672:	1a 9b       	mov	r11,sp
80002674:	31 ac       	mov	r12,26
80002676:	f0 1f 00 0b 	mcall	800026a0 <read_sensor_euler+0x38>
	_eul.h = (((int16_t) buf[1]) << 8) + ((int16_t) buf[0]);
8000267a:	1b 98       	ld.ub	r8,sp[0x1]
8000267c:	a9 68       	lsl	r8,0x8
8000267e:	1b 89       	ld.ub	r9,sp[0x0]
80002680:	12 08       	add	r8,r9
	_eul.r = (((int16_t) buf[3]) << 8) + ((int16_t) buf[2]);
80002682:	1b b9       	ld.ub	r9,sp[0x3]
80002684:	a9 69       	lsl	r9,0x8
80002686:	1b aa       	ld.ub	r10,sp[0x2]
80002688:	14 09       	add	r9,r10
	_eul.p = (((int16_t) buf[5]) << 8) + ((int16_t) buf[4]);
	return _eul;
8000268a:	1b da       	ld.ub	r10,sp[0x5]
8000268c:	a9 6a       	lsl	r10,0x8
8000268e:	1b cb       	ld.ub	r11,sp[0x4]
80002690:	16 0a       	add	r10,r11
80002692:	8f 2a       	st.w	r7[0x8],r10
80002694:	8f 19       	st.w	r7[0x4],r9
80002696:	8f 08       	st.w	r7[0x0],r8
};
80002698:	0e 9c       	mov	r12,r7
8000269a:	2f ed       	sub	sp,-8
8000269c:	e3 cd 80 80 	ldm	sp++,r7,pc
800026a0:	80 00       	ld.sh	r0,r0[0x0]
800026a2:	26 3c       	sub	r12,99

800026a4 <sensor_init>:
 *  Author: Markus
 */ 
#include "asf.h"
#include "sensor.h" 

void sensor_init(void){
800026a4:	eb cd 40 e0 	pushm	r5-r7,lr
800026a8:	20 5d       	sub	sp,20
800026aa:	fe 77 28 00 	mov	r7,-55296
800026ae:	e0 76 00 00 	mov	r6,65536
800026b2:	ef 46 00 44 	st.w	r7[68],r6
800026b6:	e0 65 01 00 	mov	r5,256
800026ba:	ef 45 00 44 	st.w	r7[68],r5
				pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->oderc = arch_ioport_pin_to_mask(
800026be:	e0 68 20 00 	mov	r8,8192
800026c2:	ef 48 00 48 	st.w	r7[72],r8
	//ioport_set_pin_dir(BOOT_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(ADDR0_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(RST_SENS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(INT_SENS, IOPORT_DIR_INPUT);
	
	sensor_led_init();
800026c6:	f0 1f 00 49 	mcall	800027e8 <sensor_init+0x144>
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
800026ca:	ef 46 00 58 	st.w	r7[88],r6
800026ce:	ef 45 00 58 	st.w	r7[88],r5
800026d2:	30 bb       	mov	r11,11
800026d4:	30 2c       	mov	r12,2
800026d6:	f0 1f 00 46 	mcall	800027ec <sensor_init+0x148>
	ioport_set_pin_level(RST_SENS, LOW);
	
	sysclk_enable_peripheral_clock(TWI_SENS);
	
	static const gpio_map_t TWI_GPIO_MAP =	{{SDA_SENS, SDA_SENS_PER_FUNC},{SCL_SENS, SCL_SENS_PER_FUNC}};
	gpio_enable_module(TWI_GPIO_MAP,2);
800026da:	30 2b       	mov	r11,2
800026dc:	4c 5c       	lddpc	r12,800027f0 <sensor_init+0x14c>
800026de:	f0 1f 00 46 	mcall	800027f4 <sensor_init+0x150>
	
	twim_options_t _twi_opt;
	_twi_opt.chip = BNO055_TWI_ADDR_SENSOR;
800026e2:	32 88       	mov	r8,40
800026e4:	50 38       	stdsp	sp[0xc],r8
	_twi_opt.pba_hz = sysclk_get_pba_hz();
800026e6:	e0 68 c3 80 	mov	r8,50048
800026ea:	ea 18 01 c9 	orh	r8,0x1c9
800026ee:	50 18       	stdsp	sp[0x4],r8
	_twi_opt.smbus = false;
800026f0:	30 08       	mov	r8,0
800026f2:	fb 68 00 10 	st.b	sp[16],r8
	_twi_opt.speed = TWI_SENS_SPEED;
800026f6:	e6 68 1a 80 	mov	r8,400000
800026fa:	50 28       	stdsp	sp[0x8],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026fc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002700:	e2 69 49 f0 	mov	r9,150000
80002704:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002708:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000270c:	14 38       	cp.w	r8,r10
8000270e:	e0 88 00 08 	brls	8000271e <sensor_init+0x7a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002712:	12 38       	cp.w	r8,r9
80002714:	fe 98 ff fa 	brls	80002708 <sensor_init+0x64>
80002718:	12 3a       	cp.w	r10,r9
8000271a:	c2 a3       	brcs	8000276e <sensor_init+0xca>
8000271c:	cf 6b       	rjmp	80002708 <sensor_init+0x64>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000271e:	12 38       	cp.w	r8,r9
80002720:	e0 8b 00 27 	brhi	8000276e <sensor_init+0xca>
80002724:	12 3a       	cp.w	r10,r9
80002726:	c2 43       	brcs	8000276e <sensor_init+0xca>
80002728:	cf 0b       	rjmp	80002708 <sensor_init+0x64>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000272a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000272e:	14 38       	cp.w	r8,r10
80002730:	e0 88 00 08 	brls	80002740 <sensor_init+0x9c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002734:	12 38       	cp.w	r8,r9
80002736:	fe 98 ff fa 	brls	8000272a <sensor_init+0x86>
8000273a:	12 3a       	cp.w	r10,r9
8000273c:	c2 83       	brcs	8000278c <sensor_init+0xe8>
8000273e:	cf 6b       	rjmp	8000272a <sensor_init+0x86>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002740:	12 38       	cp.w	r8,r9
80002742:	e0 8b 00 25 	brhi	8000278c <sensor_init+0xe8>
80002746:	12 3a       	cp.w	r10,r9
80002748:	c2 23       	brcs	8000278c <sensor_init+0xe8>
8000274a:	cf 0b       	rjmp	8000272a <sensor_init+0x86>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000274c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002750:	14 38       	cp.w	r8,r10
80002752:	e0 88 00 08 	brls	80002762 <sensor_init+0xbe>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002756:	12 38       	cp.w	r8,r9
80002758:	fe 98 ff fa 	brls	8000274c <sensor_init+0xa8>
8000275c:	12 3a       	cp.w	r10,r9
8000275e:	c4 13       	brcs	800027e0 <sensor_init+0x13c>
80002760:	cf 6b       	rjmp	8000274c <sensor_init+0xa8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002762:	12 38       	cp.w	r8,r9
80002764:	e0 8b 00 3e 	brhi	800027e0 <sensor_init+0x13c>
80002768:	12 3a       	cp.w	r10,r9
8000276a:	c3 b3       	brcs	800027e0 <sensor_init+0x13c>
8000276c:	cf 0b       	rjmp	8000274c <sensor_init+0xa8>

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
8000276e:	e0 69 01 00 	mov	r9,256
80002772:	fe 78 28 00 	mov	r8,-55296
80002776:	f1 49 00 54 	st.w	r8[84],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000277a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000277e:	e0 6a 6f 40 	mov	r10,28480
80002782:	ea 1a 01 40 	orh	r10,0x140
80002786:	f0 0a 00 0a 	add	r10,r8,r10
8000278a:	cd 0b       	rjmp	8000272a <sensor_init+0x86>
	
	delay_ms(5);
	ioport_set_pin_level(RST_SENS, HIGH);
	delay_ms(BNO055_STARTUP_TIME_MS);							//SENSOR STARTUP TIME
	twim_master_init(TWI_SENS, &_twi_opt);
8000278c:	fa cb ff fc 	sub	r11,sp,-4
80002790:	fe 7c 40 00 	mov	r12,-49152
80002794:	f0 1f 00 19 	mcall	800027f8 <sensor_init+0x154>
	
	//Konfigurieren des Sensores
	
	//REMAP X AS Y
	uint8_t val;
	val = BNO055_REMAP_X_Y;
80002798:	32 18       	mov	r8,33
8000279a:	ba b8       	st.b	sp[0x3],r8
	write_sensor_data(BNO055_AXIS_MAP_CONFIG_ADDR, &val,1);											//AXIS REMAPPING
8000279c:	fa c7 ff fd 	sub	r7,sp,-3
800027a0:	30 1a       	mov	r10,1
800027a2:	0e 9b       	mov	r11,r7
800027a4:	34 1c       	mov	r12,65
800027a6:	f0 1f 00 16 	mcall	800027fc <sensor_init+0x158>
	val = (BNO055_REMAP_AXIS_POSITIVE)&(BNO055_REMAP_AXIS_POSITIVE)&(BNO055_REMAP_AXIS_POSITIVE);
800027aa:	30 06       	mov	r6,0
800027ac:	ba b6       	st.b	sp[0x3],r6
	write_sensor_data(BNO055_AXIS_MAP_SIGN_ADDR, &val, 1);														//AXIS REMAPPING SIGN
800027ae:	30 1a       	mov	r10,1
800027b0:	0e 9b       	mov	r11,r7
800027b2:	34 2c       	mov	r12,66
800027b4:	f0 1f 00 12 	mcall	800027fc <sensor_init+0x158>
	
	//Output Data Format
	val = (BNO055_ACCEL_UNIT_MSQ << BNO055_ACCEL_UNIT_POS) & \
800027b8:	ba b6       	st.b	sp[0x3],r6
		(BNO055_GYRO_UNIT_RPS << BNO055_GYRO_UNIT_POS) & \
		(BNO055_EULER_UNIT_DEG << BNO055_EULER_UNIT_POS) & \
		(BNO055_TEMP_UNIT_CELSIUS << BNO055_TEMP_UNIT_POS); 
	write_sensor_data(BNO055_UNIT_SEL_ADDR, &val, 1);
800027ba:	30 1a       	mov	r10,1
800027bc:	0e 9b       	mov	r11,r7
800027be:	33 bc       	mov	r12,59
800027c0:	f0 1f 00 0f 	mcall	800027fc <sensor_init+0x158>
	
	val = BNO055_OPERATION_MODE_NDOF;
800027c4:	30 c8       	mov	r8,12
800027c6:	ba b8       	st.b	sp[0x3],r8
	write_sensor_data(BNO055_OPR_MODE_ADDR, &val,1);
800027c8:	30 1a       	mov	r10,1
800027ca:	0e 9b       	mov	r11,r7
800027cc:	33 dc       	mov	r12,61
800027ce:	f0 1f 00 0c 	mcall	800027fc <sensor_init+0x158>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800027d2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800027d6:	e8 79 27 c0 	mov	r9,600000
800027da:	f0 09 00 0a 	add	r10,r8,r9
800027de:	cb 7b       	rjmp	8000274c <sensor_init+0xa8>
	delay_ms(BNO055_SWITCH_OP_TIME_MS);												//SENSOR SWITCHING OPERATION MODE TIME
}
800027e0:	2f bd       	sub	sp,-20
800027e2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800027e6:	00 00       	add	r0,r0
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	25 c8       	sub	r8,92
800027ec:	80 00       	ld.sh	r0,r0[0x0]
800027ee:	2b 78       	sub	r8,-73
800027f0:	80 00       	ld.sh	r0,r0[0x0]
800027f2:	36 58       	mov	r8,101
800027f4:	80 00       	ld.sh	r0,r0[0x0]
800027f6:	23 2c       	sub	r12,50
800027f8:	80 00       	ld.sh	r0,r0[0x0]
800027fa:	2f 4c       	sub	r12,-12
800027fc:	80 00       	ld.sh	r0,r0[0x0]
800027fe:	25 f4       	sub	r4,95

80002800 <settings_init>:
volatile settings_t set;

//Read settings set of UserPage on Controller
//If no data -> Default-values
void settings_init(void)
{
80002800:	d4 01       	pushm	lr
	if (flashcdw_quick_user_page_read())
80002802:	f0 1f 00 06 	mcall	80002818 <settings_init+0x18>
80002806:	c0 81       	brne	80002816 <settings_init+0x16>
	{
		//User page empty -> default values
	}	
	else
	{
		flashcdw_memcpy(&set, (uint32_t*) AVR32_USER_PAGE_ADDRESS, sizeof(set), false);
80002808:	30 09       	mov	r9,0
8000280a:	33 ca       	mov	r10,60
8000280c:	fc 1b 80 80 	movh	r11,0x8080
80002810:	48 3c       	lddpc	r12,8000281c <settings_init+0x1c>
80002812:	f0 1f 00 04 	mcall	80002820 <settings_init+0x20>
80002816:	d8 02       	popm	pc
80002818:	80 00       	ld.sh	r0,r0[0x0]
8000281a:	21 4c       	sub	r12,20
8000281c:	00 00       	add	r0,r0
8000281e:	01 1c       	ld.sh	r12,r0++
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	21 9c       	sub	r12,25

80002824 <tc_init_waveform>:
80002824:	76 09       	ld.w	r9,r11[0x0]
80002826:	58 29       	cp.w	r9,2
80002828:	e0 88 00 03 	brls	8000282e <tc_init_waveform+0xa>
8000282c:	5e fe       	retal	-1
8000282e:	76 18       	ld.w	r8,r11[0x4]
80002830:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002834:	af ba       	sbr	r10,0xf
80002836:	10 9b       	mov	r11,r8
80002838:	e6 1b c0 00 	andh	r11,0xc000,COH
8000283c:	16 4a       	or	r10,r11
8000283e:	10 9b       	mov	r11,r8
80002840:	e6 1b 30 00 	andh	r11,0x3000,COH
80002844:	16 4a       	or	r10,r11
80002846:	10 9b       	mov	r11,r8
80002848:	e6 1b 0c 00 	andh	r11,0xc00,COH
8000284c:	16 4a       	or	r10,r11
8000284e:	10 9b       	mov	r11,r8
80002850:	e6 1b 03 00 	andh	r11,0x300,COH
80002854:	16 4a       	or	r10,r11
80002856:	10 9b       	mov	r11,r8
80002858:	e6 1b 00 c0 	andh	r11,0xc0,COH
8000285c:	16 4a       	or	r10,r11
8000285e:	10 9b       	mov	r11,r8
80002860:	e6 1b 00 30 	andh	r11,0x30,COH
80002864:	16 4a       	or	r10,r11
80002866:	10 9b       	mov	r11,r8
80002868:	e6 1b 00 0c 	andh	r11,0xc,COH
8000286c:	16 4a       	or	r10,r11
8000286e:	10 9b       	mov	r11,r8
80002870:	e6 1b 00 03 	andh	r11,0x3,COH
80002874:	16 4a       	or	r10,r11
80002876:	10 9b       	mov	r11,r8
80002878:	e2 1b 60 00 	andl	r11,0x6000,COH
8000287c:	16 4a       	or	r10,r11
8000287e:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
80002882:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
80002886:	10 9b       	mov	r11,r8
80002888:	e2 1b 0c 00 	andl	r11,0xc00,COH
8000288c:	16 4a       	or	r10,r11
8000288e:	10 9b       	mov	r11,r8
80002890:	e2 1b 03 00 	andl	r11,0x300,COH
80002894:	16 4a       	or	r10,r11
80002896:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
8000289a:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
8000289e:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
800028a2:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
800028a6:	10 9b       	mov	r11,r8
800028a8:	e2 1b 00 30 	andl	r11,0x30,COH
800028ac:	16 4a       	or	r10,r11
800028ae:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800028b2:	f5 e8 10 38 	or	r8,r10,r8<<0x3
800028b6:	a5 69       	lsl	r9,0x4
800028b8:	2f f9       	sub	r9,-1
800028ba:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800028be:	5e fd       	retal	0

800028c0 <tc_start>:
800028c0:	58 2b       	cp.w	r11,2
800028c2:	e0 88 00 03 	brls	800028c8 <tc_start+0x8>
800028c6:	5e fe       	retal	-1
800028c8:	a7 6b       	lsl	r11,0x6
800028ca:	16 0c       	add	r12,r11
800028cc:	30 58       	mov	r8,5
800028ce:	99 08       	st.w	r12[0x0],r8
800028d0:	5e fd       	retal	0

800028d2 <tc_read_sr>:
800028d2:	58 2b       	cp.w	r11,2
800028d4:	e0 88 00 03 	brls	800028da <tc_read_sr+0x8>
800028d8:	5e fe       	retal	-1
800028da:	a7 6b       	lsl	r11,0x6
800028dc:	2e 0b       	sub	r11,-32
800028de:	16 0c       	add	r12,r11
800028e0:	78 0c       	ld.w	r12,r12[0x0]
800028e2:	5e fc       	retal	r12

800028e4 <tc_write_ra>:
800028e4:	58 2b       	cp.w	r11,2
800028e6:	e0 88 00 03 	brls	800028ec <tc_write_ra+0x8>
800028ea:	5e fe       	retal	-1
800028ec:	f6 08 15 04 	lsl	r8,r11,0x4
800028f0:	2f f8       	sub	r8,-1
800028f2:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800028f6:	e2 18 80 00 	andl	r8,0x8000,COH
800028fa:	c0 c0       	breq	80002912 <tc_write_ra+0x2e>
800028fc:	a7 6b       	lsl	r11,0x6
800028fe:	16 0c       	add	r12,r11
80002900:	2e cc       	sub	r12,-20
80002902:	78 08       	ld.w	r8,r12[0x0]
80002904:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002908:	e0 18 00 00 	andl	r8,0x0
8000290c:	f3 e8 10 08 	or	r8,r9,r8
80002910:	99 08       	st.w	r12[0x0],r8
80002912:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
80002916:	5e fc       	retal	r12

80002918 <tc_write_rb>:
80002918:	58 2b       	cp.w	r11,2
8000291a:	e0 88 00 03 	brls	80002920 <tc_write_rb+0x8>
8000291e:	5e fe       	retal	-1
80002920:	f6 08 15 04 	lsl	r8,r11,0x4
80002924:	2f f8       	sub	r8,-1
80002926:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
8000292a:	e2 18 80 00 	andl	r8,0x8000,COH
8000292e:	c0 c0       	breq	80002946 <tc_write_rb+0x2e>
80002930:	a7 6b       	lsl	r11,0x6
80002932:	16 0c       	add	r12,r11
80002934:	2e 8c       	sub	r12,-24
80002936:	78 08       	ld.w	r8,r12[0x0]
80002938:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
8000293c:	e0 18 00 00 	andl	r8,0x0
80002940:	f3 e8 10 08 	or	r8,r9,r8
80002944:	99 08       	st.w	r12[0x0],r8
80002946:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
8000294a:	5e fc       	retal	r12

8000294c <tc_write_rc>:
8000294c:	58 2b       	cp.w	r11,2
8000294e:	e0 88 00 03 	brls	80002954 <tc_write_rc+0x8>
80002952:	5e fe       	retal	-1
80002954:	f6 08 15 04 	lsl	r8,r11,0x4
80002958:	2f f8       	sub	r8,-1
8000295a:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
8000295e:	e2 18 80 00 	andl	r8,0x8000,COH
80002962:	c0 c0       	breq	8000297a <tc_write_rc+0x2e>
80002964:	a7 6b       	lsl	r11,0x6
80002966:	16 0c       	add	r12,r11
80002968:	2e 4c       	sub	r12,-28
8000296a:	78 08       	ld.w	r8,r12[0x0]
8000296c:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002970:	e0 18 00 00 	andl	r8,0x0
80002974:	f3 e8 10 08 	or	r8,r9,r8
80002978:	99 08       	st.w	r12[0x0],r8
8000297a:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
8000297e:	5e fc       	retal	r12

80002980 <tc_configure_interrupts>:
80002980:	eb cd 40 fc 	pushm	r2-r7,lr
80002984:	e1 b9 00 00 	mfsr	r9,0x0
80002988:	58 2b       	cp.w	r11,2
8000298a:	e0 88 00 04 	brls	80002992 <tc_configure_interrupts+0x12>
8000298e:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
80002992:	ee 19 00 01 	eorh	r9,0x1
80002996:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
8000299a:	74 08       	ld.w	r8,r10[0x0]
8000299c:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
800029a0:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
800029a4:	a7 6e       	lsl	lr,0x6
800029a6:	fd e7 10 7e 	or	lr,lr,r7<<0x7
800029aa:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
800029ae:	0e 4e       	or	lr,r7
800029b0:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
800029b4:	fd e7 10 5e 	or	lr,lr,r7<<0x5
800029b8:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
800029bc:	fd e7 10 4e 	or	lr,lr,r7<<0x4
800029c0:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
800029c4:	fd e7 10 3e 	or	lr,lr,r7<<0x3
800029c8:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
800029cc:	fd e7 10 2e 	or	lr,lr,r7<<0x2
800029d0:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800029d4:	fd e8 10 18 	or	r8,lr,r8<<0x1
800029d8:	f6 0e 15 06 	lsl	lr,r11,0x6
800029dc:	f8 0e 00 0e 	add	lr,r12,lr
800029e0:	2d ce       	sub	lr,-36
800029e2:	9d 08       	st.w	lr[0x0],r8
800029e4:	58 09       	cp.w	r9,0
800029e6:	c0 20       	breq	800029ea <tc_configure_interrupts+0x6a>
800029e8:	d3 03       	ssrf	0x10
800029ea:	74 08       	ld.w	r8,r10[0x0]
800029ec:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800029f0:	e0 65 00 80 	mov	r5,128
800029f4:	f9 b5 01 00 	movne	r5,0
800029f8:	74 08       	ld.w	r8,r10[0x0]
800029fa:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800029fe:	f9 b4 00 40 	moveq	r4,64
80002a02:	f9 b4 01 00 	movne	r4,0
80002a06:	74 08       	ld.w	r8,r10[0x0]
80002a08:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002a0c:	f9 b3 00 20 	moveq	r3,32
80002a10:	f9 b3 01 00 	movne	r3,0
80002a14:	74 08       	ld.w	r8,r10[0x0]
80002a16:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002a1a:	f9 b2 00 10 	moveq	r2,16
80002a1e:	f9 b2 01 00 	movne	r2,0
80002a22:	74 08       	ld.w	r8,r10[0x0]
80002a24:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002a28:	f9 b6 00 08 	moveq	r6,8
80002a2c:	f9 b6 01 00 	movne	r6,0
80002a30:	74 08       	ld.w	r8,r10[0x0]
80002a32:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002a36:	f9 b7 00 04 	moveq	r7,4
80002a3a:	f9 b7 01 00 	movne	r7,0
80002a3e:	74 08       	ld.w	r8,r10[0x0]
80002a40:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002a44:	f9 be 00 02 	moveq	lr,2
80002a48:	f9 be 01 00 	movne	lr,0
80002a4c:	74 08       	ld.w	r8,r10[0x0]
80002a4e:	ec 18 00 01 	eorl	r8,0x1
80002a52:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002a56:	eb e8 10 08 	or	r8,r5,r8
80002a5a:	08 48       	or	r8,r4
80002a5c:	06 48       	or	r8,r3
80002a5e:	04 48       	or	r8,r2
80002a60:	0c 48       	or	r8,r6
80002a62:	0e 48       	or	r8,r7
80002a64:	1c 48       	or	r8,lr
80002a66:	f6 0a 15 06 	lsl	r10,r11,0x6
80002a6a:	f8 0a 00 0a 	add	r10,r12,r10
80002a6e:	2d 8a       	sub	r10,-40
80002a70:	95 08       	st.w	r10[0x0],r8
80002a72:	a7 6b       	lsl	r11,0x6
80002a74:	2e 0b       	sub	r11,-32
80002a76:	16 0c       	add	r12,r11
80002a78:	78 08       	ld.w	r8,r12[0x0]
80002a7a:	58 09       	cp.w	r9,0
80002a7c:	c0 31       	brne	80002a82 <tc_configure_interrupts+0x102>
80002a7e:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002a82:	d5 03       	csrf	0x10
80002a84:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002a88 <osc_priv_enable_rc120m>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC32_HZ */

void osc_priv_enable_rc120m(void)
{
80002a88:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a8a:	e1 b8 00 00 	mfsr	r8,0x0
80002a8e:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002a90:	d3 03       	ssrf	0x10

	return flags;
80002a92:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80002a94:	fe 78 58 00 	mov	r8,-43008
80002a98:	34 4a       	mov	r10,68
80002a9a:	ea 1a aa 00 	orh	r10,0xaa00
80002a9e:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80002aa0:	30 1a       	mov	r10,1
80002aa2:	f1 4a 00 44 	st.w	r8[68],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002aa6:	12 98       	mov	r8,r9
80002aa8:	e6 18 00 01 	andh	r8,0x1,COH
80002aac:	c0 21       	brne	80002ab0 <osc_priv_enable_rc120m+0x28>
      cpu_irq_enable();
80002aae:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002ab0:	2f fd       	sub	sp,-4
80002ab2:	5e fc       	retal	r12

80002ab4 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80002ab4:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ab6:	e1 b8 00 00 	mfsr	r8,0x0
80002aba:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002abc:	d3 03       	ssrf	0x10

	return flags;
80002abe:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL1);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80002ac0:	fe 78 14 00 	mov	r8,-60416
80002ac4:	fc 1a aa 00 	movh	r10,0xaa00
80002ac8:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
80002acc:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002ace:	12 98       	mov	r8,r9
80002ad0:	e6 18 00 01 	andh	r8,0x1,COH
80002ad4:	c0 21       	brne	80002ad8 <sysclk_set_source+0x24>
      cpu_irq_enable();
80002ad6:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002ad8:	2f fd       	sub	sp,-4
80002ada:	5e fc       	retal	r12

80002adc <sysclk_set_prescalers>:
 * \param pba_shift The PBA clock will be divided by \f$2^{pba\_shift}\f$
 * \param pbb_shift The PBB clock will be divided by \f$2^{pbb\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift)
{
80002adc:	d4 01       	pushm	lr
80002ade:	20 1d       	sub	sp,4
	uint32_t   pbb_cksel = 0;

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
80002ae0:	58 0c       	cp.w	r12,0
80002ae2:	c0 30       	breq	80002ae8 <sysclk_set_prescalers+0xc>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_OFFSET)
80002ae4:	20 1c       	sub	r12,1
80002ae6:	a7 bc       	sbr	r12,0x7
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
80002ae8:	58 0b       	cp.w	r11,0
80002aea:	c0 30       	breq	80002af0 <sysclk_set_prescalers+0x14>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_OFFSET)
80002aec:	20 1b       	sub	r11,1
80002aee:	a7 bb       	sbr	r11,0x7
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
80002af0:	58 0a       	cp.w	r10,0
80002af2:	c0 30       	breq	80002af8 <sysclk_set_prescalers+0x1c>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_OFFSET)
80002af4:	20 1a       	sub	r10,1
80002af6:	a7 ba       	sbr	r10,0x7

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002af8:	e1 b8 00 00 	mfsr	r8,0x0
80002afc:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002afe:	d3 03       	ssrf	0x10

	return flags;
80002b00:	40 09       	lddsp	r9,sp[0x0]
				| (1U << AVR32_PM_PBBDIV);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
80002b02:	fe 78 14 00 	mov	r8,-60416
80002b06:	30 4e       	mov	lr,4
80002b08:	ea 1e aa 00 	orh	lr,0xaa00
80002b0c:	f1 4e 00 58 	st.w	r8[88],lr
	AVR32_PM.cpusel = cpu_cksel;
80002b10:	91 1c       	st.w	r8[0x4],r12
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
80002b12:	30 cc       	mov	r12,12
80002b14:	ea 1c aa 00 	orh	r12,0xaa00
80002b18:	f1 4c 00 58 	st.w	r8[88],r12
	AVR32_PM.pbasel = pba_cksel;
80002b1c:	91 3b       	st.w	r8[0xc],r11
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
80002b1e:	31 0b       	mov	r11,16
80002b20:	ea 1b aa 00 	orh	r11,0xaa00
80002b24:	f1 4b 00 58 	st.w	r8[88],r11
	AVR32_PM.pbbsel = pbb_cksel;
80002b28:	91 4a       	st.w	r8[0x10],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002b2a:	12 98       	mov	r8,r9
80002b2c:	e6 18 00 01 	andh	r8,0x1,COH
80002b30:	c0 21       	brne	80002b34 <sysclk_set_prescalers+0x58>
      cpu_irq_enable();
80002b32:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002b34:	2f fd       	sub	sp,-4
80002b36:	d8 02       	popm	pc

80002b38 <sysclk_init>:
#endif // CONFIG_USBCLK_SOURCE



void sysclk_init(void)
{
80002b38:	d4 01       	pushm	lr
	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
80002b3a:	30 2a       	mov	r10,2
80002b3c:	14 9b       	mov	r11,r10
80002b3e:	14 9c       	mov	r12,r10
80002b40:	f0 1f 00 0a 	mcall	80002b68 <sysclk_init+0x30>
		osc_priv_enable_osc32();
		break;
#endif

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
80002b44:	f0 1f 00 0a 	mcall	80002b6c <sysclk_init+0x34>
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
80002b48:	fe 78 58 00 	mov	r8,-43008
80002b4c:	71 19       	ld.w	r9,r8[0x44]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80002b4e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80002b52:	cf d0       	breq	80002b4c <sysclk_init+0x14>
#endif
	case SYSCLK_SRC_RC120M:
		osc_enable(OSC_ID_RC120M);
		osc_wait_ready(OSC_ID_RC120M);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80002b54:	e0 6c c3 80 	mov	r12,50048
80002b58:	ea 1c 01 c9 	orh	r12,0x1c9
80002b5c:	f0 1f 00 05 	mcall	80002b70 <sysclk_init+0x38>
		sysclk_set_source(SYSCLK_SRC_RC120M);
80002b60:	30 4c       	mov	r12,4
80002b62:	f0 1f 00 05 	mcall	80002b74 <sysclk_init+0x3c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002b66:	d8 02       	popm	pc
80002b68:	80 00       	ld.sh	r0,r0[0x0]
80002b6a:	2a dc       	sub	r12,-83
80002b6c:	80 00       	ld.sh	r0,r0[0x0]
80002b6e:	2a 88       	sub	r8,-88
80002b70:	80 00       	ld.sh	r0,r0[0x0]
80002b72:	20 78       	sub	r8,7
80002b74:	80 00       	ld.sh	r0,r0[0x0]
80002b76:	2a b4       	sub	r4,-85

80002b78 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002b78:	d4 01       	pushm	lr
80002b7a:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002b7c:	e1 b8 00 00 	mfsr	r8,0x0
80002b80:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002b82:	d3 03       	ssrf	0x10

	return flags;
80002b84:	40 09       	lddsp	r9,sp[0x0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002b86:	a3 6c       	lsl	r12,0x2
80002b88:	fe 7a 14 20 	mov	r10,-60384
80002b8c:	f8 0a 00 08 	add	r8,r12,r10
80002b90:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002b92:	30 1e       	mov	lr,1
80002b94:	fc 0b 09 4b 	lsl	r11,lr,r11
80002b98:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002b9a:	32 0a       	mov	r10,32
80002b9c:	ea 1a aa 00 	orh	r10,0xaa00
80002ba0:	14 0c       	add	r12,r10
80002ba2:	fe 7a 14 00 	mov	r10,-60416
80002ba6:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002baa:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002bac:	12 98       	mov	r8,r9
80002bae:	e6 18 00 01 	andh	r8,0x1,COH
80002bb2:	c0 21       	brne	80002bb6 <sysclk_priv_enable_module+0x3e>
      cpu_irq_enable();
80002bb4:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002bb6:	2f fd       	sub	sp,-4
80002bb8:	d8 02       	popm	pc

80002bba <spi_initSlave>:
80002bba:	30 38       	mov	r8,3
80002bbc:	f0 0a 18 00 	cp.b	r10,r8
80002bc0:	5f b9       	srhi	r9
80002bc2:	30 78       	mov	r8,7
80002bc4:	f0 0b 18 00 	cp.b	r11,r8
80002bc8:	5f 88       	srls	r8
80002bca:	f3 e8 10 08 	or	r8,r9,r8
80002bce:	c1 71       	brne	80002bfc <spi_initSlave+0x42>
80002bd0:	31 08       	mov	r8,16
80002bd2:	f0 0b 18 00 	cp.b	r11,r8
80002bd6:	e0 8b 00 13 	brhi	80002bfc <spi_initSlave+0x42>
80002bda:	e0 68 00 80 	mov	r8,128
80002bde:	99 08       	st.w	r12[0x0],r8
80002be0:	f1 da c0 01 	bfextu	r8,r10,0x0,0x1
80002be4:	f9 b8 00 02 	moveq	r8,2
80002be8:	f9 b8 01 00 	movne	r8,0
80002bec:	20 8b       	sub	r11,8
80002bee:	a1 9a       	lsr	r10,0x1
80002bf0:	f5 eb 10 4a 	or	r10,r10,r11<<0x4
80002bf4:	f5 e8 10 08 	or	r8,r10,r8
80002bf8:	99 c8       	st.w	r12[0x30],r8
80002bfa:	5e fd       	retal	0
80002bfc:	30 2c       	mov	r12,2
80002bfe:	5e fc       	retal	r12

80002c00 <spi_enable>:
80002c00:	30 18       	mov	r8,1
80002c02:	99 08       	st.w	r12[0x0],r8
80002c04:	5e fc       	retal	r12
80002c06:	d7 03       	nop

80002c08 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002c08:	4a e8       	lddpc	r8,80002cc0 <twim_master_interrupt_handler+0xb8>
80002c0a:	70 08       	ld.w	r8,r8[0x0]
80002c0c:	70 79       	ld.w	r9,r8[0x1c]
80002c0e:	4a ea       	lddpc	r10,80002cc4 <twim_master_interrupt_handler+0xbc>
80002c10:	74 0a       	ld.w	r10,r10[0x0]
80002c12:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002c16:	12 9a       	mov	r10,r9
80002c18:	e2 1a 07 00 	andl	r10,0x700,COH
80002c1c:	c1 40       	breq	80002c44 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80002c1e:	e2 19 03 00 	andl	r9,0x300,COH
80002c22:	f9 b9 01 fc 	movne	r9,-4
80002c26:	f9 b9 00 fe 	moveq	r9,-2
80002c2a:	4a 8a       	lddpc	r10,80002cc8 <twim_master_interrupt_handler+0xc0>
80002c2c:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80002c2e:	70 3a       	ld.w	r10,r8[0xc]
80002c30:	30 09       	mov	r9,0
80002c32:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002c36:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002c38:	3f fa       	mov	r10,-1
80002c3a:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80002c3c:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
80002c3e:	4a 48       	lddpc	r8,80002ccc <twim_master_interrupt_handler+0xc4>
80002c40:	b0 89       	st.b	r8[0x0],r9
80002c42:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002c44:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002c48:	c1 30       	breq	80002c6e <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80002c4a:	4a 2a       	lddpc	r10,80002cd0 <twim_master_interrupt_handler+0xc8>
80002c4c:	70 5b       	ld.w	r11,r8[0x14]
80002c4e:	74 09       	ld.w	r9,r10[0x0]
80002c50:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80002c52:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002c54:	4a 09       	lddpc	r9,80002cd4 <twim_master_interrupt_handler+0xcc>
80002c56:	72 0a       	ld.w	r10,r9[0x0]
80002c58:	20 1a       	sub	r10,1
80002c5a:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80002c5c:	72 09       	ld.w	r9,r9[0x0]
80002c5e:	58 09       	cp.w	r9,0
80002c60:	c2 f1       	brne	80002cbe <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80002c62:	30 19       	mov	r9,1
80002c64:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002c66:	30 09       	mov	r9,0
80002c68:	49 98       	lddpc	r8,80002ccc <twim_master_interrupt_handler+0xc4>
80002c6a:	b0 89       	st.b	r8[0x0],r9
80002c6c:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80002c6e:	e2 19 00 02 	andl	r9,0x2,COH
80002c72:	c2 60       	breq	80002cbe <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002c74:	49 99       	lddpc	r9,80002cd8 <twim_master_interrupt_handler+0xd0>
80002c76:	72 09       	ld.w	r9,r9[0x0]
80002c78:	58 09       	cp.w	r9,0
80002c7a:	c0 71       	brne	80002c88 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80002c7c:	30 29       	mov	r9,2
80002c7e:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002c80:	30 09       	mov	r9,0
80002c82:	49 38       	lddpc	r8,80002ccc <twim_master_interrupt_handler+0xc4>
80002c84:	b0 89       	st.b	r8[0x0],r9
80002c86:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002c88:	49 5a       	lddpc	r10,80002cdc <twim_master_interrupt_handler+0xd4>
80002c8a:	74 09       	ld.w	r9,r10[0x0]
80002c8c:	13 3b       	ld.ub	r11,r9++
80002c8e:	91 6b       	st.w	r8[0x18],r11
80002c90:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80002c92:	49 28       	lddpc	r8,80002cd8 <twim_master_interrupt_handler+0xd0>
80002c94:	70 09       	ld.w	r9,r8[0x0]
80002c96:	20 19       	sub	r9,1
80002c98:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80002c9a:	70 08       	ld.w	r8,r8[0x0]
80002c9c:	58 08       	cp.w	r8,0
80002c9e:	c1 01       	brne	80002cbe <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
80002ca0:	48 b8       	lddpc	r8,80002ccc <twim_master_interrupt_handler+0xc4>
80002ca2:	11 88       	ld.ub	r8,r8[0x0]
80002ca4:	58 08       	cp.w	r8,0
80002ca6:	c0 c0       	breq	80002cbe <twim_master_interrupt_handler+0xb6>
					twim_next = false;
80002ca8:	30 09       	mov	r9,0
80002caa:	48 98       	lddpc	r8,80002ccc <twim_master_interrupt_handler+0xc4>
80002cac:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
80002cae:	48 d8       	lddpc	r8,80002ce0 <twim_master_interrupt_handler+0xd8>
80002cb0:	70 08       	ld.w	r8,r8[0x0]
80002cb2:	70 3a       	ld.w	r10,r8[0xc]
80002cb4:	48 99       	lddpc	r9,80002cd8 <twim_master_interrupt_handler+0xd0>
80002cb6:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
80002cb8:	70 29       	ld.w	r9,r8[0x8]
80002cba:	48 98       	lddpc	r8,80002cdc <twim_master_interrupt_handler+0xd4>
80002cbc:	91 09       	st.w	r8[0x0],r9
80002cbe:	d6 03       	rete
80002cc0:	00 00       	add	r0,r0
80002cc2:	00 0c       	add	r12,r0
80002cc4:	00 00       	add	r0,r0
80002cc6:	00 20       	rsub	r0,r0
80002cc8:	00 00       	add	r0,r0
80002cca:	00 18       	sub	r8,r0
80002ccc:	00 00       	add	r0,r0
80002cce:	00 24       	rsub	r4,r0
80002cd0:	00 00       	add	r0,r0
80002cd2:	00 10       	sub	r0,r0
80002cd4:	00 00       	add	r0,r0
80002cd6:	00 14       	sub	r4,r0
80002cd8:	00 00       	add	r0,r0
80002cda:	00 2c       	rsub	r12,r0
80002cdc:	00 00       	add	r0,r0
80002cde:	00 1c       	sub	r12,r0
80002ce0:	00 00       	add	r0,r0
80002ce2:	00 28       	rsub	r8,r0

80002ce4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80002ce4:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80002ce8:	f4 0b 0d 0a 	divu	r10,r10,r11
80002cec:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002cf0:	e0 48 00 ff 	cp.w	r8,255
80002cf4:	e0 8b 00 04 	brhi	80002cfc <twim_set_speed+0x18>
80002cf8:	30 09       	mov	r9,0
80002cfa:	c1 a8       	rjmp	80002d2e <twim_set_speed+0x4a>
80002cfc:	30 09       	mov	r9,0
80002cfe:	30 77       	mov	r7,7
80002d00:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
80002d02:	2f f9       	sub	r9,-1
80002d04:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002d06:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002d08:	e0 48 00 ff 	cp.w	r8,255
80002d0c:	5f bb       	srhi	r11
80002d0e:	ee 09 18 00 	cp.b	r9,r7
80002d12:	5f 8a       	srls	r10
80002d14:	f7 ea 00 0a 	and	r10,r11,r10
80002d18:	fc 0a 18 00 	cp.b	r10,lr
80002d1c:	cf 31       	brne	80002d02 <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80002d1e:	30 7a       	mov	r10,7
80002d20:	f4 09 18 00 	cp.b	r9,r10
80002d24:	e0 88 00 05 	brls	80002d2e <twim_set_speed+0x4a>
80002d28:	3f 8c       	mov	r12,-8
80002d2a:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80002d2e:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80002d32:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002d36:	14 18       	sub	r8,r10
80002d38:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80002d3c:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80002d40:	99 19       	st.w	r12[0x4],r9
80002d42:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002d46:	d7 03       	nop

80002d48 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002d48:	48 38       	lddpc	r8,80002d54 <twim_status+0xc>
80002d4a:	70 08       	ld.w	r8,r8[0x0]
80002d4c:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
80002d4e:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002d52:	5e fc       	retal	r12
80002d54:	00 00       	add	r0,r0
80002d56:	00 0c       	add	r12,r0

80002d58 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002d58:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002d5c:	e6 18 00 01 	andh	r8,0x1,COH
80002d60:	c0 21       	brne	80002d64 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
80002d62:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002d64:	3f f8       	mov	r8,-1
80002d66:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002d68:	99 b8       	st.w	r12[0x2c],r8
}
80002d6a:	5e fc       	retal	r12

80002d6c <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002d6c:	eb cd 40 fe 	pushm	r1-r7,lr
80002d70:	18 97       	mov	r7,r12
80002d72:	16 93       	mov	r3,r11
80002d74:	14 95       	mov	r5,r10
80002d76:	12 92       	mov	r2,r9
80002d78:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002d7a:	30 14       	mov	r4,1
80002d7c:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002d7e:	e0 68 00 80 	mov	r8,128
80002d82:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002d84:	30 28       	mov	r8,2
80002d86:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002d88:	49 e6       	lddpc	r6,80002e00 <twim_write+0x94>
80002d8a:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002d8c:	f0 1f 00 1e 	mcall	80002e04 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80002d90:	49 e8       	lddpc	r8,80002e08 <twim_write+0x9c>
80002d92:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80002d94:	49 e8       	lddpc	r8,80002e0c <twim_write+0xa0>
80002d96:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
80002d98:	30 09       	mov	r9,0
80002d9a:	49 e8       	lddpc	r8,80002e10 <twim_write+0xa4>
80002d9c:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002d9e:	49 e9       	lddpc	r9,80002e14 <twim_write+0xa8>
80002da0:	30 08       	mov	r8,0
80002da2:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80002da4:	6c 08       	ld.w	r8,r6[0x0]
80002da6:	b1 65       	lsl	r5,0x10
80002da8:	e8 15 e0 00 	orl	r5,0xe000
80002dac:	eb e2 10 12 	or	r2,r5,r2<<0x1
80002db0:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
80002db4:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80002db6:	49 9a       	lddpc	r10,80002e18 <twim_write+0xac>
80002db8:	e0 6b 03 02 	mov	r11,770
80002dbc:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80002dbe:	74 0a       	ld.w	r10,r10[0x0]
80002dc0:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002dc2:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
80002dc4:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002dc6:	72 08       	ld.w	r8,r9[0x0]
80002dc8:	58 08       	cp.w	r8,0
80002dca:	c0 80       	breq	80002dda <twim_write+0x6e>
80002dcc:	c0 b8       	rjmp	80002de2 <twim_write+0x76>
		cpu_relax();
80002dce:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002dd2:	6c 08       	ld.w	r8,r6[0x0]
80002dd4:	58 08       	cp.w	r8,0
80002dd6:	c0 30       	breq	80002ddc <twim_write+0x70>
80002dd8:	c0 58       	rjmp	80002de2 <twim_write+0x76>
80002dda:	48 f6       	lddpc	r6,80002e14 <twim_write+0xa8>
80002ddc:	f0 1f 00 10 	mcall	80002e1c <twim_write+0xb0>
80002de0:	cf 70       	breq	80002dce <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002de2:	30 28       	mov	r8,2
80002de4:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002de6:	48 c8       	lddpc	r8,80002e14 <twim_write+0xa8>
80002de8:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80002dea:	5b c8       	cp.w	r8,-4
80002dec:	c0 70       	breq	80002dfa <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002dee:	48 a8       	lddpc	r8,80002e14 <twim_write+0xa8>
80002df0:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80002df2:	5b e8       	cp.w	r8,-2
80002df4:	c0 30       	breq	80002dfa <twim_write+0x8e>
80002df6:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002dfa:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
80002dfe:	00 00       	add	r0,r0
80002e00:	00 00       	add	r0,r0
80002e02:	00 0c       	add	r12,r0
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	2d 58       	sub	r8,-43
80002e08:	00 00       	add	r0,r0
80002e0a:	00 1c       	sub	r12,r0
80002e0c:	00 00       	add	r0,r0
80002e0e:	00 2c       	rsub	r12,r0
80002e10:	00 00       	add	r0,r0
80002e12:	00 24       	rsub	r4,r0
80002e14:	00 00       	add	r0,r0
80002e16:	00 18       	sub	r8,r0
80002e18:	00 00       	add	r0,r0
80002e1a:	00 20       	rsub	r0,r0
80002e1c:	80 00       	ld.sh	r0,r0[0x0]
80002e1e:	2d 48       	sub	r8,-44

80002e20 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002e20:	d4 01       	pushm	lr
80002e22:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002e24:	30 08       	mov	r8,0
80002e26:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80002e28:	30 08       	mov	r8,0
80002e2a:	16 99       	mov	r9,r11
80002e2c:	10 9a       	mov	r10,r8
80002e2e:	1a 9b       	mov	r11,sp
80002e30:	f0 1f 00 02 	mcall	80002e38 <twim_probe+0x18>
}
80002e34:	2f fd       	sub	sp,-4
80002e36:	d8 02       	popm	pc
80002e38:	80 00       	ld.sh	r0,r0[0x0]
80002e3a:	2d 6c       	sub	r12,-42

80002e3c <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80002e3c:	eb cd 40 c0 	pushm	r6-r7,lr
80002e40:	18 96       	mov	r6,r12
80002e42:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002e44:	30 28       	mov	r8,2
80002e46:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002e48:	4b 78       	lddpc	r8,80002f24 <twim_read_packet+0xe8>
80002e4a:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002e4c:	f0 1f 00 37 	mcall	80002f28 <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002e50:	6e 29       	ld.w	r9,r7[0x8]
80002e52:	4b 78       	lddpc	r8,80002f2c <twim_read_packet+0xf0>
80002e54:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
80002e56:	6e 39       	ld.w	r9,r7[0xc]
80002e58:	4b 68       	lddpc	r8,80002f30 <twim_read_packet+0xf4>
80002e5a:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80002e5c:	30 08       	mov	r8,0
80002e5e:	4b 6a       	lddpc	r10,80002f34 <twim_read_packet+0xf8>
80002e60:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002e62:	30 0b       	mov	r11,0
80002e64:	4b 5a       	lddpc	r10,80002f38 <twim_read_packet+0xfc>
80002e66:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
80002e68:	0f fa       	ld.ub	r10,r7[0x7]
80002e6a:	f0 0a 18 00 	cp.b	r10,r8
80002e6e:	c2 50       	breq	80002eb8 <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002e70:	4a d8       	lddpc	r8,80002f24 <twim_read_packet+0xe8>
80002e72:	70 08       	ld.w	r8,r8[0x0]
80002e74:	30 19       	mov	r9,1
80002e76:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80002e78:	e0 69 00 80 	mov	r9,128
80002e7c:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80002e7e:	30 29       	mov	r9,2
80002e80:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80002e82:	ee ca ff fc 	sub	r10,r7,-4
80002e86:	4a e9       	lddpc	r9,80002f3c <twim_read_packet+0x100>
80002e88:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80002e8a:	0f f9       	ld.ub	r9,r7[0x7]
80002e8c:	4a da       	lddpc	r10,80002f40 <twim_read_packet+0x104>
80002e8e:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002e90:	e0 6b 07 03 	mov	r11,1795
80002e94:	4a ca       	lddpc	r10,80002f44 <twim_read_packet+0x108>
80002e96:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002e98:	6e 0a       	ld.w	r10,r7[0x0]
80002e9a:	a1 7a       	lsl	r10,0x1
80002e9c:	e8 1a a0 00 	orl	r10,0xa000
80002ea0:	f5 e9 11 09 	or	r9,r10,r9<<0x10
80002ea4:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80002ea6:	6e 0a       	ld.w	r10,r7[0x0]
80002ea8:	6e 39       	ld.w	r9,r7[0xc]
80002eaa:	b1 69       	lsl	r9,0x10
80002eac:	f3 ea 10 19 	or	r9,r9,r10<<0x1
80002eb0:	e8 19 e0 01 	orl	r9,0xe001
80002eb4:	91 49       	st.w	r8[0x10],r9
80002eb6:	c1 18       	rjmp	80002ed8 <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
80002eb8:	30 0a       	mov	r10,0
80002eba:	4a 28       	lddpc	r8,80002f40 <twim_read_packet+0x104>
80002ebc:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
80002ebe:	e0 6a 07 01 	mov	r10,1793
80002ec2:	4a 18       	lddpc	r8,80002f44 <twim_read_packet+0x108>
80002ec4:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002ec6:	49 88       	lddpc	r8,80002f24 <twim_read_packet+0xe8>
80002ec8:	70 08       	ld.w	r8,r8[0x0]
80002eca:	6e 0a       	ld.w	r10,r7[0x0]
80002ecc:	b1 69       	lsl	r9,0x10
80002ece:	f3 ea 10 19 	or	r9,r9,r10<<0x1
80002ed2:	e8 19 e0 01 	orl	r9,0xe001
80002ed6:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80002ed8:	49 38       	lddpc	r8,80002f24 <twim_read_packet+0xe8>
80002eda:	70 08       	ld.w	r8,r8[0x0]
80002edc:	49 a9       	lddpc	r9,80002f44 <twim_read_packet+0x108>
80002ede:	72 09       	ld.w	r9,r9[0x0]
80002ee0:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002ee2:	30 18       	mov	r8,1
80002ee4:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
80002ee6:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80002ee8:	49 48       	lddpc	r8,80002f38 <twim_read_packet+0xfc>
80002eea:	70 08       	ld.w	r8,r8[0x0]
80002eec:	58 08       	cp.w	r8,0
80002eee:	c0 80       	breq	80002efe <twim_read_packet+0xc2>
80002ef0:	c0 b8       	rjmp	80002f06 <twim_read_packet+0xca>
		cpu_relax();
80002ef2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80002ef6:	6e 08       	ld.w	r8,r7[0x0]
80002ef8:	58 08       	cp.w	r8,0
80002efa:	c0 30       	breq	80002f00 <twim_read_packet+0xc4>
80002efc:	c0 58       	rjmp	80002f06 <twim_read_packet+0xca>
80002efe:	48 f7       	lddpc	r7,80002f38 <twim_read_packet+0xfc>
80002f00:	f0 1f 00 12 	mcall	80002f48 <twim_read_packet+0x10c>
80002f04:	cf 70       	breq	80002ef2 <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002f06:	30 28       	mov	r8,2
80002f08:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002f0a:	48 c8       	lddpc	r8,80002f38 <twim_read_packet+0xfc>
80002f0c:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002f0e:	5b c8       	cp.w	r8,-4
80002f10:	c0 70       	breq	80002f1e <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002f12:	48 a8       	lddpc	r8,80002f38 <twim_read_packet+0xfc>
80002f14:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002f16:	5b e8       	cp.w	r8,-2
80002f18:	c0 30       	breq	80002f1e <twim_read_packet+0xe2>
80002f1a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002f1e:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80002f22:	00 00       	add	r0,r0
80002f24:	00 00       	add	r0,r0
80002f26:	00 0c       	add	r12,r0
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	2d 58       	sub	r8,-43
80002f2c:	00 00       	add	r0,r0
80002f2e:	00 10       	sub	r0,r0
80002f30:	00 00       	add	r0,r0
80002f32:	00 14       	sub	r4,r0
80002f34:	00 00       	add	r0,r0
80002f36:	00 24       	rsub	r4,r0
80002f38:	00 00       	add	r0,r0
80002f3a:	00 18       	sub	r8,r0
80002f3c:	00 00       	add	r0,r0
80002f3e:	00 1c       	sub	r12,r0
80002f40:	00 00       	add	r0,r0
80002f42:	00 2c       	rsub	r12,r0
80002f44:	00 00       	add	r0,r0
80002f46:	00 20       	rsub	r0,r0
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	2d 48       	sub	r8,-44

80002f4c <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002f4c:	eb cd 40 e0 	pushm	r5-r7,lr
80002f50:	20 1d       	sub	sp,4
80002f52:	18 97       	mov	r7,r12
80002f54:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002f56:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002f5a:	30 0a       	mov	r10,0
80002f5c:	4a 79       	lddpc	r9,80002ff8 <twim_master_init+0xac>
80002f5e:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002f60:	e6 18 00 01 	andh	r8,0x1,COH
80002f64:	c0 b1       	brne	80002f7a <twim_master_init+0x2e>
		cpu_irq_disable ();
80002f66:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80002f68:	3f f8       	mov	r8,-1
80002f6a:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002f6c:	30 18       	mov	r8,1
80002f6e:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002f70:	e0 68 00 80 	mov	r8,128
80002f74:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002f76:	d5 03       	csrf	0x10
80002f78:	c0 88       	rjmp	80002f88 <twim_master_init+0x3c>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80002f7a:	3f f8       	mov	r8,-1
80002f7c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002f7e:	30 18       	mov	r8,1
80002f80:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002f82:	e0 68 00 80 	mov	r8,128
80002f86:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80002f88:	3f f8       	mov	r8,-1
80002f8a:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f8c:	e1 b8 00 00 	mfsr	r8,0x0
80002f90:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002f92:	d3 03       	ssrf	0x10

	return flags;
80002f94:	40 06       	lddsp	r6,sp[0x0]

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002f96:	30 1a       	mov	r10,1
80002f98:	e0 6b 01 40 	mov	r11,320
80002f9c:	49 8c       	lddpc	r12,80002ffc <twim_master_init+0xb0>
80002f9e:	f0 1f 00 19 	mcall	80003000 <twim_master_init+0xb4>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002fa2:	e6 16 00 01 	andh	r6,0x1,COH
80002fa6:	c0 21       	brne	80002faa <twim_master_init+0x5e>
      cpu_irq_enable();
80002fa8:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80002faa:	eb 39 00 0c 	ld.ub	r9,r5[12]
80002fae:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80002fb0:	f0 09 18 00 	cp.b	r9,r8
80002fb4:	f9 b8 01 10 	movne	r8,16
80002fb8:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
80002fbc:	f9 b8 01 ff 	movne	r8,-1
80002fc0:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80002fc4:	6a 0a       	ld.w	r10,r5[0x0]
80002fc6:	6a 1b       	ld.w	r11,r5[0x4]
80002fc8:	0e 9c       	mov	r12,r7
80002fca:	f0 1f 00 0f 	mcall	80003004 <twim_master_init+0xb8>
80002fce:	5b 8c       	cp.w	r12,-8
80002fd0:	c1 00       	breq	80002ff0 <twim_master_init+0xa4>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80002fd2:	6a 2b       	ld.w	r11,r5[0x8]
80002fd4:	0e 9c       	mov	r12,r7
80002fd6:	f0 1f 00 0d 	mcall	80003008 <twim_master_init+0xbc>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002fda:	48 88       	lddpc	r8,80002ff8 <twim_master_init+0xac>
80002fdc:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80002fde:	5b c8       	cp.w	r8,-4
80002fe0:	c0 70       	breq	80002fee <twim_master_init+0xa2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002fe2:	48 68       	lddpc	r8,80002ff8 <twim_master_init+0xac>
80002fe4:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80002fe6:	5b e8       	cp.w	r8,-2
80002fe8:	c0 30       	breq	80002fee <twim_master_init+0xa2>
80002fea:	30 0c       	mov	r12,0
80002fec:	c0 28       	rjmp	80002ff0 <twim_master_init+0xa4>
80002fee:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
80002ff0:	2f fd       	sub	sp,-4
80002ff2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002ff6:	00 00       	add	r0,r0
80002ff8:	00 00       	add	r0,r0
80002ffa:	00 18       	sub	r8,r0
80002ffc:	80 00       	ld.sh	r0,r0[0x0]
80002ffe:	2c 08       	sub	r8,-64
80003000:	80 00       	ld.sh	r0,r0[0x0]
80003002:	30 10       	mov	r0,1
80003004:	80 00       	ld.sh	r0,r0[0x0]
80003006:	2c e4       	sub	r4,-50
80003008:	80 00       	ld.sh	r0,r0[0x0]
8000300a:	2e 20       	sub	r0,-30

8000300c <_unhandled_interrupt>:
8000300c:	c0 08       	rjmp	8000300c <_unhandled_interrupt>
8000300e:	d7 03       	nop

80003010 <INTC_register_interrupt>:
80003010:	f6 08 16 05 	lsr	r8,r11,0x5
80003014:	49 99       	lddpc	r9,80003078 <INTC_register_interrupt+0x68>
80003016:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000301a:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000301e:	72 19       	ld.w	r9,r9[0x4]
80003020:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
80003024:	58 0a       	cp.w	r10,0
80003026:	c0 91       	brne	80003038 <INTC_register_interrupt+0x28>
80003028:	49 59       	lddpc	r9,8000307c <INTC_register_interrupt+0x6c>
8000302a:	49 6a       	lddpc	r10,80003080 <INTC_register_interrupt+0x70>
8000302c:	12 1a       	sub	r10,r9
8000302e:	fe 79 10 00 	mov	r9,-61440
80003032:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003036:	5e fc       	retal	r12
80003038:	58 1a       	cp.w	r10,1
8000303a:	c0 a1       	brne	8000304e <INTC_register_interrupt+0x3e>
8000303c:	49 09       	lddpc	r9,8000307c <INTC_register_interrupt+0x6c>
8000303e:	49 2a       	lddpc	r10,80003084 <INTC_register_interrupt+0x74>
80003040:	12 1a       	sub	r10,r9
80003042:	bf aa       	sbr	r10,0x1e
80003044:	fe 79 10 00 	mov	r9,-61440
80003048:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000304c:	5e fc       	retal	r12
8000304e:	58 2a       	cp.w	r10,2
80003050:	c0 a1       	brne	80003064 <INTC_register_interrupt+0x54>
80003052:	48 b9       	lddpc	r9,8000307c <INTC_register_interrupt+0x6c>
80003054:	48 da       	lddpc	r10,80003088 <INTC_register_interrupt+0x78>
80003056:	12 1a       	sub	r10,r9
80003058:	bf ba       	sbr	r10,0x1f
8000305a:	fe 79 10 00 	mov	r9,-61440
8000305e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003062:	5e fc       	retal	r12
80003064:	48 69       	lddpc	r9,8000307c <INTC_register_interrupt+0x6c>
80003066:	48 aa       	lddpc	r10,8000308c <INTC_register_interrupt+0x7c>
80003068:	12 1a       	sub	r10,r9
8000306a:	ea 1a c0 00 	orh	r10,0xc000
8000306e:	fe 79 10 00 	mov	r9,-61440
80003072:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003076:	5e fc       	retal	r12
80003078:	80 00       	ld.sh	r0,r0[0x0]
8000307a:	36 68       	mov	r8,102
8000307c:	80 00       	ld.sh	r0,r0[0x0]
8000307e:	34 00       	mov	r0,64
80003080:	80 00       	ld.sh	r0,r0[0x0]
80003082:	35 04       	mov	r4,80
80003084:	80 00       	ld.sh	r0,r0[0x0]
80003086:	35 12       	mov	r2,81
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	35 20       	mov	r0,82
8000308c:	80 00       	ld.sh	r0,r0[0x0]
8000308e:	35 2e       	mov	lr,82

80003090 <INTC_init_interrupts>:
80003090:	d4 21       	pushm	r4-r7,lr
80003092:	49 18       	lddpc	r8,800030d4 <INTC_init_interrupts+0x44>
80003094:	e3 b8 00 01 	mtsr	0x4,r8
80003098:	49 0e       	lddpc	lr,800030d8 <INTC_init_interrupts+0x48>
8000309a:	30 07       	mov	r7,0
8000309c:	0e 94       	mov	r4,r7
8000309e:	49 0c       	lddpc	r12,800030dc <INTC_init_interrupts+0x4c>
800030a0:	49 05       	lddpc	r5,800030e0 <INTC_init_interrupts+0x50>
800030a2:	10 15       	sub	r5,r8
800030a4:	fe 76 10 00 	mov	r6,-61440
800030a8:	c1 08       	rjmp	800030c8 <INTC_init_interrupts+0x38>
800030aa:	08 98       	mov	r8,r4
800030ac:	7c 1b       	ld.w	r11,lr[0x4]
800030ae:	7c 0a       	ld.w	r10,lr[0x0]
800030b0:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
800030b4:	2f f8       	sub	r8,-1
800030b6:	10 3a       	cp.w	r10,r8
800030b8:	fe 9b ff fc 	brhi	800030b0 <INTC_init_interrupts+0x20>
800030bc:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
800030c0:	2f f7       	sub	r7,-1
800030c2:	2f 8e       	sub	lr,-8
800030c4:	59 67       	cp.w	r7,22
800030c6:	c0 50       	breq	800030d0 <INTC_init_interrupts+0x40>
800030c8:	7c 08       	ld.w	r8,lr[0x0]
800030ca:	58 08       	cp.w	r8,0
800030cc:	ce f1       	brne	800030aa <INTC_init_interrupts+0x1a>
800030ce:	cf 7b       	rjmp	800030bc <INTC_init_interrupts+0x2c>
800030d0:	d8 22       	popm	r4-r7,pc
800030d2:	00 00       	add	r0,r0
800030d4:	80 00       	ld.sh	r0,r0[0x0]
800030d6:	34 00       	mov	r0,64
800030d8:	80 00       	ld.sh	r0,r0[0x0]
800030da:	36 68       	mov	r8,102
800030dc:	80 00       	ld.sh	r0,r0[0x0]
800030de:	30 0c       	mov	r12,0
800030e0:	80 00       	ld.sh	r0,r0[0x0]
800030e2:	35 04       	mov	r4,80

800030e4 <_get_interrupt_handler>:
800030e4:	fe 78 10 00 	mov	r8,-61440
800030e8:	e0 69 00 83 	mov	r9,131
800030ec:	f2 0c 01 0c 	sub	r12,r9,r12
800030f0:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
800030f4:	f2 ca ff c0 	sub	r10,r9,-64
800030f8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800030fc:	58 08       	cp.w	r8,0
800030fe:	c0 21       	brne	80003102 <_get_interrupt_handler+0x1e>
80003100:	5e fd       	retal	0
80003102:	f0 08 12 00 	clz	r8,r8
80003106:	48 5a       	lddpc	r10,80003118 <_get_interrupt_handler+0x34>
80003108:	f4 09 00 39 	add	r9,r10,r9<<0x3
8000310c:	f0 08 11 1f 	rsub	r8,r8,31
80003110:	72 19       	ld.w	r9,r9[0x4]
80003112:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
80003116:	5e fc       	retal	r12
80003118:	80 00       	ld.sh	r0,r0[0x0]
8000311a:	36 68       	mov	r8,102

8000311c <_stext>:
8000311c:	e0 6d 40 00 	mov	sp,16384
80003120:	fe c0 fd 20 	sub	r0,pc,-736
80003124:	e3 b0 00 01 	mtsr	0x4,r0
80003128:	d5 53       	csrf	0x15
8000312a:	30 40       	mov	r0,4
8000312c:	30 81       	mov	r1,8
8000312e:	02 30       	cp.w	r0,r1
80003130:	c0 72       	brcc	8000313e <idata_load_loop_end>
80003132:	fe c2 fa 1a 	sub	r2,pc,-1510

80003136 <idata_load_loop>:
80003136:	a5 05       	ld.d	r4,r2++
80003138:	a1 24       	st.d	r0++,r4
8000313a:	02 30       	cp.w	r0,r1
8000313c:	cf d3       	brcs	80003136 <idata_load_loop>

8000313e <idata_load_loop_end>:
8000313e:	30 80       	mov	r0,8
80003140:	e0 61 01 68 	mov	r1,360
80003144:	02 30       	cp.w	r0,r1
80003146:	c0 62       	brcc	80003152 <udata_clear_loop_end>
80003148:	30 02       	mov	r2,0
8000314a:	30 03       	mov	r3,0

8000314c <udata_clear_loop>:
8000314c:	a1 22       	st.d	r0++,r2
8000314e:	02 30       	cp.w	r0,r1
80003150:	cf e3       	brcs	8000314c <udata_clear_loop>

80003152 <udata_clear_loop_end>:
80003152:	fe cf ff ae 	sub	pc,pc,-82
80003156:	d7 03       	nop

80003158 <board_init>:
#include "com_spi.h"
#include "motor_control.h"
#include "settings_t.h"

void board_init(void)
{
80003158:	d4 01       	pushm	lr
	sysclk_init();
8000315a:	f0 1f 00 0c 	mcall	80003188 <board_init+0x30>
	INTC_init_interrupts();
8000315e:	f0 1f 00 0c 	mcall	8000318c <board_init+0x34>
80003162:	30 6b       	mov	r11,6
80003164:	30 2c       	mov	r12,2
80003166:	f0 1f 00 0b 	mcall	80003190 <board_init+0x38>
	ioport_init();
	
	settings_init();
8000316a:	f0 1f 00 0b 	mcall	80003194 <board_init+0x3c>
	
	sensor_init();
8000316e:	f0 1f 00 0b 	mcall	80003198 <board_init+0x40>
	motor_init();	
80003172:	f0 1f 00 0b 	mcall	8000319c <board_init+0x44>
	com_spi_init();
80003176:	f0 1f 00 0b 	mcall	800031a0 <board_init+0x48>

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->oders = arch_ioport_pin_to_mask(
8000317a:	fc 19 00 80 	movh	r9,0x80
8000317e:	fe 78 28 00 	mov	r8,-55296
80003182:	f1 49 00 44 	st.w	r8[68],r9
	//ioport_set_pin_dir(RST_ARDU_REG, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_TRANS, IOPORT_DIR_OUTPUT);
	
}
80003186:	d8 02       	popm	pc
80003188:	80 00       	ld.sh	r0,r0[0x0]
8000318a:	2b 38       	sub	r8,-77
8000318c:	80 00       	ld.sh	r0,r0[0x0]
8000318e:	30 90       	mov	r0,9
80003190:	80 00       	ld.sh	r0,r0[0x0]
80003192:	2b 78       	sub	r8,-73
80003194:	80 00       	ld.sh	r0,r0[0x0]
80003196:	28 00       	sub	r0,-128
80003198:	80 00       	ld.sh	r0,r0[0x0]
8000319a:	26 a4       	sub	r4,106
8000319c:	80 00       	ld.sh	r0,r0[0x0]
8000319e:	24 40       	sub	r0,68
800031a0:	80 00       	ld.sh	r0,r0[0x0]
800031a2:	23 5c       	sub	r12,53

800031a4 <main>:
#include "com_spi.h"

struct bno055_euler_t sensor_euler;

int main (void)
{
800031a4:	d4 31       	pushm	r0-r7,lr
800031a6:	20 3d       	sub	sp,12
	board_init();		
800031a8:	f0 1f 00 47 	mcall	800032c4 <main+0x120>

	while (1)
	{
		sensor_euler = read_sensor_euler();
800031ac:	4c 70       	lddpc	r0,800032c8 <main+0x124>
800031ae:	1a 92       	mov	r2,sp
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
800031b0:	fe 77 28 00 	mov	r7,-55296
800031b4:	fc 11 00 80 	movh	r1,0x80

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
800031b8:	e0 66 40 00 	mov	r6,16384
800031bc:	e0 65 80 00 	mov	r5,32768
800031c0:	e2 64 00 00 	mov	r4,131072
800031c4:	e0 63 c6 c0 	mov	r3,50880
800031c8:	ea 13 00 2d 	orh	r3,0x2d
800031cc:	1a 9c       	mov	r12,sp
800031ce:	f0 1f 00 40 	mcall	800032cc <main+0x128>
800031d2:	e4 e8 00 00 	ld.d	r8,r2[0]
800031d6:	e0 e9 00 00 	st.d	r0[0],r8
800031da:	64 28       	ld.w	r8,r2[0x8]
800031dc:	81 28       	st.w	r0[0x8],r8
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
800031de:	ef 41 00 58 	st.w	r7[88],r1

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
800031e2:	ef 46 00 54 	st.w	r7[84],r6
800031e6:	ef 45 00 54 	st.w	r7[84],r5
800031ea:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031ee:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031f2:	f0 03 00 0a 	add	r10,r8,r3
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800031f6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800031fa:	14 38       	cp.w	r8,r10
800031fc:	e0 88 00 08 	brls	8000320c <main+0x68>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003200:	12 38       	cp.w	r8,r9
80003202:	fe 98 ff fa 	brls	800031f6 <main+0x52>
80003206:	12 3a       	cp.w	r10,r9
80003208:	c3 b3       	brcs	8000327e <main+0xda>
8000320a:	cf 6b       	rjmp	800031f6 <main+0x52>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000320c:	12 38       	cp.w	r8,r9
8000320e:	e0 8b 00 38 	brhi	8000327e <main+0xda>
80003212:	12 3a       	cp.w	r10,r9
80003214:	c3 53       	brcs	8000327e <main+0xda>
80003216:	cf 0b       	rjmp	800031f6 <main+0x52>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003218:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000321c:	14 38       	cp.w	r8,r10
8000321e:	e0 88 00 08 	brls	8000322e <main+0x8a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003222:	12 38       	cp.w	r8,r9
80003224:	fe 98 ff fa 	brls	80003218 <main+0x74>
80003228:	12 3a       	cp.w	r10,r9
8000322a:	c3 53       	brcs	80003294 <main+0xf0>
8000322c:	cf 6b       	rjmp	80003218 <main+0x74>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000322e:	12 38       	cp.w	r8,r9
80003230:	e0 8b 00 32 	brhi	80003294 <main+0xf0>
80003234:	12 3a       	cp.w	r10,r9
80003236:	c2 f3       	brcs	80003294 <main+0xf0>
80003238:	cf 0b       	rjmp	80003218 <main+0x74>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000323a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000323e:	14 38       	cp.w	r8,r10
80003240:	e0 88 00 08 	brls	80003250 <main+0xac>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003244:	12 38       	cp.w	r8,r9
80003246:	fe 98 ff fa 	brls	8000323a <main+0x96>
8000324a:	12 3a       	cp.w	r10,r9
8000324c:	c3 13       	brcs	800032ae <main+0x10a>
8000324e:	cf 6b       	rjmp	8000323a <main+0x96>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003250:	12 38       	cp.w	r8,r9
80003252:	e0 8b 00 2e 	brhi	800032ae <main+0x10a>
80003256:	12 3a       	cp.w	r10,r9
80003258:	c2 b3       	brcs	800032ae <main+0x10a>
8000325a:	cf 0b       	rjmp	8000323a <main+0x96>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000325c:	e1 ba 00 42 	mfsr	r10,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003260:	12 38       	cp.w	r8,r9
80003262:	e0 88 00 08 	brls	80003272 <main+0xce>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003266:	14 38       	cp.w	r8,r10
80003268:	fe 98 ff fa 	brls	8000325c <main+0xb8>
8000326c:	14 39       	cp.w	r9,r10
8000326e:	ca f3       	brcs	800031cc <main+0x28>
80003270:	cf 6b       	rjmp	8000325c <main+0xb8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003272:	14 38       	cp.w	r8,r10
80003274:	fe 9b ff ac 	brhi	800031cc <main+0x28>
80003278:	14 39       	cp.w	r9,r10
8000327a:	ca 93       	brcs	800031cc <main+0x28>
8000327c:	cf 0b       	rjmp	8000325c <main+0xb8>
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
8000327e:	ef 46 00 58 	st.w	r7[88],r6

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
80003282:	ef 45 00 54 	st.w	r7[84],r5
80003286:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000328a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000328e:	f0 03 00 0a 	add	r10,r8,r3
80003292:	cc 3b       	rjmp	80003218 <main+0x74>
80003294:	ef 41 00 54 	st.w	r7[84],r1
80003298:	ef 46 00 54 	st.w	r7[84],r6
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
8000329c:	ef 45 00 58 	st.w	r7[88],r5

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->ovrs
800032a0:	ef 44 00 54 	st.w	r7[84],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800032a4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800032a8:	f0 03 00 0a 	add	r10,r8,r3
800032ac:	cc 7b       	rjmp	8000323a <main+0x96>
800032ae:	ef 46 00 54 	st.w	r7[84],r6
800032b2:	ef 45 00 54 	st.w	r7[84],r5
			= arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->ovrc
800032b6:	ef 44 00 58 	st.w	r7[88],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800032ba:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800032be:	f0 03 00 09 	add	r9,r8,r3
800032c2:	cc db       	rjmp	8000325c <main+0xb8>
800032c4:	80 00       	ld.sh	r0,r0[0x0]
800032c6:	31 58       	mov	r8,21
800032c8:	00 00       	add	r0,r0
800032ca:	01 58       	ld.sh	r8,--r0
800032cc:	80 00       	ld.sh	r0,r0[0x0]
800032ce:	26 68       	sub	r8,102

Disassembly of section .exception:

80003400 <_evba>:
80003400:	c0 08       	rjmp	80003400 <_evba>
	...

80003404 <_handle_TLB_Multiple_Hit>:
80003404:	c0 08       	rjmp	80003404 <_handle_TLB_Multiple_Hit>
	...

80003408 <_handle_Bus_Error_Data_Fetch>:
80003408:	c0 08       	rjmp	80003408 <_handle_Bus_Error_Data_Fetch>
	...

8000340c <_handle_Bus_Error_Instruction_Fetch>:
8000340c:	c0 08       	rjmp	8000340c <_handle_Bus_Error_Instruction_Fetch>
	...

80003410 <_handle_NMI>:
80003410:	c0 08       	rjmp	80003410 <_handle_NMI>
	...

80003414 <_handle_Instruction_Address>:
80003414:	c0 08       	rjmp	80003414 <_handle_Instruction_Address>
	...

80003418 <_handle_ITLB_Protection>:
80003418:	c0 08       	rjmp	80003418 <_handle_ITLB_Protection>
	...

8000341c <_handle_Breakpoint>:
8000341c:	c0 08       	rjmp	8000341c <_handle_Breakpoint>
	...

80003420 <_handle_Illegal_Opcode>:
80003420:	c0 08       	rjmp	80003420 <_handle_Illegal_Opcode>
	...

80003424 <_handle_Unimplemented_Instruction>:
80003424:	c0 08       	rjmp	80003424 <_handle_Unimplemented_Instruction>
	...

80003428 <_handle_Privilege_Violation>:
80003428:	c0 08       	rjmp	80003428 <_handle_Privilege_Violation>
	...

8000342c <_handle_Floating_Point>:
8000342c:	c0 08       	rjmp	8000342c <_handle_Floating_Point>
	...

80003430 <_handle_Coprocessor_Absent>:
80003430:	c0 08       	rjmp	80003430 <_handle_Coprocessor_Absent>
	...

80003434 <_handle_Data_Address_Read>:
80003434:	c0 08       	rjmp	80003434 <_handle_Data_Address_Read>
	...

80003438 <_handle_Data_Address_Write>:
80003438:	c0 08       	rjmp	80003438 <_handle_Data_Address_Write>
	...

8000343c <_handle_DTLB_Protection_Read>:
8000343c:	c0 08       	rjmp	8000343c <_handle_DTLB_Protection_Read>
	...

80003440 <_handle_DTLB_Protection_Write>:
80003440:	c0 08       	rjmp	80003440 <_handle_DTLB_Protection_Write>
	...

80003444 <_handle_DTLB_Modified>:
80003444:	c0 08       	rjmp	80003444 <_handle_DTLB_Modified>
	...

80003450 <_handle_ITLB_Miss>:
80003450:	c0 08       	rjmp	80003450 <_handle_ITLB_Miss>
	...

80003460 <_handle_DTLB_Miss_Read>:
80003460:	c0 08       	rjmp	80003460 <_handle_DTLB_Miss_Read>
	...

80003470 <_handle_DTLB_Miss_Write>:
80003470:	c0 08       	rjmp	80003470 <_handle_DTLB_Miss_Write>
	...

80003500 <_handle_Supervisor_Call>:
80003500:	c0 08       	rjmp	80003500 <_handle_Supervisor_Call>
80003502:	d7 03       	nop

80003504 <_int0>:
80003504:	30 0c       	mov	r12,0
80003506:	fe b0 fd ef 	rcall	800030e4 <_get_interrupt_handler>
8000350a:	58 0c       	cp.w	r12,0
8000350c:	f8 0f 17 10 	movne	pc,r12
80003510:	d6 03       	rete

80003512 <_int1>:
80003512:	30 1c       	mov	r12,1
80003514:	fe b0 fd e8 	rcall	800030e4 <_get_interrupt_handler>
80003518:	58 0c       	cp.w	r12,0
8000351a:	f8 0f 17 10 	movne	pc,r12
8000351e:	d6 03       	rete

80003520 <_int2>:
80003520:	30 2c       	mov	r12,2
80003522:	fe b0 fd e1 	rcall	800030e4 <_get_interrupt_handler>
80003526:	58 0c       	cp.w	r12,0
80003528:	f8 0f 17 10 	movne	pc,r12
8000352c:	d6 03       	rete

8000352e <_int3>:
8000352e:	30 3c       	mov	r12,3
80003530:	fe b0 fd da 	rcall	800030e4 <_get_interrupt_handler>
80003534:	58 0c       	cp.w	r12,0
80003536:	f8 0f 17 10 	movne	pc,r12
8000353a:	d6 03       	rete
8000353c:	d7 03       	nop
8000353e:	d7 03       	nop
80003540:	d7 03       	nop
80003542:	d7 03       	nop
80003544:	d7 03       	nop
80003546:	d7 03       	nop
80003548:	d7 03       	nop
8000354a:	d7 03       	nop
8000354c:	d7 03       	nop
8000354e:	d7 03       	nop
80003550:	d7 03       	nop
80003552:	d7 03       	nop
80003554:	d7 03       	nop
80003556:	d7 03       	nop
80003558:	d7 03       	nop
8000355a:	d7 03       	nop
8000355c:	d7 03       	nop
8000355e:	d7 03       	nop
80003560:	d7 03       	nop
80003562:	d7 03       	nop
80003564:	d7 03       	nop
80003566:	d7 03       	nop
80003568:	d7 03       	nop
8000356a:	d7 03       	nop
8000356c:	d7 03       	nop
8000356e:	d7 03       	nop
80003570:	d7 03       	nop
80003572:	d7 03       	nop
80003574:	d7 03       	nop
80003576:	d7 03       	nop
80003578:	d7 03       	nop
8000357a:	d7 03       	nop
8000357c:	d7 03       	nop
8000357e:	d7 03       	nop
80003580:	d7 03       	nop
80003582:	d7 03       	nop
80003584:	d7 03       	nop
80003586:	d7 03       	nop
80003588:	d7 03       	nop
8000358a:	d7 03       	nop
8000358c:	d7 03       	nop
8000358e:	d7 03       	nop
80003590:	d7 03       	nop
80003592:	d7 03       	nop
80003594:	d7 03       	nop
80003596:	d7 03       	nop
80003598:	d7 03       	nop
8000359a:	d7 03       	nop
8000359c:	d7 03       	nop
8000359e:	d7 03       	nop
800035a0:	d7 03       	nop
800035a2:	d7 03       	nop
800035a4:	d7 03       	nop
800035a6:	d7 03       	nop
800035a8:	d7 03       	nop
800035aa:	d7 03       	nop
800035ac:	d7 03       	nop
800035ae:	d7 03       	nop
800035b0:	d7 03       	nop
800035b2:	d7 03       	nop
800035b4:	d7 03       	nop
800035b6:	d7 03       	nop
800035b8:	d7 03       	nop
800035ba:	d7 03       	nop
800035bc:	d7 03       	nop
800035be:	d7 03       	nop
800035c0:	d7 03       	nop
800035c2:	d7 03       	nop
800035c4:	d7 03       	nop
800035c6:	d7 03       	nop
800035c8:	d7 03       	nop
800035ca:	d7 03       	nop
800035cc:	d7 03       	nop
800035ce:	d7 03       	nop
800035d0:	d7 03       	nop
800035d2:	d7 03       	nop
800035d4:	d7 03       	nop
800035d6:	d7 03       	nop
800035d8:	d7 03       	nop
800035da:	d7 03       	nop
800035dc:	d7 03       	nop
800035de:	d7 03       	nop
800035e0:	d7 03       	nop
800035e2:	d7 03       	nop
800035e4:	d7 03       	nop
800035e6:	d7 03       	nop
800035e8:	d7 03       	nop
800035ea:	d7 03       	nop
800035ec:	d7 03       	nop
800035ee:	d7 03       	nop
800035f0:	d7 03       	nop
800035f2:	d7 03       	nop
800035f4:	d7 03       	nop
800035f6:	d7 03       	nop
800035f8:	d7 03       	nop
800035fa:	d7 03       	nop
800035fc:	d7 03       	nop
800035fe:	d7 03       	nop
